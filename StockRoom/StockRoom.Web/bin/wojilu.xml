<?xml version="1.0"?>
<doc>
    <assembly>
        <name>wojilu</name>
    </assembly>
    <members>
        <member name="T:wojilu.Aop.AopContext">
            <summary>
            Aop 容器，可以创建代理类，或者获取所有被监控的对象、方法。
            本容器创建的所有对象都未经过Ioc处理。
            </summary>
        </member>
        <member name="M:wojilu.Aop.AopContext.GetObservedTypes">
            <summary>
            获取所有被监控的类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Aop.AopContext.GetMethodObservers(System.Type,System.String)">
            <summary>
            获取某方法的监控器
            </summary>
            <param name="t"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Aop.AopContext.GetInvokeObserver(System.Type,System.String)">
            <summary>
            获取某方法的 "混合运行" 监控器。为了避免被监控方法的多次调用，此监控器只返回第一个。
            </summary>
            <param name="t"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Aop.AopContext.GetAopAssembly">
            <summary>
            获取所有代理类所在的程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Aop.AopContext.CreateObjectBySub``1">
            <summary>
            根据类型创建对象。如果被拦截，则创建代理类。否则返回自身的实例
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:wojilu.Aop.AopContext.CreateObjectBySub(System.Type)">
            <summary>
            根据类型创建对象。如果被拦截，则创建代理类。否则返回自身的实例
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Aop.AopContext.CreateObjectByInterface``1(System.Type)">
            <summary>
            根据接口创建对象。如果被拦截，则创建代理类。否则返回自身的实例
            </summary>
            <typeparam name="T">接口类型</typeparam>
            <param name="targetType">需要代理的类型</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Aop.AopContext.CreateObjectByInterface(System.Type,System.Type)">
            <summary>
            根据接口创建对象。如果被拦截，则创建代理类。否则返回自身的实例
            </summary>
            <param name="targetType">需要代理的类型</param>
            <param name="interfaceType">接口类型</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Aop.AopContext.CreateProxyBySub``1">
            <summary>
            根据类型创建它的代理类。如果代理不存在，返回 null。
            如果方法非虚，不可以创建，那么抛出异常。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:wojilu.Aop.AopContext.CreateProxyBySub(System.Type)">
            <summary>
            根据类型创建它的代理类。如果代理不存在，返回 null。
            如果方法非虚，不可以创建，那么抛出异常。
            </summary>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Aop.AopContext.CreateProxyByInterface``1(System.Type)">
            <summary>
            根据接口创建代理类。如果不能创建，则返回null
            </summary>
            <typeparam name="T">接口的类型</typeparam>
            <param name="targetType">被代理的类型</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Aop.AopContext.CreateProxyByInterface(System.Type,System.Type)">
            <summary>
            根据接口创建代理类。如果不能创建，则返回null
            </summary>
            <param name="objTarget"></param>
            <param name="interfaceType"></param>
            <returns></returns>
        </member>
        <member name="T:wojilu.Aop.ObservedMethod">
            <summary>
            被监控的方法
            </summary>
        </member>
        <member name="F:wojilu.Aop.ObservedMethod.Method">
            <summary>
            方法
            </summary>
        </member>
        <member name="F:wojilu.Aop.ObservedMethod.Observer">
            <summary>
            针对此方法的所有监控器
            </summary>
        </member>
        <member name="T:wojilu.Aop.ObservedType">
            <summary>
            被监控的类型
            </summary>
        </member>
        <member name="F:wojilu.Aop.ObservedType.Type">
            <summary>
            被监控的 Type
            </summary>
        </member>
        <member name="F:wojilu.Aop.ObservedType.MethodList">
            <summary>
            被监控的方法列表
            </summary>
        </member>
        <member name="M:wojilu.Aop.ObservedType.CanCreateSubProxy">
            <summary>
            是否可以创建子代理
            </summary>
        </member>
        <member name="M:wojilu.Aop.ObservedType.CanCreateInterfaceProxy(System.Type)">
            <summary>
            是否可以根据接口创建代理类
            </summary>
            <param name="interfaceType"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Aop.ObservedType.GetInterfaceType">
            <summary>
            被监控的所有方法隶属的接口
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Drawing.ThumbConfig.GetAvatarConfig">
            <summary>
            头像缩略图的配置。默认值 s=width:48|height:48|mode:cut, m=width:100|height:100|mode:cut, b=width:200|height:200|mode:cut
            <para>mode含义依次是：auto(自动)，cut(裁切)，x(根据宽度)，y(根据高度)，xy(根据宽高)</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Drawing.ThumbConfig.GetPhotoConfig">
            <summary>
            上传图片的缩略图配置信息。默认值 s=width:170|height:170|mode:cut, m=width:600|height:600|mode:auto, b=width:1024|height:1024|mode:auto
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Drawing.ThumbConfig.ReadString(System.String)">
            <summary>
            从配置字符串中获取缩略图的配置信息。
            </summary>
            <example>
            <code>s=width:75|height:75|mode:auto, sx=width:200|height:200|mode:auto, m=width:600|height:600|mode:auto, b=width:1024|height:1024|mode:auto</code>
            </example>
            <param name="cfgString"></param>
            <returns></returns>
        </member>
        <member name="T:wojilu.Net.MailService">
            <summary>
            邮件发送服务(如果因为网络不通等原因发送失败，则会自动记录日志)
            </summary>
            <example>
            使用说明
            <code>
            MailService mail = new MailService( "smtp.gmail.com", "aaa@gmail.com", "123456" );
            mail.setSender( "岳不群" ); // 此行(即发送人)可省略
            mail.send( "aaa@126.com", "岳老二的邮件标题", "此处内容，此处<strong style='color:red;font-size:36px;'>html部分</strong>"
            </code>
            </example>
        </member>
        <member name="M:wojilu.Net.MailService.#ctor(System.String,System.String,System.String)">
            <summary>
            创建一个发送对象
            </summary>
            <param name="smtpUrl">smtp 地址</param>
            <param name="user">登录名</param>
            <param name="pwd">密码</param>
        </member>
        <member name="M:wojilu.Net.MailService.enableSsl(System.Boolean)">
            <summary>
            是否启用 ssl 链接(默认是启用的)
            </summary>
            <param name="isSsl"></param>
        </member>
        <member name="M:wojilu.Net.MailService.isBodyHtml(System.Boolean)">
            <summary>
            默认启用 html
            </summary>
            <param name="isHtml"></param>
        </member>
        <member name="M:wojilu.Net.MailService.priorityHight">
            <summary>
            设置高优先级
            </summary>
        </member>
        <member name="M:wojilu.Net.MailService.priorityLow">
            <summary>
            设置低优先级
            </summary>
        </member>
        <member name="M:wojilu.Net.MailService.priorityNormal">
            <summary>
            设置普通优先级
            </summary>
        </member>
        <member name="M:wojilu.Net.MailService.setSender(System.String)">
            <summary>
            设置发送者名称
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:wojilu.Net.MailService.successCallback(wojilu.Net.ISuccessCallback)">
            <summary>
            设置发送成功之后执行的方法
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:wojilu.Net.MailService.send(System.String,System.String,System.String)">
            <summary>
            发送方法
            </summary>
            <param name="to">接收方的email</param>
            <param name="title">邮件标题</param>
            <param name="htmlBody">邮件内容</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:wojilu.Common.IBinderValue">
            <summary>
            通用绑定对象接口
            </summary>
        </member>
        <member name="T:wojilu.Common.ItemValue">
            <summary>
            通用绑定对象
            </summary>
        </member>
        <member name="T:wojilu.Common.Onlines.OnlineService">
            <summary>
            提供在线状态的各类数据
            </summary>
        </member>
        <member name="M:wojilu.Common.Onlines.OnlineService.GetRecent(System.Int32)">
            <summary>
            最新登录用户
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Common.Onlines.OnlineService.GetRecentAll(System.Int32)">
            <summary>
            最新所有用户
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:wojilu.Common.Onlines.OnlineStats">
            <summary>
            在线状态数据
            </summary>
        </member>
        <member name="T:wojilu.Common.Onlines.OnlineManager">
            <summary>
            在线管理器
            </summary>
        </member>
        <member name="T:wojilu.Aop.MethodObserver">
            <summary>
            监控器基类。所有 Aop 监控器，都要继承自本基类。
            </summary>
        </member>
        <member name="M:wojilu.Aop.MethodObserver.Before(System.Reflection.MethodInfo,System.Object[],System.Object)">
            <summary>
            运行之前的拦截处理
            </summary>
            <param name="method">被运行的方法</param>
            <param name="args">方法的参数</param>
            <param name="target">运行的对象</param>
        </member>
        <member name="M:wojilu.Aop.MethodObserver.After(System.Object,System.Reflection.MethodInfo,System.Object[],System.Object)">
            <summary>
            运行之后的拦截处理
            </summary>
            <param name="returnValue">方法运行的结果</param>
            <param name="method">被运行的方法</param>
            <param name="args">方法的参数</param>
            <param name="target">被拦截的对象</param>
        </member>
        <member name="M:wojilu.Aop.MethodObserver.Invoke(wojilu.Aop.IMethodInvocation)">
            <summary>
            将代码和被拦截对象的方法混合一起，并直接运行
            </summary>
            <param name="invocation"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Aop.MethodObserver.ObserveMethods">
            <summary>
            设置需要监控的method。在method运行之前和之后，BeforeMethod和AfterMethod会被执行。
            </summary>
        </member>
        <member name="M:wojilu.Aop.MethodObserver.observe(System.Type,System.String)">
            <summary>
            监控其他 method
            </summary>
            <param name="type">类型</param>
            <param name="name">方法名称</param>
        </member>
        <member name="M:wojilu.Aop.MethodObserver.observe(System.Type,System.String,System.Type[])">
            <summary>
            监控其他 method
            </summary>
            <param name="t">类型</param>
            <param name="methodName">方法名称</param>
            <param name="args">参数类型</param>
        </member>
        <member name="M:wojilu.Aop.MethodObserver.observe(System.String,System.String)">
            <summary>
            监控其他 method
            </summary>
            <param name="typeFullName">类型的完整名称</param>
            <param name="methodName">方法名称</param>
        </member>
        <member name="M:wojilu.Aop.MethodObserver.observe(System.String,System.String,System.Type[])">
            <summary>
            监控其他 method
            </summary>
            <param name="typeFullName">类型的完整名称</param>
            <param name="methodName">方法名称</param>
            <param name="args">参数类型</param>
        </member>
        <member name="M:wojilu.Net.HttpClient.Init(System.String,System.String)">
            <summary>
            创建一个 Rest 类型的调用客户端
            </summary>
            <param name="apiUrl">需要调用的 api 的网址</param>
            <param name="httpMethod">方法类型</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Net.HttpClient.SetUrl(System.String)">
            <summary>
            需要调用的 api 的网址
            </summary>
            <param name="apiUrl"></param>
        </member>
        <member name="M:wojilu.Net.HttpClient.SetMethod(System.String)">
            <summary>
            调用的方法类型，比如 GET/POST 等
            </summary>
            <param name="httpMethod"></param>
        </member>
        <member name="M:wojilu.Net.HttpClient.SetUserAgent(System.String)">
            <summary>
            设置客户端信息
            </summary>
            <param name="userAgent"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Net.HttpClient.SetEncoding(System.String)">
            <summary>
            设置 Encoding
            </summary>
            <param name="strEncoding"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Net.HttpClient.AddParam(System.String,System.Object)">
            <summary>
            添加调用的参数
            </summary>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:wojilu.Net.HttpClient.AddParam(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            添加调用的参数
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:wojilu.Net.HttpClient.AddHeader(System.String,System.Object)">
            <summary>
            添加 header 参数
            </summary>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:wojilu.Net.HttpClient.AddHeader(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            添加 header 参数
            </summary>
            <param name="headers"></param>
        </member>
        <member name="M:wojilu.Net.HttpClient.AddQuery(System.String,System.Object)">
            <summary>
            添加 url 后面的查询字符串
            </summary>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:wojilu.Net.HttpClient.AddQuery(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            添加 url 后面的查询字符串
            </summary>
            <param name="queryItems"></param>
        </member>
        <member name="M:wojilu.Net.HttpClient.AddObject(System.Object)">
            <summary>
            将对象的属性和字段的值加入参数(param)中
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Net.HttpClient.AddObject(System.Object,System.String)">
            <summary>
            将对象的属性和字段的值加入参数(param)中
            </summary>
            <param name="obj"></param>
            <param name="prefix">参数的前缀</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Net.HttpClient.AddFile(System.String)">
            <summary>
            添加需要上传的文件
            </summary>
            <param name="absFilePath">文件在磁盘上的绝对路径</param>
        </member>
        <member name="M:wojilu.Net.HttpClient.Run">
            <summary>
            调用远程 api，返回原始字符串(没有解析过)
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Net.HttpClient.RunJson">
            <summary>
            调用远程 api, 返回已经解析过的 JsonObject
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Net.HttpClient.Run``1">
            <summary>
            调用远程 api, 返回结果已经解析成强类型对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:wojilu.Net.HttpClient.RunList``1">
            <summary>
            调用远程 api, 返回结果已经解析成强类型对象的List
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:wojilu.Net.HttpClient.GetResponse">
            <summary>
            在调用远程api之后(Run之后)，返回字符串结果。本方法不会再次执行远程调用。
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Net.HttpClient.GetRequestUrl">
            <summary>
            获取远程 api 的网址，已经将参数和查询字符串都拼接上去。
            </summary>
        </member>
        <member name="P:wojilu.Net.HttpClientException.ErrorInfo">
            <summary>
            服务端返回的错误信息
            </summary>
        </member>
        <member name="P:wojilu.OAuth.AccessToken.Uid">
            <summary>
            用户在第三方平台的唯一ID标识
            </summary>
        </member>
        <member name="P:wojilu.OAuth.AccessToken.Name">
            <summary>
            用户在第三方平台的名称
            </summary>
        </member>
        <member name="P:wojilu.OAuth.AccessToken.Token">
            <summary>
            access token
            </summary>
        </member>
        <member name="T:wojilu.View.v">
            <summary>
            模板视图的核心方法
            </summary>
        </member>
        <member name="M:wojilu.View.v.data(System.String)">
            <summary>
            获取视图对象
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.View.v.end">
            <summary>
            在当前模板中，显示到当前代码处为止；当前模板的剩余部分不再显示
            </summary>
        </member>
        <member name="M:wojilu.View.v.load(wojilu.aAction)">
            <summary>
            加载其他 action 内容，到当前html代码处
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:wojilu.View.v.load(wojilu.aActionWithId,System.Int32)">
            <summary>
            加载其他 action 内容，到当前html代码处
            </summary>
            <param name="action"></param>
            <param name="id"></param>
        </member>
        <member name="M:wojilu.View.v.load(System.String,System.String)">
            <summary>
            加载其他 action 内容，到当前html代码处
            </summary>
            <param name="controller"></param>
            <param name="action"></param>
        </member>
        <member name="M:wojilu.View.v.load(System.String,System.String,System.Int32)">
            <summary>
            加载其他 action 内容，到当前html代码处
            </summary>
            <param name="controller"></param>
            <param name="action"></param>
            <param name="id"></param>
        </member>
        <member name="T:wojilu.View.path">
            <summary>
            常用数据的路径信息
            </summary>
        </member>
        <member name="M:wojilu.View.path.pic(System.String,System.String)">
            <summary>
            获取上传图片的缩略图。缩略图类型参看 site.config 中的 PhotoThumb 配置项
            </summary>
            <param name="picPath"></param>
            <param name="thumbType">缩略图类型参看 site.config 中的 PhotoThumb 配置项</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.View.path.face(System.String,System.String)">
            <summary>
            获取上传头像的缩略图。缩略图类型参看 site.config 中的 AvatarThumb 配置项
            </summary>
            <param name="facePath"></param>
            <param name="thumbType">缩略图类型参看 site.config 中的 AvatarThumb 配置项</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.View.path.map(System.String)">
            <summary>
            获取文件在服务器上的绝对路径
            </summary>
            <param name="relativePath"></param>
            <returns></returns>
        </member>
        <member name="T:wojilu.View.page">
            <summary>
            对整体页面的操作
            </summary>
        </member>
        <member name="M:wojilu.View.page.go(System.String)">
            <summary>
            页面跳转
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:wojilu.View.page.header(System.String,System.String)">
            <summary>
            添加页面的 header 值
            </summary>
            <param name="headerName"></param>
            <param name="headerValue"></param>
        </member>
        <member name="M:wojilu.View.page.status(System.String)">
            <summary>
            设置页面的 status ，比如 "404 Not Found"
            </summary>
            <param name="statusStr"></param>
        </member>
        <member name="M:wojilu.View.page.title(System.String)">
            <summary>
            设置页面的 title。在其他Layout中，通过 #{pageTitle} 获取
            </summary>
            <param name="titleMsg"></param>
        </member>
        <member name="M:wojilu.View.page.description(System.String)">
            <summary>
            设置页面的 description。在其他Layout中，通过 #{pageDescription} 获取
            </summary>
            <param name="descriptionMsg"></param>
        </member>
        <member name="M:wojilu.View.page.keywords(System.String)">
            <summary>
            设置页面的 keywords。在其他Layout中，通过 #{pageKeywords} 获取
            </summary>
            <param name="keywordsMsg"></param>
        </member>
        <member name="M:wojilu.View.page.exit(System.String)">
            <summary>
            整个页面退出，只显示当前 msg 信息(根据 msg 提示模板显示)
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:wojilu.View.page.exitText(System.String)">
            <summary>
            整个页面退出，只显示纯文本提示
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:wojilu.View.page.json(System.Object)">
            <summary>
            不再显示html内容，整个页面只显示当前的 json 字符串
            </summary>
            <param name="jsonStr"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.MvcViews.getTemplateByAction(System.String)">
            <summary>
            根据 action 名称获取模板对象
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.MvcViews.getTemplateByFileName(System.String)">
            <summary>
            根据文件名称获取模板对象，文件名必须从视图 view 的根目录算起
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerViewsPath.getTemplatePathByAction(System.String,System.String)">
            <summary>
            获取某 action 的模板文件的绝对路径(包括模板的后缀名)
            </summary>
            <param name="action"></param>
            <param name="viewsDir"></param>
            <returns></returns>
        </member>
        <member name="T:wojilu.ViewData">
            <summary>
            视图对象集合
            </summary>
        </member>
        <member name="M:wojilu.ViewData.get(System.String)">
            <summary>
            根据变量名称，获取值
            </summary>
            <param name="varName"></param>
            <returns></returns>
        </member>
        <member name="T:wojilu.Web.Mvc.ActionCache">
            <summary>
            action 缓存基类，包括缓存key，更新操作等
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.ActionObserver">
            <summary>
            action 监控器：监控action，并提供action前置和后置事件
            </summary>
        </member>
        <member name="M:wojilu.Web.Mvc.ActionObserver.GetRelatedActions">
            <summary>
            被监控的关联 action
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.ActionObserver.BeforeAction(wojilu.Web.Context.MvcContext)">
            <summary>
            action 前置动作
            </summary>
            <param name="ctx"></param>
            <returns>是否继续执行当前action(ctx.route.action)，默认是 true 继续执行</returns>
        </member>
        <member name="M:wojilu.Web.Mvc.ActionObserver.AfterAction(wojilu.Web.Context.MvcContext)">
            <summary>
            action 后置动作
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ActionObserver.ObserveActions">
            <summary>
            设置需要观察/监控的action。一旦被监控的action运行之后，则自动触发UpdateCache方法，以及时刷新缓存。
            </summary>
        </member>
        <member name="M:wojilu.Web.Mvc.ActionObserver.observe(wojilu.aAction)">
            <summary>
            监控其他 action
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ActionObserver.observe(wojilu.aActionWithId)">
            <summary>
            监控其他 action
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ActionObserver.observe(System.Type,System.String)">
            <summary>
            监控其他 action
            </summary>
            <param name="t"></param>
            <param name="actions"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ActionCache.GetCacheKey(wojilu.Web.Context.MvcContext,System.String)">
            <summary>
            设置被缓存的 action 的缓存 key。如果返回 null ，则不会被缓存。
            </summary>
            <param name="ctx"></param>
            <param name="actionName"></param>
            <returns></returns>
        </member>
        <member name="T:wojilu.Json">
            <summary>
            提供 json 序列化和反序列化的功能
            </summary>
        </member>
        <member name="M:wojilu.Json.ToString(System.Object)">
            <summary>
            将对象转换成 json 字符串
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Json.ToString(System.Object,System.Boolean)">
            <summary>
            将对象转换成 json 字符串
            </summary>
            <param name="obj"></param>
            <param name="isBreakline">是否换行(默认不换行，阅读起来更加清晰)</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Json.ToStringList(System.Collections.IList)">
            <summary>
            将简单对象列表转换成 json 字符串，用于存储。对象之间换行，对象内部不换行。
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Json.Deserialize``1(System.String)">
            <summary>
            解析字符串，返回强类型的对象。如果要返回List列表，请使用 DeserializeList 方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Json.DeserializeObject(System.String,System.Type)">
            <summary>
            将 json 字符串反序列化为对象
            </summary>
            <param name="jsonString">json 字符串</param>
            <param name="t">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Json.DeserializeList``1(System.String)">
            <summary>
            将 json 字符串反序列化为对象列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Json.DeserializeAnonymous(System.String,System.Object)">
            <summary>
            将 json 字符串反序列化为匿名对象
            </summary>
            <param name="jsonString"></param>
            <param name="objDefinition">一个object，可以定义或代表匿名对象</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Json.DeserializeAnonymous(System.String,System.Type)">
            <summary>
            将 json 字符串反序列化为匿名对象
            </summary>
            <param name="jsonString"></param>
            <param name="t">匿名对象的类型</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Json.Parse(System.String)">
            <summary>
            解析字符串，返回原始的 json 类型对象。
            根据 json 的不同，可能返回整数(int)、布尔类型(bool)、字符串(string)、一般Json对象(JsonObject)、数组(List&lt;object&gt;)等不同类型
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Json.ParseJson(System.String)">
            <summary>
            将 json 字符串反序列化为原始的 JsonObject 类型
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Json.ParseList(System.String)">
            <summary>
            将 json 字符串解析为 json 原始数据类型的列表，比如 ["abc", 88, {name:"aa", gender:"male"}]
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Json.ParseList``1(System.String)">
            <summary>
            将 json 字符串反序列化为 原始的json强类型(int,string,JsonObject等) 的数据列表。
            当列表内数据类型相同时使用，比如 ["abc", "www", "qqqxyz", "uuu"]
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="T:wojilu.JsonObject">
            <summary>
            封装了 json 对象信息
            </summary>
        </member>
        <member name="M:wojilu.JsonObject.Get(System.String)">
            <summary>
            获取(字符串类型)属性的值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.JsonObject.Get``1(System.String)">
            <summary>
            获取属性的值，返回强类型。支持 int, string, bool, long, decimal, double, DateTime, JsonObject, List&lt;Object&gt; 一共9种类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.JsonObject.GetJson(System.String)">
            <summary>
            获取属性的值，返回 Json 对象类型
            </summary>
            <param name="key">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.JsonObject.GetList(System.String)">
            <summary>
            获取属性的值，返回数据列表
            </summary>
            <param name="key">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.JsonObject.GetList``1(System.String)">
            <summary>
            获取属性的值，返回 强类型 的数据列表(当列表内数据类型相同时使用)
            </summary>
            <param name="key">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.JsonObject.GetValue(System.String)">
            <summary>
            获取属性的值，可能是string,int等各种类型，需要自己转换
            </summary>
            <param name="key">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.JsonObject.GetValue(System.String,System.Type)">
            <summary>
            获取属性的值，返回强类型。支持 int, string, bool, long, decimal, double, DateTime, JsonObject, List&lt;Object&gt; 一共9种类型
            </summary>
            <param name="key"></param>
            <param name="retType"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.JsonObject.getLong(System.String)">
            <summary>
            获取属性的值，返回 long
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.JsonObject.getTime(System.String)">
            <summary>
            获取属性的值，返回时间类型
            </summary>
            <param name="key">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.JsonObject.getDouble(System.String)">
            <summary>
            获取属性的值，返回 Double 类型
            </summary>
            <param name="key">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.JsonObject.getDecimal(System.String)">
            <summary>
            获取属性的值，返回 Decimal 类型
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:wojilu.Data.IdType">
            <summary>
            实体键值类型
            </summary>
        </member>
        <member name="F:wojilu.Data.IdType.Auto">
            <summary>
            自动（默认类型）
            </summary>
        </member>
        <member name="F:wojilu.Data.IdType.Int">
            <summary>
            整型
            </summary>
        </member>
        <member name="F:wojilu.Data.IdType.Long">
            <summary>
            长整型
            </summary>
        </member>
        <member name="F:wojilu.Data.IdType.Guid">
            <summary>
            Globally Unique Identifier（全球唯一标识符） 也称作 UUID(Universally Unique IDentifier) 。
            </summary>
        </member>
        <member name="F:wojilu.Data.IdType.String">
            <summary>
            字符型
            </summary>
        </member>
        <member name="T:wojilu.Net.Video.IFengNewsSpider">
            <summary>
            凤凰视频
            </summary>
        </member>
        <member name="T:wojilu.Net.Video.IVideoSpider">
            <summary>
            视频信息抓取器
            </summary>
        </member>
        <member name="M:wojilu.Net.Video.IVideoSpider.GetInfo(System.String)">
            <summary>
            抓取视频信息
            </summary>
            <param name="playUrl">视频播放页面的网址</param>
            <returns>视频信息</returns>
        </member>
        <member name="T:wojilu.Net.Video.IFendVideoSpider">
            <summary>
            凤凰视频
            </summary>
        </member>
        <member name="T:wojilu.Net.Video.SinaSpider">
            <summary>
            新浪播客
            </summary>
        </member>
        <member name="T:wojilu.Web.Mock.IMockContext">
            <summary>
            模拟的 context，一个标记接口
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.Attr.DataAttribute">
            <summary>
            检查当前数据是否存在 
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.Interface.IActionFilter">
            <summary>
            action 过滤器接口
            </summary>
        </member>
        <member name="P:wojilu.Web.Mvc.Interface.IActionFilter.Order">
            <summary>
            过滤器的顺序，从小到大排列
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.Attr.MvcLinkAttribute">
            <summary>
            用于标注链接生成对象，提供开发查找的方便，对实际运行暂时没有意义。
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.IPageCache">
            <summary>
            页面缓存的接口
            </summary>
        </member>
        <member name="M:wojilu.Web.Mvc.IPageCache.IsCache(wojilu.Web.Context.MvcContext)">
            <summary>
            是否缓存。页面可能运行在不同环境下(比如不同的owner)，本方法决定哪些环境需要缓存，哪些不需要缓存。
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.IPageCache.GetRelatedActions">
            <summary>
            获取所有相关的布局页面缓存。主要供框架调用
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.IPageCache.UpdateCache(wojilu.Web.Context.MvcContext)">
            <summary>
            一旦其他局部页面的缓存发生变化，则 UpdateCache 方法被执行。本方法让缓存及时更新或失效
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.IPageCache.AfterCachePage(wojilu.Web.Context.MvcContext)">
            <summary>
            网页内容被添加进缓存之后的后续动作
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="T:wojilu.Members.MemberHelper">
            <summary>
            继承自IMember对象的帮助方法，用于logo的保存，缩略图路径、皮肤路径等的获取
            </summary>
        </member>
        <member name="P:wojilu.Members.MemberHelper.LogoWidth">
            <summary>
            logo的宽度，默认是120px
            </summary>
        </member>
        <member name="P:wojilu.Members.MemberHelper.LogoHeight">
            <summary>
            logo的高度，默认是120px
            </summary>
        </member>
        <member name="P:wojilu.Members.MemberHelper.PicExt">
            <summary>
            logo图片的后缀名，包括点号，默认是.jpg
            </summary>
        </member>
        <member name="T:wojilu.Net.IpUtil">
            <summary>
            与 ip 地址相关的工具类
            </summary>
        </member>
        <member name="M:wojilu.Net.IpUtil.IsAllowedIp(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            判断 ip 地址是否在允许的范围内
            </summary>
            <param name="ip">需要判断的ip地址</param>
            <param name="list">禁止访问的ip规则</param>
            <returns></returns>
            <example>
            使用说明。ip规则分4种：1)直接指出ip地址; 2)使用通配符; 3)用横杠指定范围; 4)用unknow禁止非法的ip地址
            <code>
            List&lt;String&gt; list = new List&lt;String&gt;();
            
            list.Add( "88.88.99.99" );
            list.Add( "66.66.66.*" );
            list.Add( "55.55.*.*" );
            list.Add( "44.*.*.*" );
            list.Add( "192.168.3.2-192.168.3.250" );
            list.Add( "33.168.10.*-33.168.90.*" );
            list.Add( "unknow" );
            
            Assert.IsFalse( IpUtil.IsAllowedIp( "88.88.99.99", list ) );
            Assert.IsTrue( IpUtil.IsAllowedIp( "88.88.99.100", list ) );
            
            Assert.IsFalse( IpUtil.IsAllowedIp( "192.168.3.2", list ) );
            Assert.IsFalse( IpUtil.IsAllowedIp( "192.168.3.250", list ) );
            Assert.IsTrue( IpUtil.IsAllowedIp( "192.168.3.1", list ) );
            Assert.IsTrue( IpUtil.IsAllowedIp( "192.168.3.251", list ) );
            
            Assert.IsFalse( IpUtil.IsAllowedIp( "66.66.66.1", list ) );
            Assert.IsFalse( IpUtil.IsAllowedIp( "66.66.66.2", list ) );
            Assert.IsFalse( IpUtil.IsAllowedIp( "66.66.66.254", list ) );
            Assert.IsFalse( IpUtil.IsAllowedIp( "66.66.66.255", list ) );
            
            Assert.IsFalse( IpUtil.IsAllowedIp( "55.55.33.33", list ) );
            Assert.IsFalse( IpUtil.IsAllowedIp( "55.55.99.99", list ) );
            Assert.IsTrue( IpUtil.IsAllowedIp( "55.56.33.33", list ) );
            
            Assert.IsFalse( IpUtil.IsAllowedIp( "44.55.33.33", list ) );
            Assert.IsFalse( IpUtil.IsAllowedIp( "44.99.33.33", list ) );
            Assert.IsTrue( IpUtil.IsAllowedIp( "45.99.33.33", list ) );
            
            Assert.IsFalse( IpUtil.IsAllowedIp( "33.168.10.1", list ) );
            Assert.IsFalse( IpUtil.IsAllowedIp( "33.168.10.2", list ) );
            Assert.IsFalse( IpUtil.IsAllowedIp( "33.168.10.255", list ) );
            Assert.IsFalse( IpUtil.IsAllowedIp( "33.168.90.1", list ) );
            Assert.IsFalse( IpUtil.IsAllowedIp( "33.168.90.2", list ) );
            Assert.IsFalse( IpUtil.IsAllowedIp( "33.168.90.255", list ) );
            
            Assert.IsFalse( IpUtil.IsAllowedIp( "", list ) );
            Assert.IsFalse( IpUtil.IsAllowedIp( "unknow", list ) );
            Assert.IsFalse( IpUtil.IsAllowedIp( "abc", list ) );
            Assert.IsFalse( IpUtil.IsAllowedIp( "-", list ) );
            
            Assert.IsTrue( IpUtil.IsAllowedIp( "68.81.101.87", list ) );
            Assert.IsTrue( IpUtil.IsAllowedIp( "71.85.125.152", list ) );
            Assert.IsTrue( IpUtil.IsAllowedIp( "85.114.137.152", list ) );
            </code>
            </example>
        </member>
        <member name="M:wojilu.Net.IpUtil.IsAllowedIp(System.String,System.String[])">
            <summary>
            判断 ip 地址是否在允许的范围内
            </summary>
            <param name="ip">需要判断的ip地址</param>
            <param name="settings">禁止访问的ip规则</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Net.IpUtil.GetIpWild(System.String,System.Int32)">
            <summary>
            将 ip 转化为通配符形式，隐藏后几位信息
            </summary>
            <param name="ip"></param>
            <param name="trimEnd">需要隐藏的位数，从末尾往前倒数</param>
            <returns></returns>
        </member>
        <member name="T:wojilu.Net.Video.Ku6Spider">
            <summary>
            酷六网视频抓取器
            </summary>
        </member>
        <member name="T:wojilu.Net.Video.NullSpider">
            <summary>
            未实现的视频抓取器
            </summary>
        </member>
        <member name="T:wojilu.Net.Video.TudouSpider">
            <summary>
            土豆网视频抓取器
            </summary>
        </member>
        <member name="T:wojilu.Net.Video.VideoInfo">
            <summary>
            视频信息
            </summary>
        </member>
        <member name="P:wojilu.Net.Video.VideoInfo.PlayUrl">
            <summary>
            视频播放页面的网址
            </summary>
        </member>
        <member name="P:wojilu.Net.Video.VideoInfo.FlashUrl">
            <summary>
            视频flash本身的网址
            </summary>
        </member>
        <member name="P:wojilu.Net.Video.VideoInfo.PicUrl">
            <summary>
            视频截图的网址
            </summary>
        </member>
        <member name="P:wojilu.Net.Video.VideoInfo.FlashId">
            <summary>
            视频的ID
            </summary>
        </member>
        <member name="T:wojilu.Net.Video.WojiluVideoSpider">
            <summary>
            默认视频抓取器，可根据播放页网址，自动返回相应网站的视频信息
            </summary>
        </member>
        <member name="T:wojilu.Net.Video.WuliuSpider">
            <summary>
            56.com 视频抓取器
            </summary>
        </member>
        <member name="T:wojilu.Net.Video.YoukuSpider">
            <summary>
            优酷网视频抓取器
            </summary>
        </member>
        <member name="T:wojilu.ORM.DecimalAttribute">
            <summary>
            用于自定义精度数据，也可以存储自定义精度的货币数值。
            </summary>
        </member>
        <member name="P:wojilu.ORM.DecimalAttribute.Precision">
            <summary>
            数值的精度，即小数点左右的总共位数，但不包括小数点。
            </summary>
        </member>
        <member name="P:wojilu.ORM.DecimalAttribute.Scale">
            <summary>
            小数点右侧的位数
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.ControllerMeta">
            <summary>
            缓存 controller 元数据信息
            </summary>
        </member>
        <member name="M:wojilu.Web.Mvc.LinkHelper.GetMemberPathPrefix(wojilu.Members.Interface.IMember)">
            <summary>
            获取成员根路径，比如 /space/zhangsan, /group/moon 等；如果是二级域名，返回 http://zhangsan.abc.com
            </summary>
        </member>
        <member name="M:wojilu.Web.Mvc.LinkHelper.GetMemberPathPrefix(System.String,System.String)">
            <summary>
            获取成员根路径，比如 /space/zhangsan, /group/moon 等；如果是二级域名，返回 http://zhangsan.abc.com
            </summary>
        </member>
        <member name="M:wojilu.Web.Mvc.LinkHelper.IsMemberSubdomain(System.String)">
            <summary>
            某member是否被配置为二级域名
            </summary>
            <param name="memberType"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.PageCache.IsCache(wojilu.Web.Context.MvcContext)">
            <summary>
            是否缓存。页面可能运行在不同环境下(比如不同的owner)，本方法决定哪些环境需要缓存，哪些不需要缓存。
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.PageCache.GetRelatedActions">
            <summary>
            获取所有相关的布局页面缓存。主要供框架调用
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.PageCache.ObserveActionCaches">
            <summary>
            请在此方法中使用 observe 监控其他局部页面的 ActionCache
            </summary>
        </member>
        <member name="M:wojilu.Web.Mvc.PageCache.observe(System.Type)">
            <summary>
            一个页面由若干局部页面组成，本方法监控这些局部页面的cache
            </summary>
            <param name="t">被监控的 ActionCache 的 Type</param>
        </member>
        <member name="M:wojilu.Web.Mvc.PageCache.UpdateCache(wojilu.Web.Context.MvcContext)">
            <summary>
            一旦其他局部页面的缓存发生变化，则 UpdateCache 方法被执行。本方法让缓存及时更新或失效
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.PageCache.AfterCachePage(wojilu.Web.Context.MvcContext)">
            <summary>
            网页内容被添加进缓存之后的后续动作
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="T:wojilu.Web.Mvc.Utils.ControllerRunner">
            <summary>
            运行某个 controller 的 action，并返回 html 结果
            </summary>
        </member>
        <member name="M:wojilu.Web.Mvc.Utils.ControllerRunner.Run(wojilu.Web.Mvc.ControllerBase,wojilu.aAction)">
            <summary>
            运行某 action
            </summary>
            <param name="ctx"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.Utils.ControllerRunner.Run(wojilu.Web.Mvc.ControllerBase,wojilu.aActionWithId,System.Int64)">
            <summary>
            运行某 action
            </summary>
            <param name="thisController"></param>
            <param name="action"></param>
            <param name="id"></param>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.Utils.ControllerRunner.Run(wojilu.Web.Context.MvcContext,System.String,System.String)">
            <summary>
            运行某action，id由ctx.route.id自动注入。
            如果action有参数，请预先设置 ctx.route.id；
            如果方法中涉及到owner，请预先设置 ctx.owner；
            controller是经过依赖注入处理的。
            注意1：未处理action过滤器批注。
            注意2：因为通过controller的字符串运行，所以经过反射调用。
            </summary>
            <param name="ctx">提供 ctx.route.id 和 ctx.owner 等可能需要的参数</param>
            <param name="controllerFullName">控制器的完整类型type的full name</param>
            <param name="actionName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.Utils.ControllerRunner.Run(wojilu.Web.Context.MvcContext,System.String,System.String,System.Object[])">
            <summary>
            运行某action
            </summary>
            <param name="ctx"></param>
            <param name="controllerName"></param>
            <param name="actionName"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.Utils.ControllerRunner.runAction(wojilu.Web.Mvc.ControllerBase,System.String)">
            <summary>
            运行某个controller的action方法，ctx已经注入controller
            </summary>
            <param name="controller"></param>
            <param name="actionName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.Utils.ControllerRunner.getMethod(wojilu.Web.Mvc.ControllerBase,System.String)">
            <summary>
            根据名称获取某 action 的方法信息
            </summary>
            <param name="actionName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.Utils.ControllerRunner.getParameters(System.Reflection.MethodInfo)">
            <summary>
            获取某方法的所有参数信息
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.Utils.ControllerRunner.RunLayout(wojilu.Web.Context.MvcContext)">
            <summary>
            运行某 controller 的 Layout 方法，controller 已经注入 ctx 中
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="T:wojilu.Web.Mvc.Link">
            <summary>
            通用链接生成工具
            </summary>
        </member>
        <member name="M:wojilu.Web.Mvc.Link.ToMember(wojilu.Members.Interface.IMember)">
            <summary>
            获取某个 member 的网址
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.Link.ToMember(System.String,System.String)">
            <summary>
            获取某个 member 的网址
            </summary>
            <param name="memberType">member 的类型完整名</param>
            <param name="memberUrl">member 的个性网址</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.Link.ToUser(System.String)">
            <summary>
            获取某个注册用户的网址
            </summary>
            <param name="friendUrl">用户的个性网址</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Utils.WebHelper.GetFlash(System.String,System.Object,System.Object)">
            <summary>
            获取 flash 的 html 嵌入代码。TODO http://code.google.com/p/swfobject/wiki/documentation 
            </summary>
            <param name="srcUrl">flash 的网址</param>
            <param name="width">flash 的宽度，整数值</param>
            <param name="height">flash 的高度，整数值</param>
            <returns>返回嵌入 flash 的 html 代码</returns>
        </member>
        <member name="M:wojilu.Web.Utils.WebHelper.GetEmotions">
            <summary>
            得到表情名称和图片网址的键值对 name=>picPath
            </summary>
            <returns></returns>
        </member>
        <member name="T:wojilu.IDto">
            <summary>
            DTO(Data Transfer Object) 的接口
            </summary>
        </member>
        <member name="M:wojilu.IDto.Init(wojilu.IEntity)">
            <summary>
            将实体类赋值给DTO对象
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:wojilu.IDto.GetEntity">
            <summary>
            从DTO中获取实体类
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.IDto.New">
            <summary>
            创建一个新对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:wojilu.sys">
            <summary>
            系统常用对象的快捷方式，比如 SysPath(系统路径)
            </summary>
        </member>
        <member name="P:wojilu.sys.Path">
            <summary>
            系统路径
            </summary>
        </member>
        <member name="P:wojilu.sys.Clear">
            <summary>
            清理缓存，重新加载配置文件
            </summary>
        </member>
        <member name="P:wojilu.sys.Url">
            <summary>
            网址信息，包括网站固定网址，也包括当前请求网址
            </summary>
        </member>
        <member name="P:wojilu.SysRequest.Scheme">
            <summary>
            返回 http 或者 https，如果要返回 http:// ，请属性 SchemeStr
            </summary>
        </member>
        <member name="P:wojilu.SysRequest.SchemeStr">
            <summary>
            返回 http:// 或者 https://，如果要返回 http ，请属性 Scheme
            </summary>
        </member>
        <member name="P:wojilu.SysRequest.SiteUrl">
            <summary>
            返回 http://www.abc.com/app 这种格式，包括端口号
            </summary>
        </member>
        <member name="P:wojilu.SysRequest.SiteHost">
            <summary>
            返回 www.abc.com 或 localhost 等，带端口号
            </summary>
        </member>
        <member name="P:wojilu.SysRequest.SiteScheme">
            <summary>
            返回 http 或者 https
            </summary>
        </member>
        <member name="P:wojilu.SysRequest.RawUrl">
            <summary>
            获取当前请求的原始 url
            </summary>
        </member>
        <member name="P:wojilu.SysRequest.PageNumber">
            <summary>
            获取当前请求的翻页数
            </summary>
        </member>
        <member name="T:wojilu.Data.ConnectionString">
            <summary>
            数据库连接字符串内容的封装
            </summary>
        </member>
        <member name="T:wojilu.Data.DbConfig">
            <summary>
            ORM 的数据库配置
            </summary>
        </member>
        <member name="F:wojilu.Data.DbConfig.DefaultDbName">
            <summary>
            默认数据库名称(值为default)
            </summary>
        </member>
        <member name="M:wojilu.Data.DbConfig.GetConnectionStringMap">
            <summary>
            多个数据库连接字符串对象的map，值是ConnectionString对象(包括Name/StringContent/DbType)
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Data.DbConfig.GetMetaDllAbsPath">
            <summary>
            获取元数据库文件的绝对路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Data.DbConfig.GetMappingInfo">
            <summary>
            获取映射信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Data.DbConfig.GetConnectionString(System.String)">
            <summary>
            根据命名，获取数据库连接字符串
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Data.DbConfig.GetConnectionString">
            <summary>
            获取默认数据库的ConnectionString
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Data.DbConfig.GetDatabaseType(System.String)">
            <summary>
            获取数据库类型
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Data.DbConfig.GetDatabaseType">
            <summary>
            获取默认数据库的类型
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="P:wojilu.Data.DbConfig.Instance">
            <summary>
            配置的缓存内容(单例模式缓存)
            </summary>
        </member>
        <member name="P:wojilu.Data.DbConfig.ConnectionStringTable">
            <summary>
            直接解析json的结果：多个数据库连接字符串(connectionString)的键值对
            </summary>
        </member>
        <member name="P:wojilu.Data.DbConfig.DbType">
            <summary>
            直接解析json的结果：数据库类型
            </summary>
        </member>
        <member name="P:wojilu.Data.DbConfig.IdType">
            <summary>
            实体键值类型
            </summary>
        </member>
        <member name="P:wojilu.Data.DbConfig.IsAutoId">
            <summary>
            自动键值
            </summary>
        </member>
        <member name="P:wojilu.Data.DbConfig.AssemblyList">
            <summary>
            直接解析json的结果：程序集列表
            </summary>
        </member>
        <member name="P:wojilu.Data.DbConfig.IsCheckDatabase">
            <summary>
            是否坚持数据库，如果检查，则会将尚未创建的数据表自动创建
            </summary>
        </member>
        <member name="P:wojilu.Data.DbConfig.TablePrefix">
            <summary>
            数据表的前缀(默认没有前缀)
            </summary>
        </member>
        <member name="P:wojilu.Data.DbConfig.ContextCache">
            <summary>
            是否开启一级缓存，默认开启，并且建议开启
            </summary>
        </member>
        <member name="P:wojilu.Data.DbConfig.ApplicationCache">
            <summary>
            是否开启二级缓存
            </summary>
        </member>
        <member name="P:wojilu.Data.DbConfig.ApplicationCacheMinutes">
            <summary>
            二级缓存的时间(分钟)
            </summary>
        </member>
        <member name="P:wojilu.Data.DbConfig.ApplicationCacheManager">
            <summary>
            二级缓存管理程序，请填写类型(type)的全名(full name)，比如 wojilu.somens.myCache；
            如果不填写，则使用默认的System.Web.Caching
            </summary>
        </member>
        <member name="P:wojilu.Data.DbConfig.MetaDLL">
            <summary>
            ORM 的元数据文件名称，一般不需填写(建议不要填写)。如果为了提高网站启动时候的速度，可以填写。
            系统会根据文件名自动生成元数据文件，可以避免以后网站启动过程中的反射，能略微提高启动速度；
            文件名不包括路径(必须放在bin目录中)，比如 wojilu.meta.dll
            </summary>
        </member>
        <member name="P:wojilu.Data.DbConfig.Mapping">
            <summary>
            直接解析json的结果：数据表映射
            </summary>
        </member>
        <member name="P:wojilu.Data.DbConfig.Interceptor">
            <summary>
            拦截器列表
            </summary>
        </member>
        <member name="P:wojilu.Data.DbConfig.OptimizeMode">
            <summary>
            反射优化模式，目前只实现了 CodeDom 方式
            </summary>
        </member>
        <member name="M:wojilu.IO.PathTool.GetBinDirectory">
            <summary>
            bin 的绝对路径
            </summary>
            <returns></returns>
        </member>
        <member name="T:wojilu.Log.LogConfig">
            <summary>
            日志配置文件，默认配置文件在 /framework/config/log.config，日志文件在 /framework/log/log.txt 中
            </summary>
        </member>
        <member name="P:wojilu.Log.LogConfig.Instance">
            <summary>
            日志配置信息(全局缓存)
            <remarks>
            logLevel 的值(不区分大小写)：none, debug, info, warn, error, fatal, all；
            logFile 和 logProvider 通常不用填写
            </remarks>
            <example>
            配置文件的格式(一行一条配置，键值之间用冒号分开)。
            <code>
            logLevel : info
            logFile : log/log.txt
            logProvider : wojilu.Log.FileLogger
            </code>
            </example>
            </summary>
        </member>
        <member name="P:wojilu.Log.LogConfig.Level">
            <summary>
            记录的层次，不区分大小写，有 none, debug, info, warn, error, fatal, all 这几种可选
            </summary>
        </member>
        <member name="P:wojilu.Log.LogConfig.FilePath">
            <summary>
            日志文件存储的路径
            </summary>
        </member>
        <member name="P:wojilu.Log.LogConfig.LoggerImpl">
            <summary>
            日志记录工具，默认是 FileLogger
            </summary>
        </member>
        <member name="T:wojilu.Members.Interface.IUser">
            <summary>
            注册用户的接口
            </summary>
        </member>
        <member name="T:wojilu.Members.Interface.IMember">
            <summary>
            IMember 接口，可以是网站、用户或群组等
            </summary>
        </member>
        <member name="T:wojilu.Members.Interface.IUserFactory">
            <summary>
            用户工厂的接口
            </summary>
        </member>
        <member name="T:wojilu.ORM.DatabaseAttribute">
            <summary>
            数据库批注
            </summary>
        </member>
        <member name="T:wojilu.ORM.ValidationAttribute">
            <summary>
            验证批注的抽象基类。如果要自定义验证批注，请通过继承此基类扩展
            </summary>
        </member>
        <member name="M:wojilu.ORM.ValidationAttribute.Validate(System.String,wojilu.IEntity,wojilu.ORM.EntityPropertyInfo,wojilu.Result)">
            <summary>
            可以扩展的验证方法
            </summary>
            <param name="action">当前操作：update或insert</param>
            <param name="target">需要验证的实体对象</param>
            <param name="info">当前属性信息</param>
            <param name="result">验证结果</param>
        </member>
        <member name="P:wojilu.ORM.ValidationAttribute.Message">
            <summary>
            错误提示信息
            </summary>
        </member>
        <member name="P:wojilu.ORM.ValidationAttribute.Lang">
            <summary>
            多国语言化的错误提示信息
            </summary>
        </member>
        <member name="T:wojilu.ORM.HtmlTextAttribute">
            <summary>
            html 文本批注，表明此属性允许接受 html 风格的文本
            </summary>
        </member>
        <member name="T:wojilu.ORM.MoneyAttribute">
            <summary>
            货币批注，可以保存货币类型数据。
            此批注只能用在dotnet的decimal数据类型上。数据库存储的时候，使用的精度为：总位数19, 小数点后4位
            </summary>
        </member>
        <member name="T:wojilu.Caching.CacheManager">
            <summary>
            缓存管理器
            </summary>
        </member>
        <member name="M:wojilu.Caching.CacheManager.GetApplicationCache">
            <summary>
            获取 ApplicationCache
            </summary>
            <returns></returns>
        </member>
        <member name="T:wojilu.ORM.Caching.ApplicationPool">
            <summary>
            二级缓存(application级)的缓存池
            </summary>
        </member>
        <member name="T:wojilu.ORM.Caching.CacheTime">
            <summary>
            对象的缓存时间管理工具
            </summary>
        </member>
        <member name="T:wojilu.ORM.Caching.ContextPool">
            <summary>
            一级缓存(上下文缓存)的缓存池
            </summary>
        </member>
        <member name="T:wojilu.Entity">
            <summary>
            实体类常用方法
            </summary>
        </member>
        <member name="M:wojilu.Entity.New(System.String)">
            <summary>
            根据类型全名，创建持久化对象
            </summary>
            <param name="typeFullName">类型的全名</param>
            <returns>返回一个 IEntity 持久化对象</returns>
        </member>
        <member name="M:wojilu.Entity.GetInfo(System.Type)">
            <summary>
            获取类型 t 的元数据信息
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Entity.GetInfo(System.String)">
            <summary>
            获取类型 typeFullName 的元数据信息
            </summary>
            <param name="typeFullName">类型全名，包括namespace，但不包括程序集</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Entity.GetInfo(System.Object)">
            <summary>
            获取对象 obj 的元数据信息
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Entity.GetType(System.String)">
            <summary>
            根据全名获取类型
            </summary>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ORM.Utils.ValueSetter.setEntityByCheckNull(wojilu.IEntity,wojilu.ORM.EntityPropertyInfo,System.Object,System.Int64)">
            <summary>
            1.5新增，针对已删除用户应用 null object 模式
            </summary>
            <param name="obj"></param>
            <param name="ep"></param>
            <param name="propertyValue"></param>
        </member>
        <member name="T:wojilu.Serialization.SimpleJsonString">
            <summary>
            将简单的对象转换成 json 字符串
            </summary>
        </member>
        <member name="M:wojilu.Serialization.SimpleJsonString.ConvertList(System.Collections.IList)">
            <summary>
            将对象列表转换成 json 字符串
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Serialization.SimpleJsonString.ConvertList(System.Collections.IList,System.Boolean)">
            <summary>
            将对象列表转换成 json 字符串
            </summary>
            <param name="list"></param>
            <param name="allowNotSave">有NotSave批注的属性，不会序列化</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Serialization.SimpleJsonString.ConvertObject(System.Object,System.Boolean)">
            <summary>
            将对象转换成 json 字符串
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:wojilu.Serialization.JsonString">
            <summary>
            json 序列化工具：将对象转换成 json 字符串
            </summary>
        </member>
        <member name="M:wojilu.Serialization.JsonString.Convert(System.Object)">
            <summary>
            将对象转换成 json 字符串
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Serialization.JsonString.Convert(System.Object,System.Boolean)">
            <summary>
            将对象转换成 json 字符串
            </summary>
            <param name="obj"></param>
            <param name="isBreakline">是否换行(默认不换行，阅读起来更加清晰)</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Serialization.JsonString.ClearNewLine(System.String)">
            <summary>
            清楚json字符串中的换行符
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Serialization.JsonString.ConvertArray(System.Object[])">
            <summary>
            将对象数组转换成 json 字符串
            </summary>
            <param name="arrObj"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Serialization.JsonString.ConvertList(System.Collections.IList)">
            <summary>
            将对象列表转换成 json 字符串
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Serialization.JsonString.ConvertList(System.Collections.IList,System.Boolean)">
            <summary>
            将对象列表转换成 json 字符串
            </summary>
            <param name="list"></param>
            <param name="isBreakline">是否换行(默认不换行，阅读起来更加清晰)</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Serialization.JsonString.ConvertDictionary(System.Collections.IDictionary)">
            <summary>
            将字典 Dictionary 转换成 json 字符串
            </summary>
            <param name="dic"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Serialization.JsonString.ConvertDictionary(System.Collections.IDictionary,System.Boolean)">
            <summary>
            将字典 Dictionary 转换成 json 字符串
            </summary>
            <param name="dic"></param>
            <param name="isBreakline">是否换行(默认不换行，阅读起来更加清晰)</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Serialization.JsonString.ConvertObject(System.Object)">
            <summary>
            将对象转换成 json 字符串
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Serialization.JsonString.ConvertObject(System.Object,System.Boolean)">
            <summary>
            将对象转换成 json 字符串
            </summary>
            <param name="obj"></param>
            <param name="isBreakline">是否换行(默认不换行，阅读起来更加清晰)</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Serialization.JsonString.ConvertObject(System.Object,System.Boolean,System.Boolean)">
            <summary>
            将对象转换成 json 字符串
            </summary>
            <param name="obj"></param>
            <param name="isBreakline">是否换行(默认不换行，阅读起来更加清晰)</param>
            <param name="withQuotation">属性名是否使用引号(默认不启用)</param>
            <returns></returns>
        </member>
        <member name="T:wojilu.Web.Context.MvcContextUtils">
            <summary>
            框架常用高级方法
            </summary>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.setLayoutPath(System.Collections.IList)">
            <summary>
            设置所有的布局文件的路径
            </summary>
            <param name="pathList"></param>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.getLayoutPath">
            <summary>
            获取所有的布局文件的路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.setCurrentOutputString(System.String)">
            <summary>
            设置当前需要呈现给客户端的 html 内容
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.getCurrentOutputString">
            <summary>
            获取当前需要呈现给客户端的 html 内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.setRoute(wojilu.Web.Mvc.Routes.Route)">
            <summary>
            设置当前路由 route
            </summary>
            <param name="route"></param>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.getRoute">
            <summary>
            获取当前路由 route
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.setViewerContext(wojilu.Web.Context.IViewerContext)">
            <summary>
            设置当前访问者信息
            </summary>
            <param name="vctx"></param>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.getViewerContext">
            <summary>
            获取当前访问者信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.setOwnerContext(wojilu.Web.Context.IOwnerContext)">
            <summary>
            设置当前被访问者(网站、群组、用户空间等)信息
            </summary>
            <param name="octx"></param>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.getOwnerContext">
            <summary>
            获取当前访问者信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.setController(wojilu.Web.Mvc.ControllerBase)">
            <summary>
            设置当前控制器 controller
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.getController">
            <summary>
            获取当前控制器 controller
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.setAppContext(wojilu.Web.Context.IAppContext)">
            <summary>
            设置当前 app 信息
            </summary>
            <param name="appctx"></param>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.getAppContext">
            <summary>
            获取当前 app 信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.CancelMvcProcessor(System.Type)">
            <summary>
            取消某个 mvc 处理器：在后续流程中，会跳过此处理器
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.GetCancelMvcProcessor">
            <summary>
            获取所有被取消的 mvc 处理器
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.skipCurrentProcessor(System.Boolean)">
            <summary>
            跳过当前处理器的后续内容，进入下一个处理器。
            </summary>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.isSkipCurrentProcessor">
            <summary>
            是否跳过当前处理器的后续内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.setException(System.Exception)">
            <summary>
            设置当前异常
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.getException">
            <summary>
            获取当前异常
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.setIsHome(System.Boolean)">
            <summary>
            设置当前是否被访问者首页（网站首页，或群组首页，或空间首页等）
            </summary>
            <param name="isHome"></param>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.getIsHome">
            <summary>
            当前是否是被访问者首页（网站首页，或群组首页，或空间首页等）
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.end">
            <summary>
            结束所有后续流程，进入 render 阶段(直接由 RenderProcessor 处理)。
            如果连 RenderProcessor 都想取消，请另外再调用方法 skipRender() 
            </summary>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.isEnd">
            <summary>
            是否后续流程都被取消
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.skipRender">
            <summary>
            跳过 render 步骤
            </summary>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.IsSkinRender">
            <summary>
            是否跳过 render 步骤
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.isFrame">
            <summary>
            当前请求是否来自 frame
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.isBox">
            <summary>
            当前请求是否来自box
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.getNoLayout">
            <summary>
            禁止呈现的layout层级，从顶部开始，1表示禁止呈现第一个layout，2表示禁止呈现1和2这两个layout……n表示从1到n的所有layout都禁止呈现，999表示禁止呈现所有layout，0或者-1则表示呈现全部layout
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.clearResource">
            <summary>
            清理当前连接中的资源：关闭数据库连接，将日志写入磁盘
            </summary>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.endMsg(System.String,System.String)">
            <summary>
            显示信息，并发出 http 状态码(可选)
            </summary>
            <param name="msg"></param>
            <param name="httpStatusCode">可以为null</param>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.endMsgByText(System.String)">
            <summary>
            显示信息(不带模板)，然后结束下面的流程
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.endMsgByText(System.String,System.String)">
            <summary>
            显示信息(不带模板)，然后结束下面的流程。并发出 http 状态码(可选)
            </summary>
            <param name="msg"></param>
            <param name="httpStatusCode"></param>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.endMsgByView(System.String)">
            <summary>
            显示信息(带模板)，然后结束下面的流程
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.endMsgBox(System.String)">
            <summary>
            使用 box 模板显示信息，然后结束下面的流程
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.endMsgForward(System.String)">
            <summary>
            使用 forward 模板显示信息，然后结束下面的流程
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.endMsgByView(System.String,System.String)">
            <summary>
            根据指定模板显示信息，然后结束下面的流程
            </summary>
            <param name="msg"></param>
            <param name="templateFileName">模板路径</param>
        </member>
        <member name="M:wojilu.Web.Context.MvcContextUtils.setGlobalVariable(wojilu.Web.ITemplate)">
            <summary>
            给模板中的全局变量赋值(不带app lang)
            </summary>
            <param name="tpl"></param>
        </member>
        <member name="P:wojilu.Web.Context.MvcContextUtils.isAjax">
            <summary>
            当前请求是否来自 ajax
            </summary>
        </member>
        <member name="T:wojilu.Web.CurrentRequest">
            <summary>
            当前请求范围中的数据，方便静态方法调用
            </summary>
        </member>
        <member name="T:wojilu.Web.HttpFile">
            <summary>
            对上传文件的封装
            </summary>
        </member>
        <member name="M:wojilu.Web.HttpFile.SaveAs(System.String)">
            <summary>
            保存上载文件的内容(用在服务端)
            </summary>
            <param name="filename">保存的文件的名称。</param>
        </member>
        <member name="P:wojilu.Web.HttpFile.PostedFile">
            <summary>
            上传文件的原始数据(用在服务端)
            </summary>
        </member>
        <member name="P:wojilu.Web.HttpFile.ContentLength">
            <summary>
            文件长度（以字节为单位）
            </summary>
        </member>
        <member name="P:wojilu.Web.HttpFile.ContentType">
            <summary>
            上载文件的 MIME 内容类型。
            </summary>
        </member>
        <member name="P:wojilu.Web.HttpFile.FilePath">
            <summary>
            客户端的文件的名称，包含目录路径。
            </summary>
        </member>
        <member name="T:wojilu.Web.IWebContext">
            <summary>
            web 原始数据和方法的接口
            </summary>
        </member>
        <member name="M:wojilu.Web.IWebContext.UserId">
            <summary>
            获取当前登录用户的 userId，如果没有登录，则为-1
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.IWebContext.UserId(System.String)">
            <summary>
            获取使用自定义的cookie名称登录的 userId
            </summary>
            <param name="cookieName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.IWebContext.UserLogin(System.Int64,System.String,System.DateTime)">
            <summary>
            使用默认的cookie登录
            </summary>
            <param name="userId"></param>
            <param name="userName"></param>
            <param name="expiration">过期的时间，比如10分钟过期： DateTime.Now.AddMinutes( 10 )</param>
        </member>
        <member name="M:wojilu.Web.IWebContext.UserLogin(System.Int64,System.String,wojilu.Common.LoginTime)">
            <summary>
            使用默认的cookie登录
            </summary>
            <param name="userId"></param>
            <param name="userName"></param>
            <param name="expiration">使用 LoginTime 枚举确定过期时间</param>
        </member>
        <member name="M:wojilu.Web.IWebContext.UserLogin(System.String,System.Int64,System.String,System.DateTime)">
            <summary>
            使用自定义的cookie名称登录，允许多个验证授权，互不影响
            </summary>
            <param name="cookieName"></param>
            <param name="userId"></param>
            <param name="userName"></param>
            <param name="expiration">过期的时间，比如10分钟过期： DateTime.Now.AddMinutes( 10 )</param>
        </member>
        <member name="M:wojilu.Web.IWebContext.UserLogin(System.String,System.Int64,System.String,wojilu.Common.LoginTime)">
            <summary>
            使用自定义的cookie名称登录，允许多个验证授权，互不影响
            </summary>
            <param name="cookieName"></param>
            <param name="userId"></param>
            <param name="userName"></param>
            <param name="expiration">使用 LoginTime 枚举确定过期时间</param>
        </member>
        <member name="M:wojilu.Web.IWebContext.UserLogout">
            <summary>
            用户注销
            </summary>
        </member>
        <member name="M:wojilu.Web.IWebContext.UserLogout(System.String)">
            <summary>
            在自定义cookie验证模式下，注销登录
            </summary>
            <param name="cookieName"></param>
        </member>
        <member name="M:wojilu.Web.IWebContext.CookieAuthName">
            <summary>
            默认的登录验证的cookie名称=FormsAuthentication.FormsCookieName
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.IWebContext.CookieAuthValue">
            <summary>
            默认的FormsAuthentication.FormsCookieName的cookie值，未经解密
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.IWebContext.CookieAuthValue(System.String)">
            <summary>
            获取自定义的auth cookie的值，尚未解密
            </summary>
            <param name="cookieName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.IWebContext.CookieClear">
            <summary>
            清除所有wojiluCookie
            </summary>
        </member>
        <member name="M:wojilu.Web.IWebContext.CookieGet(System.String)">
            <summary>
            获取wojiluCookie中某项的值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.IWebContext.CookieRemove(System.String)">
            <summary>
            在wojiluCookie中删除一项
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:wojilu.Web.IWebContext.CookieSet(System.String,System.String)">
            <summary>
            在wojiluCookie中增加一项
            </summary>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="P:wojilu.Web.IWebContext.UserIsLogin">
            <summary>
            判断用户是否登录(默认cookie验证)
            </summary>
        </member>
        <member name="T:wojilu.Web.Mock.MvcCookies">
            <summary>
            cookie 的模拟
            </summary>
        </member>
        <member name="T:wojilu.Web.Mock.MvcHttpContext">
            <summary>
            HttpContext 的模拟
            </summary>
        </member>
        <member name="T:wojilu.Web.Mock.MvcRequest">
            <summary>
            request 的模拟
            </summary>
        </member>
        <member name="T:wojilu.Web.Mock.MvcResponse">
            <summary>
            response 的模拟
            </summary>
        </member>
        <member name="T:wojilu.Web.Mock.MvcSession">
            <summary>
            session 的模拟
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.Captcha">
            <summary>
            验证码控件
            </summary>
            <remarks>验证码控件(Captcha=Completely Automated Public Turing Test To Tell Computers and Humans Apart)</remarks>
            <example>
            <code>
            Html.Captcha.ToString() -->获取呈现验证码的 html 和 js
            Html.Captcha.Html()  -->获取呈现验证码的 html 和 js
            Html.Captcha.HasError() -->验证码是否有误
            Html.Captcha.Code() -->正确的验证码
            Html.Captcha.UserCode() ->用户实际填写的验证码
            </code>
            </example>
        </member>
        <member name="M:wojilu.Web.Mvc.Captcha.ToString">
            <summary>
            验证码控件的html (包括一个input  + 右侧的一个验证码 + 点击刷新机制)
            如果要使用ajax验证，必须给form启用 ajaxPostForm 验证
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.Captcha.Html">
            <summary>
            验证码控件的html (包括一个input  + 右侧的一个验证码 + 点击刷新机制)
            如果要使用ajax验证，必须给form启用 ajaxPostForm 验证
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.Captcha.CheckError(wojilu.Web.Context.MvcContext)">
            <summary>
            检查用户提交的验证码是否错误
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.Captcha.CorrectCode(wojilu.Web.Context.MvcContext)">
            <summary>
            服务器端正确的验证码
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.Captcha.ClientCode(wojilu.Web.Context.MvcContext)">
            <summary>
            用户实际提交的验证码
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="T:wojilu.Web.Mvc.ControllerCore">
            <summary>
            控制器中的一些高级方法，主要由框架调用
            </summary>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerCore.setCurrentView(wojilu.Web.Template)">
            <summary>
            设置当前模板
            </summary>
            <param name="tpl">模板对象</param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerCore.getCurrentView">
            <summary>
            获取当前模板
            </summary>
            <returns>返回一个模板对象</returns>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerCore.getActionResult">
            <summary>
            得到当前 action 的运行结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerCore.setActionContent(System.String)">
            <summary>
            设置当前 action 的运行结果
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerCore.initActionResult">
            <summary>
            请当前 action 内容清空，保持初始状态
            </summary>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerCore.getAppLang">
            <summary>
            获取当前 app 的语言包数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerCore.getActionFilters(System.Reflection.MethodInfo)">
            <summary>
            获取某方法的所有过滤器 ActionFilter 列表
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerCore.Compare(wojilu.Web.Mvc.Interface.IActionFilter,wojilu.Web.Mvc.Interface.IActionFilter)">
            <summary>
            给过滤器排序
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerCore.addHidedLayouts(wojilu.Web.Mvc.ControllerBase)">
            <summary>
            合并需要隐藏的 LayoutController
            </summary>
            <param name="hidedCcontroller"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerCore.setAppType(System.Type)">
            <summary>
            设置当前的 app 类型
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerCore.getAppType">
            <summary>
            获取当前的 app 类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerCore.renderPageMetaToView">
            <summary>
            将页面元信息(包括Title/Keywords/Description/RssLink)赋予模板
            </summary>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerCore.getTemplateByAction(System.String)">
            <summary>
            根据 action 名称获取模板对象
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerCore.getTemplateByFileName(System.String)">
            <summary>
            根据文件名称获取模板对象，文件名必须从视图 view 的根目录算起
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerCore.getTemplatePathByFile(System.String)">
            <summary>
            获取某模板文件的绝对路径，文件名必须从视图 view 的根目录算起
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerCore.runAction">
            <summary>
            运行某 action
            </summary>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerCore.runAction(System.String)">
            <summary>
            运行某 action
            </summary>
            <param name="actionName"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerCore.getMethod(System.String)">
            <summary>
            根据名称获取某 action 的方法信息
            </summary>
            <param name="actionName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerCore.getAttribute(System.Reflection.MethodInfo,System.Type)">
            <summary>
            根据批注类型，获取某方法的特定批注
            </summary>
            <param name="method"></param>
            <param name="attrType"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerCore.getAttributesAll(System.Reflection.MethodInfo)">
            <summary>
            获取某方法的所有批注
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerCore.getAttributes(System.Reflection.MethodInfo,System.Type)">
            <summary>
            根据批注类型，获取某方法的特定批注列表
            </summary>
            <param name="method"></param>
            <param name="attrType"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerCore.getHttpMethodAttributes(System.Reflection.MethodInfo)">
            <summary>
            获取某方法的所有 HttpMethod 类型的批注
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="F:wojilu.Web.Mvc.ControllerCore._isrunAction">
            <summary>
            获取某方法的所有参数信息
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:wojilu.Web.SystemInfo">
            <summary>
            系统的固定数据，比如网站根路径、app路径、主机名称等。
            1) 可以在非web请求时候使用，比如定时器的新线程中使用;
            2) 获取不同域名级别下的的统一主机值
            </summary>
        </member>
        <member name="M:wojilu.Web.SystemInfo.Init">
            <summary>
            网站初始化时候启动
            </summary>
        </member>
        <member name="P:wojilu.Web.SystemInfo.RootPath">
            <summary>
            比 ApplicationPath 多一个斜杠
            </summary>
        </member>
        <member name="P:wojilu.Web.SystemInfo.ApplicationPath">
            <summary>
            比如 /myapp 或者 /
            </summary>
        </member>
        <member name="P:wojilu.Web.SystemInfo.Host">
            <summary>
            主机名 www.wojilu.com 或 localhost 或 127.0.0.1
            </summary>
        </member>
        <member name="P:wojilu.Web.SystemInfo.SiteRoot">
            <summary>
            网站首页，普通模式是"/"，二级域名下是http加主机名
            </summary>
        </member>
        <member name="P:wojilu.Web.SystemInfo.HostNoSubdomain">
            <summary>
            不带二级域名的 Host 名称，比如 abc.com 或 baidu.com
            </summary>
        </member>
        <member name="P:wojilu.Web.SystemInfo.HostIsIp">
            <summary>
            Host 是否是ip地址
            </summary>
        </member>
        <member name="P:wojilu.Web.SystemInfo.HostIsLocalhost">
            <summary>
            Host 是否等于 localhost
            </summary>
        </member>
        <member name="P:wojilu.Web.SystemInfo.Authority">
            <summary>
            主机名(或ip地址)+端口号
            </summary>
        </member>
        <member name="P:wojilu.Web.SystemInfo.SiteUrl">
            <summary>
            比如 http://www.wojilu.com/app
            </summary>
        </member>
        <member name="T:wojilu.Web.UI.CssFormUtil">
            <summary>
            css 表单工具
            </summary>
        </member>
        <member name="T:wojilu.Web.UI.CssStyle">
            <summary>
            常见 css 选项列表：比如边框样式、字体、背景方式等
            </summary>
        </member>
        <member name="T:wojilu.Web.UI.CssControl">
            <summary>
            常用 css 项
            </summary>
        </member>
        <member name="T:wojilu.Web.UI.CssInfo">
            <summary>
            常用 css 项的封装和转换
            </summary>
        </member>
        <member name="T:wojilu.Web.UI.Css">
            <summary>
            css 转换器
            </summary>
        </member>
        <member name="T:wojilu.Web.GlobalApp.AppGlobalHelper">
            <summary>
            全局异常处理
            </summary>
        </member>
        <member name="T:wojilu.Web.GlobalApp.AppGlobalLogger">
            <summary>
            集中处理系统中所有的异常日志
            </summary>
        </member>
        <member name="T:wojilu.Web.GlobalApp.AppGlobalNull">
            <summary>
            异常不处理
            </summary>
        </member>
        <member name="T:wojilu.Web.Handler.PageNotFoundHandler">
            <summary>
            网页不存在的处理器
            </summary>
        </member>
        <member name="T:wojilu.Web.Handler.ValidationType">
            <summary>
            验证码类型
            </summary>
        </member>
        <member name="F:wojilu.Web.Handler.ValidationType.Digit">
            <summary>
            数字
            </summary>
        </member>
        <member name="F:wojilu.Web.Handler.ValidationType.Letter">
            <summary>
            英文字母
            </summary>
        </member>
        <member name="F:wojilu.Web.Handler.ValidationType.DigitAndLetter">
            <summary>
            数字和英文字母
            </summary>
        </member>
        <member name="F:wojilu.Web.Handler.ValidationType.Chinese">
            <summary>
            中文
            </summary>
        </member>
        <member name="T:wojilu.Web.Handler.ValidationDefault">
            <summary>
            验证码默认值
            </summary>
        </member>
        <member name="F:wojilu.Web.Handler.ValidationDefault.Length">
            <summary>
            英文或字母验证码的默认长度
            </summary>
        </member>
        <member name="F:wojilu.Web.Handler.ValidationDefault.ChineseLength">
            <summary>
            中文验证码的默认长度
            </summary>
        </member>
        <member name="F:wojilu.Web.Handler.ValidationDefault.Type">
            <summary>
            默认的验证码类型
            </summary>
        </member>
        <member name="T:wojilu.Web.HttpStatus">
            <summary>
            web 服务器反馈的 http 状态码
            </summary>
        </member>
        <member name="T:wojilu.Web.IBlock">
            <summary>
            模板引擎中的区块
            </summary>
        </member>
        <member name="M:wojilu.Web.IBlock.Next">
            <summary>
            进入下一个循环
            </summary>
        </member>
        <member name="M:wojilu.Web.IBlock.Set(System.String,System.String)">
            <summary>
            给模板变量赋值
            </summary>
            <param name="lbl"></param>
            <param name="lblValue"></param>
        </member>
        <member name="M:wojilu.Web.IBlock.Set(System.String,System.Object)">
            <summary>
            给模板变量赋值
            </summary>
            <param name="lbl"></param>
            <param name="val"></param>
        </member>
        <member name="M:wojilu.Web.IBlock.Bind(System.Object)">
            <summary>
            将对象绑定到模板中
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:wojilu.Web.IBlock.Bind(System.String,System.Object)">
            <summary>
            将对象绑定到模板中，并指定对象在模板中的变量名
            </summary>
            <param name="lbl"></param>
            <param name="obj"></param>
        </member>
        <member name="M:wojilu.Web.IBlock.BindList(System.String,System.String,System.Collections.IList)">
            <summary>
            将对象列表绑定到模板中
            </summary>
            <param name="listName"></param>
            <param name="lbl"></param>
            <param name="objList"></param>
        </member>
        <member name="M:wojilu.Web.IBlock.GetBlock(System.String)">
            <summary>
            获取模板中的区块，用于进一步的绑定
            </summary>
            <param name="blockName"></param>
            <returns></returns>
        </member>
        <member name="P:wojilu.Web.IBlock.bindFunc">
            <summary>
            绑定方法，通常用于自定义绑定
            </summary>
        </member>
        <member name="P:wojilu.Web.IBlock.bindOtherFunc">
            <summary>
            绑定方法，通常用于自定义绑定
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.MvcEventPublisher">
            <summary>
            mvc 处理流程中的事件发布者
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.Interface.IMvcFilter">
            <summary>
            mvc 各处理步骤中的过滤器
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.MvcEventArgs">
            <summary>
            mvc 处理流程中触发的事件
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.MvcException">
            <summary>
            mvc 异常
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.MvcFilterLoader">
            <summary>
            mvc 过滤器的加载器
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.StaticPath">
            <summary>
            静态文件的路径
            </summary>
        </member>
        <member name="M:wojilu.Web.Utils.Tags.TagFilter.Clear(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            根据白名单过滤
            </summary>
            <param name="input">需要过滤的字符串</param>
            <param name="whitelist">白名单</param>
            <param name="isAddBaseAttr">是否允许 id/class/style 这三个基础属性</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Utils.Tags.TagWhitelist.IsAllowAllHtml">
            <summary>
            是否允许所有的html标签
            </summary>
            <returns></returns>
        </member>
        <member name="T:wojilu.Web.WebContext">
            <summary>
            web 原始数据和方法
            </summary>
        </member>
        <member name="M:wojilu.Web.WebContext.GetAuthJson(System.String[])">
            <summary>
            获取安全验证的cookie字符串(json格式)
            </summary>
            <param name="arrCookieName">默认cookie名称之外的其他cookie名称，在ctx.web.UserLogin() 第一个参数中指定</param>
            <returns></returns>
        </member>
        <member name="T:wojilu.Web.MockWebContext">
            <summary>
            web 原始数据和方法的模拟，可用于桌面环境
            </summary>
        </member>
        <member name="T:wojilu.aAction">
            <summary>
            不带参数的委托，主要用于mvc中的链接。
            </summary>
        </member>
        <member name="T:wojilu.aActionWithId">
            <summary>
            带整型参数的委托，主要用于mvc中的链接。
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:wojilu.aActionWithQuery">
            <summary>
            带字符串参数的委托，主要用于mvc中的链接，本委托不常用。
            </summary>
            <param name="param"></param>
        </member>
        <member name="T:wojilu.cdb">
            <summary>
            从内存数据库中查询数据
            </summary>
            <remarks>
            数据持久化在 /framework/data/ 目录下，以json格式存储。加载之后常驻内存。
            特点：直接从内存中检索，速度相当于 Hashtable。插入和更新较慢(相对而言)，因为插入和更新会在内存中重建索引。
            </remarks>
        </member>
        <member name="M:wojilu.cdb.findAll``1">
            <summary>
            查询类型 T 的所有数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns>返回所有数据的列表</returns>
        </member>
        <member name="M:wojilu.cdb.findById``1(System.Int64)">
            <summary>
            根据 id 查询某条数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns>返回某条数据</returns>
        </member>
        <member name="M:wojilu.cdb.findByName``1(System.String)">
            <summary>
            根据名称查询数据，因为已经根据名称做了索引，所以速度很快。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns>返回数据列表</returns>
        </member>
        <member name="M:wojilu.cdb.findNameById``1(System.Int32)">
            <summary>
            根据 id 获取对象的名称
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.cdb.findBy``1(System.String,System.Object)">
            <summary>
            根据属性查询数据。框架已经给对象的所有属性做了索引。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName">属性名称</param>
            <param name="val">属性的值</param>
            <returns>返回数据列表</returns>
        </member>
        <member name="M:wojilu.cdb.findPage``1(System.String,System.Object,System.Int32)">
            <summary>
            查询分页后的数据列表。不用提供当前页信息，因为在web环境中，框架会自动获取当前页面。
            分页是在内存中进行的，也就是先查询内存中所有记录，然后根据当前页和 pageSize 获取特定页面的数据。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName">属性名称</param>
            <param name="val">属性的值</param>
            <param name="pageSize">每页需要显示的数据量</param>
            <returns>分页数据列表，包括当前页、总记录数、分页条等</returns>
        </member>
        <member name="M:wojilu.cdb.findPage``1(System.Int32)">
            <summary>
            查询分页后的数据列表。不用提供当前页信息，因为在web环境中，框架会自动获取当前页面。
            分页是在内存中进行的，也就是先查询内存中所有记录，然后根据当前页和 pageSize 获取特定页面的数据。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pageSize">每页需要显示的数据量</param>
            <returns>分页数据列表，包括当前页、总记录数、分页条等</returns>
        </member>
        <member name="M:wojilu.cdb.insert(wojilu.Data.CacheObject)">
            <summary>
            插入数据，并对所有属性做索引，速度较慢。新插入的数据会被同步持久化到磁盘。
            </summary>
        </member>
        <member name="M:wojilu.cdb.insertByIndex(wojilu.Data.CacheObject,System.String,System.Object)">
            <summary>
            插入时，只针对特定属性做索引，提高速度
            </summary>
            <param name="propertyName">需要做索引的属性</param>
            <param name="pValue">属性的值</param>
        </member>
        <member name="M:wojilu.cdb.update(wojilu.Data.CacheObject)">
            <summary>
            更新对象，并将对象同步持久化的磁盘，同时更新索引
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.cdb.updateNoIndex(wojilu.Data.CacheObject)">
            <summary>
             更新数据（不持久化，也不做索引）
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.cdb.delete(wojilu.Data.CacheObject)">
            <summary>
            从内存中删除数据，并同步磁盘中内容。
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:wojilu.cfgHelper">
            <summary>
            读取、修改配置文件的帮助类。
            </summary>
            <remarks>
            每行包括键和值，中间的分隔符默认是英文冒号。
            如果某行以双斜杠 // 或井号 # 开头，就表示此行内容是注释
            </remarks>
        </member>
        <member name="F:wojilu.cfgHelper.FrameworkRoot">
            <summary>
            框架的根目录，默认是在 /framework/ 目录下。
            你也可以在 web.config 的 appSettings 中，添加 framework 项，来自定义框架的根目录
            </summary>
        </member>
        <member name="M:wojilu.cfgHelper.GetAppSettings(System.String)">
            <summary>
            获取 web.config 的 AppSettings 中某项的值
            </summary>
            <param name="key">项的名称</param>
            <returns>返回一个字符串值</returns>
        </member>
        <member name="M:wojilu.cfgHelper.Read(System.String)">
            <summary>
            读取配置文件，将结果放到字典Dictionary中返回
            </summary>
            <param name="path">请使用绝对路径</param>
            <returns>返回一个字符串字典</returns>
        </member>
        <member name="M:wojilu.cfgHelper.Read``1">
            <summary>
            读取配置文件，返回一个对象。配置文件的路径是 /framework/config/{typeFullName}.config
            </summary>
            <typeparam name="T">对象的类型</typeparam>
            <returns>返回 T 类型的对象</returns>
        </member>
        <member name="M:wojilu.cfgHelper.ReadByFile``1(System.String)">
            <summary>
            读取配置文件，返回一个对象。
            </summary>
            <typeparam name="T">对象的类型</typeparam>
            <param name="fileName">纯文件名称，不包括路径(默认是在 /framework/config/ 目录下)</param>
            <returns>返回 T 类型的对象</returns>
        </member>
        <member name="M:wojilu.cfgHelper.ReadByFile``1(System.String,System.Char)">
            <summary>
            读取配置文件，返回一个对象。
            </summary>
            <typeparam name="T">对象的类型</typeparam>
            <param name="fileName">纯文件名称，不包括路径(默认是在 /framework/config/ 目录下)</param>
            <param name="separator">键和值之间的分隔符</param>
            <returns>返回 T 类型的对象</returns>
        </member>
        <member name="M:wojilu.cfgHelper.Read``1(System.String)">
            <summary>
            读取配置文件，返回一个对象。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">配置文件的路径(相对路径，相对于项目的根目录)</param>
            <returns>返回 T 类型的对象</returns>
        </member>
        <member name="M:wojilu.cfgHelper.Read``1(System.String,System.Char)">
            <summary>
            读取配置文件，然后将结果通过反射，赋值给 T 类型的对象并返回。
            (对象的属性只支持 int/string/bool/decimal/DateTime 五种类型)
            </summary>
            <typeparam name="T">对象的类型</typeparam>
            <param name="path">配置文件的路径(相对路径，相对于项目的根目录)</param>
            <param name="separator">键和值之间的分隔符</param>
            <returns>返回一个对象</returns>
        </member>
        <member name="M:wojilu.cfgHelper.Read(System.String,System.Char)">
            <summary>
            读取配置文件，返回一个 Dictionary，键值都是字符串
            </summary>
            <param name="path">配置文件的路径(相对路径，相对于项目的根目录)</param>
            <param name="separator">键和值之间的分隔符</param>
            <returns>返回一个 Dictionary</returns>
        </member>
        <member name="M:wojilu.cfgHelper.Write(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            将 Dictionary 对象持久化到磁盘
            </summary>
            <param name="dic">一个 Dictionary</param>
            <param name="path">配置文件的路径(相对路径，相对于项目的根目录)</param>
        </member>
        <member name="M:wojilu.cfgHelper.Write(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Char)">
            <summary>
            将 Dictionary 对象持久化到磁盘
            </summary>
            <param name="dic">一个 Dictionary</param>
            <param name="path">配置文件的路径(相对路径，相对于项目的根目录)</param>
            <param name="separator">键和值之间的分隔符</param>
        </member>
        <member name="M:wojilu.cfgHelper.Write(System.Object)">
            <summary>
            将对象持久化到磁盘。保存的路径是 /framework/config/{typeFullName}.config
            </summary>
            <param name="obj">某特定对象</param>
        </member>
        <member name="M:wojilu.cfgHelper.WriteToFile(System.Object,System.String)">
            <summary>
            将对象持久化到磁盘。
            </summary>
            <param name="obj">某特定对象</param>
            <param name="fileName">纯文件名称，不包括路径(默认是在 /framework/config/ 下)</param>
        </member>
        <member name="M:wojilu.cfgHelper.WriteToFile(System.Object,System.String,System.Char)">
            <summary>
            将对象持久化到磁盘
            </summary>
            <param name="obj">某特定对象</param>
            <param name="fileName">纯文件名称，不包括路径(默认是在 /framework/config/ 下)</param>
            <param name="separator">键和值之间的分隔符</param>
        </member>
        <member name="M:wojilu.cfgHelper.GetDicString(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            将 Dictionary 序列化为字符串
            </summary>
            <param name="dic"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.cfgHelper.setSeparator(System.Char)">
            <summary>
            设置键和值之间的分隔符
            </summary>
            <param name="separator"></param>
        </member>
        <member name="M:wojilu.cfgHelper.ToString">
            <summary>
            配置文件的内容
            </summary>
            <returns></returns>
        </member>
        <member name="P:wojilu.cfgHelper.ConfigRoot">
            <summary>
            框架配置文件的根目录，在 /framework/config/ 目录下
            </summary>
        </member>
        <member name="P:wojilu.cfgHelper.Content">
            <summary>
            配置文件的内容
            </summary>
        </member>
        <member name="P:wojilu.cfgHelper.Dic">
            <summary>
            以 Dictionary 的形式设置或获取配置
            </summary>
        </member>
        <member name="T:wojilu.cvt">
            <summary>
            不同类型之间数值转换
            </summary>
        </member>
        <member name="M:wojilu.cvt.IsDecimal(System.String)">
            <summary>
            判断字符串是否是小数或整数
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.cvt.IsIdListValid(System.String)">
            <summary>
            判断字符串是否是多个整数的列表，整数之间必须通过英文逗号分隔
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.cvt.IsInt(System.String)">
            <summary>
            判断字符串是否是整数或负整数
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.cvt.IsBool(System.String)">
            <summary>
            判断字符串是否是"true"或"false"(不区分大小写)
            </summary>
            <param name="str"></param>
            <returns>只有字符串是"true"或"false"(不区分大小写)时，才返回true</returns>
        </member>
        <member name="M:wojilu.cvt.To(System.Object,System.Type)">
            <summary>
            将对象转换成目标类型
            </summary>
            <param name="val"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.cvt.ToBool(System.Int32)">
            <summary>
            将整数转换成 Boolean 类型。只有参数等于1时，才返回true
            </summary>
            <param name="integer"></param>
            <returns>只有参数等于1时，才返回true</returns>
        </member>
        <member name="M:wojilu.cvt.ToBool(System.Object)">
            <summary>
            将对象转换成 Boolean 类型。只有对象的字符串形式等于1或者true(不区分大小写)时，才返回true
            </summary>
            <param name="objBool"></param>
            <returns>只有对象的字符串形式等于1或者true(不区分大小写)时，才返回true</returns>
        </member>
        <member name="M:wojilu.cvt.ToBool(System.String)">
            <summary>
            将字符串(不区分大小写)转换成 Boolean 类型。只有字符串等于1或者true时，才返回true
            </summary>
            <param name="str"></param>
            <returns>只有字符串等于1或者true时，才返回true</returns>
        </member>
        <member name="M:wojilu.cvt.ToDecimal(System.String)">
            <summary>
            将字符串转换成 System.Decimal 类型。如果str不是整数或小数，返回0
            </summary>
            <param name="str"></param>
            <returns>如果str不是整数或小数，返回0</returns>
        </member>
        <member name="M:wojilu.cvt.ToDouble(System.String)">
            <summary>
            将字符串转换成 System.Double 类型。如果str不是整数或小数，返回0
            </summary>
            <param name="str"></param>
            <returns>如果str不是整数或小数，返回0</returns>
        </member>
        <member name="M:wojilu.cvt.ToDecimal(System.String,System.Decimal)">
            <summary>
            将字符串转换成 System.Decimal 类型。如果str不是整数或小数，返回参数 defaultValue 指定的值
            </summary>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.cvt.ToInt(System.Object)">
            <summary>
            将对象转换成整数；如果不是整数，则返回0
            </summary>
            <param name="objInt"></param>
            <returns>如果不是整数，则返回0</returns>
        </member>
        <member name="M:wojilu.cvt.ToInt(System.Decimal)">
            <summary>
            将 decimal 转换成整数
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.cvt.ToNotNull(System.Object)">
            <summary>
            将对象转换成非Null形式，如果传入的参数是 null，则返回空字符串(即""，也即string.Empty)
            </summary>
            <param name="str"></param>
            <returns>如果为null，则返回空字符串(即""，也即string.Empty)</returns>
        </member>
        <member name="M:wojilu.cvt.ToTime(System.Object)">
            <summary>
            将对象转换成 DateTime 形式，如果不符合格式，则返回当前时间
            </summary>
            <param name="objTime"></param>
            <returns>如果不符合格式，则返回当前时间</returns>
        </member>
        <member name="M:wojilu.cvt.ToTime(System.Object,System.DateTime)">
            <summary>
            将对象转换成 DateTime 形式，如果不符合格式，则返回第二个参数指定的时间
            </summary>
            <param name="objTime"></param>
            <param name="targetTime"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.cvt.IsDayEqual(System.DateTime,System.DateTime)">
            <summary>
            判断两个时间的日期是否相同(要求同年同月同日)
            </summary>
            <param name="day1"></param>
            <param name="day2"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.cvt.ToDayString(System.DateTime)">
            <summary>
            获取日期的日常表达形式，要求最近三天依次用 {今天，昨天，前天} 表示
            </summary>
            <param name="day"></param>
            <returns>要求最近三天依次用 {今天、昨天、前天} 表示</returns>
        </member>
        <member name="M:wojilu.cvt.ToTimeString(System.DateTime)">
            <summary>
            获取时间的日常表达形式，格式为 {**小时前，**分钟前，**秒前}，以及 {昨天，前天}
            </summary>
            <param name="t"></param>
            <returns>格式为 {**小时前，**分钟前，**秒前}，以及 {昨天，前天}</returns>
        </member>
        <member name="M:wojilu.cvt.ToXML(System.Object)">
            <summary>
            将对象序列化为 xml (内部调用 .net 框架自带的 XmlSerializer)
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.cvt.ToString(System.Int32[])">
            <summary>
            将整数转换成字符串形式，多个整数之间用英文逗号分隔
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.cvt.ToIntArray(System.String)">
            <summary>
            将字符串形式的 id 列表转换成整型数组
            </summary>
            <param name="myids"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.cvt.ToColorValue(System.String)">
            <summary>
            将字符串转换成以井号开头的表达形式；如果不是有效的颜色值，则返回null
            </summary>
            <param name="val"></param>
            <returns>将字符串转换成以井号开头的表达形式；如果不是有效的颜色值，则返回null</returns>
        </member>
        <member name="M:wojilu.cvt.ToBase62(System.Int64)">
            <summary>
            将10进制整数转换为62进制
            </summary>
            <param name="inputNum"></param>
            <returns>62进制数</returns>
        </member>
        <member name="M:wojilu.cvt.ToBase(System.Int64,System.String)">
            <summary>
            将10进制整数转换为n进制
            </summary>
            <param name="inputNum">10进制整数</param>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.cvt.DeBase62(System.String)">
            <summary>
            将62进制转换为10进制整数
            </summary>
            <param name="str">62进制数</param>
            <returns>10进制整数</returns>
        </member>
        <member name="M:wojilu.cvt.DeBase(System.String,System.String)">
            <summary>
            将n进制转换为10进制整数
            </summary>
            <param name="str">需要转换的n进制数</param>
            <param name="chars"></param>
            <returns>10进制整数</returns>
        </member>
        <member name="T:wojilu.Caching.SysCache">
            <summary>
            .net 自带的 InMemory 缓存
            </summary>
        </member>
        <member name="M:wojilu.Caching.SysCache.Get(System.String)">
            <summary>
            从缓存中获取值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Caching.SysCache.Put(System.String,System.Object)">
            <summary>
            将对象放入缓存，如果缓存中已有此项，则替换。a)永不过期，b)优先级为 Normal，c)没有缓存依赖项
            </summary>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:wojilu.Caching.SysCache.Put(System.String,System.Object,System.Int32)">
            <summary>
            将对象放入缓存，在参数 seconds 指定的秒数之后过期
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <param name="seconds"></param>
        </member>
        <member name="M:wojilu.Caching.SysCache.PutSliding(System.String,System.Object,System.Int32)">
            <summary>
            将对象放入缓存，在最后一次访问之后的 seconds 秒数之后过期（弹性过期）
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <param name="seconds"></param>
        </member>
        <member name="M:wojilu.Caching.SysCache.Remove(System.String)">
            <summary>
            从缓存中移除某项
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:wojilu.Caching.SysCache.Clear">
            <summary>
            从缓存中移除所有项
            </summary>
        </member>
        <member name="T:wojilu.Data.DataFactory">
            <summary>
            数据工厂，可以不用考虑数据库差异而获取 Connection, Command, DataAdapter
            </summary>
        </member>
        <member name="M:wojilu.Data.DataFactory.GetConnection(System.String,wojilu.Data.DatabaseType)">
            <summary>
            仅仅创建 connection，没有打开 open 数据库链接
            </summary>
            <param name="connectionString"></param>
            <param name="dbtype"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Data.DataFactory.GetCommand(System.Data.IDbConnection)">
            <summary>
            获取 command，并检查 connection ，如果尚未打开数据库链接 ，则打开 connection 
            </summary>
            <param name="cn"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Data.DataFactory.GetCommand(System.String,System.Data.IDbConnection)">
            <summary>
            获取 command，并检查 connection ，如果尚未打开数据库链接 ，则打开 connection 
            </summary>
            <param name="CommandText"></param>
            <param name="cn"></param>
            <returns></returns>
        </member>
        <member name="T:wojilu.Data.AccessDialect">
            <summary>
            access 特殊语法处理器
            </summary>
        </member>
        <member name="T:wojilu.Data.IDatabaseDialect">
            <summary>
            各种数据库的特殊语法处理接口
            </summary>
        </member>
        <member name="T:wojilu.Data.CacheObject">
            <summary>
            缓存对象，常驻内存，同时以json格式存储在磁盘中
            </summary>
        </member>
        <member name="M:wojilu.Data.CacheObject.findById(System.Int64)">
            <summary>
            根据 id 检索对象
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Data.CacheObject.findAll">
            <summary>
            检索出所有对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Data.CacheObject.findByName(System.String)">
            <summary>
            根据名称检索出对象列表
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Data.CacheObject.findBy(System.String,System.Object)">
            <summary>
            根据属性名，检索出对象
            </summary>
            <param name="propertyName"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Data.CacheObject.insert">
            <summary>
            插入数据：并对所有属性做索引，速度较慢
            </summary>
        </member>
        <member name="M:wojilu.Data.CacheObject.insertByIndex(System.String,System.Object)">
            <summary>
            插入数据：只针对特定属性做索引，提高速度
            </summary>
            <param name="propertyName"></param>
            <param name="pValue"></param>
        </member>
        <member name="M:wojilu.Data.CacheObject.insertByIndex(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            插入数据：针对若干属性做索引
            </summary>
            <param name="dic"></param>
        </member>
        <member name="M:wojilu.Data.CacheObject.update">
            <summary>
            更新数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Data.CacheObject.updateByIndex(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            更新数据：只针对特性数据做索引
            </summary>
            <param name="dic"></param>
        </member>
        <member name="M:wojilu.Data.CacheObject.updateNoIndex">
            <summary>
             不持久化，也不做索引
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Data.CacheObject.delete">
            <summary>
            删除数据
            </summary>
        </member>
        <member name="P:wojilu.Data.CacheObject.Id">
            <summary>
            对象的 id
            </summary>
        </member>
        <member name="P:wojilu.Data.CacheObject.Name">
            <summary>
            对象名称
            </summary>
        </member>
        <member name="T:wojilu.Data.ConnectionItemType">
            <summary>
            数据库连接项的类型
            </summary>
        </member>
        <member name="T:wojilu.Data.DatabaseType">
            <summary>
            wojilu ORM 支持的数据库类型
            </summary>
        </member>
        <member name="T:wojilu.Data.DbContext">
            <summary>
            数据库上下文，主要用于获取数据库连接
            </summary>
        </member>
        <member name="M:wojilu.Data.DbContext.getConnection(System.Type)">
            <summary>
            获取数据库连接，返回的连接已经打开(open)；在 mvc 框架中不用关闭，框架会自动关闭连接。
            之所以要传入 Type，因为 ORM 支持多个数据库，不同的类型有可能映射到不同的数据库。
            </summary>
            <param name="t">实体的类型</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Data.DbContext.getConnection(wojilu.ORM.EntityInfo)">
            <summary>
            获取数据库连接，返回的连接已经打开(open)；在 mvc 框架中不用关闭，框架会自动关闭连接。
            之所以要传入 EntityInfo，因为 ORM 支持多个数据库，不同的类型有可能映射到不同的数据库。
            </summary>
            <param name="et"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Data.DbContext.closeConnectionAll">
            <summary>
            关闭数据库连接。因为ORM支持多个数据库，所以所有可能的数据库连接都会一起关闭。
            </summary>
        </member>
        <member name="M:wojilu.Data.DbContext.getConnectionAll">
            <summary>
            获取所有的数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Data.DbContext.beginTransactionAll">
            <summary>
            针对所有数据库连接，开启数据库事务
            </summary>
        </member>
        <member name="M:wojilu.Data.DbContext.commitAll">
            <summary>
            提交全部的数据库事务
            </summary>
        </member>
        <member name="M:wojilu.Data.DbContext.rollbackAll">
            <summary>
            回滚所有数据库事务
            </summary>
        </member>
        <member name="M:wojilu.Data.DbContext.getSqlCount">
            <summary>
            获取存储在上下文中的 sql 执行次数
            </summary>
            <returns></returns>
        </member>
        <member name="T:wojilu.Data.EasyDB">
            <summary>
            简易数据库操作工具，兼容多种数据库，可执行sql，返回DataReader等
            </summary>
        </member>
        <member name="T:wojilu.Data.MysqlDialect">
            <summary>
            mysql 特殊语法处理器
            </summary>
        </member>
        <member name="T:wojilu.Data.ParameterType">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="T:wojilu.Data.DbFactoryBase">
            <summary>
            数据工厂抽象基类，可以不用考虑数据库差异而获取 Connection, Command, DataAdapter
            </summary>
        </member>
        <member name="T:wojilu.Data.DbTypeChecker">
            <summary>
            检查数据库类型的工具
            </summary>
        </member>
        <member name="T:wojilu.Data.MsSqlDbFactory">
            <summary>
            sqlserver 数据工厂，获取 Connection, Command, DataAdapter
            </summary>
        </member>
        <member name="T:wojilu.Data.MysqlFactory">
            <summary>
            mysql 数据工厂，获取 Connection, Command, DataAdapter
            </summary>
        </member>
        <member name="T:wojilu.Data.AccessFactory">
            <summary>
            access 数据工厂，获取 Connection, Command, DataAdapter
            </summary>
        </member>
        <member name="T:wojilu.Data.OracleFactory">
            <summary>
            oracle 数据工厂，获取 Connection, Command, DataAdapter
            </summary>
        </member>
        <member name="T:wojilu.Data.SQLServerDialect">
            <summary>
            sqlserver 特殊语法处理器
            </summary>
        </member>
        <member name="T:wojilu.HashType">
            <summary>
            常用 hash 算法类型
            </summary>
        </member>
        <member name="T:wojilu.HashTool">
            <summary>
            封装了常用 hash 算法
            </summary>
        </member>
        <member name="T:wojilu.IHashTool">
            <summary>
            封装了常用 hash 算法
            </summary>
        </member>
        <member name="M:wojilu.IHashTool.Get(System.String,wojilu.HashType)">
            <summary>
            根据指定的 hash 算法，加密字符串(比如密码)
            </summary>
            <param name="pwd">需要 hash 的字符串</param>
            <param name="ht">hash 算法类型</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.IHashTool.GetBySalt(System.String,System.String,wojilu.HashType)">
            <summary>
            根据 hash 算法和指定的 salt，加密字符串
            </summary>
            <param name="pwd"></param>
            <param name="salt">指定的 salt</param>
            <param name="ht">hash 算法类型</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.IHashTool.GetRandomPassword(System.Int32)">
            <summary>
            获取随机密码(由英文字母和数字构成)
            </summary>
            <param name="passwordLength">密码长度</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.IHashTool.GetRandomPassword(System.Int32,System.Boolean)">
            <summary>
            获取随机密码(由英文字母和数字构成)
            </summary>
            <param name="passwordLength">密码长度</param>
            <param name="isLower">结果是否小写</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.IHashTool.GetSalt(System.Int32)">
            <summary>
            根据指定长度获取salt
            </summary>
            <param name="size">salt的长度</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.HashTool.Get(System.String,wojilu.HashType)">
            <summary>
            根据指定的 hash 算法，加密字符串(比如密码)
            </summary>
            <param name="pwd">需要 hash 的字符串</param>
            <param name="ht">hash 算法类型</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.HashTool.GetBySalt(System.String,System.String,wojilu.HashType)">
            <summary>
            根据 hash 算法和指定的 salt，加密字符串
            </summary>
            <param name="pwd"></param>
            <param name="salt">指定的 salt</param>
            <param name="ht">hash 算法类型</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.HashTool.GetRandomPassword(System.Int32)">
            <summary>
            获取随机密码(由英文字母和数字构成)
            </summary>
            <param name="passwordLength">密码长度</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.HashTool.GetRandomPassword(System.Int32,System.Boolean)">
            <summary>
            获取随机密码(由英文字母和数字构成)
            </summary>
            <param name="passwordLength">密码长度</param>
            <param name="isLower">结果是否小写</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.HashTool.GetSalt(System.Int32)">
            <summary>
            根据指定长度获取salt
            </summary>
            <param name="size">salt的长度</param>
            <returns></returns>
        </member>
        <member name="T:wojilu.ndb">
            <summary>
            集中了对象的常用 CRUD (读取/插入/更新/删除) 操作方法，非泛型实现。主要用于某些不能使用泛型的场合，不太常用。
            </summary>
        </member>
        <member name="M:wojilu.ndb.findById(System.Type,System.Int64)">
            <summary>
            根据 id 查询对象
            </summary>
            <param name="t">对象的类型</param>
            <param name="id">对象的 id</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ndb.findAll(System.Type)">
            <summary>
            查询 t 类型对象的所有数据
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ndb.find(System.Type,System.String)">
            <summary>
            根据条件查询
            </summary>
            <param name="t"></param>
            <param name="condition">查询对象</param>
            <returns>返回查询对象Query，可以进一步参数化赋值，并得到结果</returns>
        </member>
        <member name="M:wojilu.ndb.findPage(System.Type,System.String)">
            <summary>
            根据查询条件，返回分页数据集合
            </summary>
            <param name="t"></param>
            <param name="condition">查询条件</param>
            <returns>分页数据列表，包括当前页、总记录数、分页条等</returns>
        </member>
        <member name="M:wojilu.ndb.findPage(System.Type,System.String,System.Int32)">
            <summary>
            根据查询条件，返回分页数据集合
            </summary>
            <param name="t"></param>
            <param name="condition">查询条件</param>
            <param name="pageSize">每页数量</param>
            <returns>分页数据列表，包括当前页、总记录数、分页条等</returns>
        </member>
        <member name="M:wojilu.ndb.findBySql(System.Type,System.String)">
            <summary>
            根据 sql 语句，查询对象
            </summary>
            <param name="t"></param>
            <param name="sql"></param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:wojilu.ndb.count(System.Type)">
            <summary>
            统计 t 类型对象的所有数据量
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ndb.count(System.Type,System.String)">
            <summary>
            根据条件统计数据量
            </summary>
            <param name="t"></param>
            <param name="condition">统计条件</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ndb.delete(System.Type,System.Int64)">
            <summary>
            根据 id 删除对象
            </summary>
            <param name="t"></param>
            <param name="objId">对象 id</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="T:wojilu.ObjectBase`1">
            <summary>
            所有ORM中的领域模型都需要继承的基类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:wojilu.IEntity">
            <summary>
            可以被 ORM 持久化的对象，都自动实现了本接口
            </summary>
        </member>
        <member name="M:wojilu.IEntity.get(System.String)">
            <summary>
            获取属性的值(并非通过反射，速度较快)
            </summary>
            <param name="propertyName">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.IEntity.set(System.String,System.Object)">
            <summary>
            设置属性的值(并非通过反射，速度较快)
            </summary>
            <param name="propertyName">属性名称</param>
            <param name="propertyValue">属性的值</param>
        </member>
        <member name="P:wojilu.IEntity.Id">
            <summary>
            每一个持久化对象，都具有一个 Id 属性
            </summary>
        </member>
        <member name="M:wojilu.ObjectBase`1.findAll">
            <summary>
            查询所有数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.ObjectBase`1.findById(System.Int64)">
            <summary>
            根据 id 查询对象
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ObjectBase`1.findOne(System.String)">
            <summary>
            根据查询条件，只返回一条结果
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ObjectBase`1.count">
            <summary>
            统计所有的数据量
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.ObjectBase`1.count(System.String)">
            <summary>
            根据条件统计数据量
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ObjectBase`1.find(System.String)">
            <summary>
            根据查询条件，返回一个查询对象。一般用于参数化查询。
            </summary>
            <param name="condition">查询条件</param>
            <returns>返回查询对象xQuery，可以进一步参数化赋值，并得到结果</returns>
        </member>
        <member name="M:wojilu.ObjectBase`1.findPage(System.String)">
            <summary>
            根据查询条件，返回分页数据集合
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ObjectBase`1.findPage(System.String,System.Int32)">
            <summary>
            根据查询条件和每页数量，返回分页数据集合
            </summary>
            <param name="condition">查询条件</param>
            <param name="pageSize">每页数量</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ObjectBase`1.findBySql(System.String)">
            <summary>
            直接使用 sql 语句查询，返回对象列表
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ObjectBase`1.insert">
            <summary>
            将对象插入数据库
            </summary>
            <returns>返回一个结果对象 Result。如果发生错误，则 Result 中包含错误信息</returns>
        </member>
        <member name="M:wojilu.ObjectBase`1.update">
            <summary>
            更新数据
            </summary>
            <returns>返回一个结果对象 Result。如果发生错误，则 Result 中包含错误信息</returns>
        </member>
        <member name="M:wojilu.ObjectBase`1.update(System.String)">
            <summary>
            只修改对象的某个特定属性
            </summary>
            <param name="propertyName">属性名称</param>
        </member>
        <member name="M:wojilu.ObjectBase`1.update(System.String[])">
            <summary>
            只修改对象的特定属性
            </summary>
            <param name="arrPropertyName">需要修改的属性的数组</param>
        </member>
        <member name="M:wojilu.ObjectBase`1.delete">
            <summary>
            删除对象
            </summary>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:wojilu.ObjectBase`1.updateBatch(System.String,System.String)">
            <summary>
            批量更新对象
            </summary>
            <param name="action">更新的操作</param>
            <param name="condition">更新的条件</param>
        </member>
        <member name="M:wojilu.ObjectBase`1.delete(System.Int64)">
            <summary>
            根据 id 删除对象
            </summary>
            <param name="id"></param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:wojilu.ObjectBase`1.deleteBatch(System.String)">
            <summary>
            批量删除对象
            </summary>
            <param name="condition">删除条件</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:wojilu.ObjectBase`1.get(System.String)">
            <summary>
            根据属性名称获取属性的值
            </summary>
            <param name="propertyName">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ObjectBase`1.set(System.String,System.Object)">
            <summary>
            设置属性的值
            </summary>
            <param name="propertyName">属性名称</param>
            <param name="propertyValue">属性的值</param>
        </member>
        <member name="M:wojilu.ObjectBase`1.getExt(System.String,System.String)">
            <summary>
            获取扩展属性内部某项的值
            </summary>
            <param name="propertyName">扩展属性名称</param>
            <param name="key">扩展属性内部某项的 key</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ObjectBase`1.getExtDic(System.String)">
            <summary>
            获取扩展属性本身的值
            </summary>
            <param name="propertyName">扩展属性名称</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ObjectBase`1.setExt(System.String,System.String,System.String)">
            <summary>
            给扩展属性内部某项赋值
            </summary>
            <param name="propertyName">扩展属性名称</param>
            <param name="key">扩展属性内部某项的 key</param>
            <param name="val">扩展属性内部某项的 val</param>
        </member>
        <member name="M:wojilu.ObjectBase`1.setExtDic(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            给扩展属性本身的赋值
            </summary>
            <param name="propertyName">扩展属性名称</param>
            <param name="dic">扩展属性的值</param>
        </member>
        <member name="M:wojilu.ObjectBase`1.CompareTo(System.Object)">
            <summary>
            排序方法(根据Id大小排序)
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:wojilu.ObjectBase`1.Id">
            <summary>
            对象的 id
            </summary>
        </member>
        <member name="T:wojilu.db">
            <summary>
            wojilu ORM 最主要的工具，集中了对象的常用 CRUD (读取/插入/更新/删除) 操作。主要方法都是泛型方法。
            </summary>
        </member>
        <member name="M:wojilu.db.findAll``1">
            <summary>
            查询 T 类型对象的所有数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:wojilu.db.findById``1(System.Int64)">
            <summary>
            根据 id 查询对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.db.findOne``1(System.String)">
            <summary>
            根据查询条件，只返回一条结果
            </summary>
            <typeparam name="T"></typeparam>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.db.find``1(System.String)">
            <summary>
            根据查询条件，返回一个查询对象。一般用于参数化查询。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="condition">查询条件</param>
            <returns>返回查询对象xQuery，可以进一步参数化赋值，并得到结果</returns>
        </member>
        <member name="M:wojilu.db.findPage``1(System.String)">
            <summary>
            根据查询条件，返回分页数据集合(默认每页返回20条记录)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="condition">查询条件</param>
            <returns>分页数据列表，包括当前页、总记录数、分页条等</returns>
        </member>
        <member name="M:wojilu.db.findPage``1(System.String,System.Int32)">
            <summary>
            根据查询条件、每页数量，返回分页数据集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="condition">查询条件</param>
            <param name="pageSize">每页需要显示的数据量</param>
            <returns>分页数据列表，包括当前页、总记录数、分页条等</returns>
        </member>
        <member name="M:wojilu.db.findPage``1(System.String,System.Int32,System.Int32)">
            <summary>
            根据查询条件、当前页码和每页数量，返回分页数据集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="condition">查询条件</param>
            <param name="current">当前页码</param>
            <param name="pageSize">每页需要显示的数据量</param>
            <returns>分页数据列表，包括当前页、总记录数、分页条等</returns>
        </member>
        <member name="M:wojilu.db.findBySql``1(System.String)">
            <summary>
            根据 sql 语句，返回对象列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.db.insert(System.Object)">
            <summary>
            将对象插入数据库
            </summary>
            <param name="obj"></param>
            <returns>返回一个结果对象 Result。如果发生错误，则 Result 中包含错误信息；如果没有错误，result.Info即是obj</returns>
        </member>
        <member name="M:wojilu.db.update(System.Object)">
            <summary>
            更新对象，并存入数据库
            </summary>
            <param name="obj"></param>
            <returns>返回一个结果对象 Result。如果发生错误，则 Result 中包含错误信息</returns>
        </member>
        <member name="M:wojilu.db.update(System.Object,System.String)">
            <summary>
            只修改对象的某个特定属性
            </summary>
            <param name="obj"></param>
            <param name="propertyName">需要修改的属性名称</param>
        </member>
        <member name="M:wojilu.db.update(System.Object,System.String[])">
            <summary>
            只修改对象的特定属性
            </summary>
            <param name="obj"></param>
            <param name="arrPropertyName">需要修改的属性的数组</param>
        </member>
        <member name="M:wojilu.db.updateBatch``1(System.String,System.String)">
            <summary>
            根据条件批量更新对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action">更新的操作</param>
            <param name="condition">更新的条件</param>
        </member>
        <member name="M:wojilu.db.delete(System.Object)">
            <summary>
            删除数据
            </summary>
            <param name="obj"></param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:wojilu.db.delete``1(System.Int64)">
            <summary>
            根据 id 删除数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">对象的 id</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:wojilu.db.deleteBatch``1(System.String)">
            <summary>
            根据条件批量删除数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="condition">删除条件</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:wojilu.db.count``1">
            <summary>
            统计对象的所有数目
            </summary>
            <typeparam name="T"></typeparam>
            <returns>对象数量</returns>
        </member>
        <member name="M:wojilu.db.count``1(System.String)">
            <summary>
            根据条件统计对象的所有数目
            </summary>
            <typeparam name="T"></typeparam>
            <param name="condition">统计条件</param>
            <returns>对象数量</returns>
        </member>
        <member name="M:wojilu.db.RunReader``1(System.String)">
            <summary>
            根据 sql 语句查询 T 所在的数据库，返回一个 IDataReader
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <returns>返回一个 IDataReader</returns>
        </member>
        <member name="M:wojilu.db.RunReader(System.String)">
            <summary>
            根据 sql 语句查询默认数据库，返回一个 IDataReader
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.db.RunScalar``1(System.String)">
            <summary>
            根据 sql 语句查询 T 所在的数据库，返回单行单列数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <returns>返回单行单列数据</returns>
        </member>
        <member name="M:wojilu.db.RunScalar(System.String)">
            <summary>
            根据 sql 语句查询默认数据库，返回单行单列数据
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.db.RunSql``1(System.String)">
            <summary>
            在 T 类型对应的数据库上，执行 sql 语句。同时根据类型 T 自动更新缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
        </member>
        <member name="M:wojilu.db.RunSql(System.String)">
            <summary>
            在默认数据库上，执行 sql 语句。不会更新缓存
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:wojilu.db.RunTable``1(System.String)">
            <summary>
            根据 sql 语句查询 T 所在的数据库，返回一个 DataTable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.db.RunTable(System.String)">
            <summary>
            根据 sql 语句，查询默认数据库，返回一个 DataTable
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.db.getConnection">
            <summary>
            获取默认的数据库连接(default)，需要自己管理Open和Close
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.db.getConnection(System.String)">
            <summary>
            获取数据库连接，需要自己管理Open和Close
            </summary>
            <param name="dbName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.db.getConnection(System.Type)">
            <summary>
            获取数据库连接，需要自己管理Open和Close
            </summary>
            <param name="dataType">实体的类型</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.db.getCommand(System.String)">
            <summary>
            获取一个数据库 Command。如果尚未打开connection，则自动打开。
            </summary>
            <param name="CommandText"></param>
            <param name="cn"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.db.getCommand(System.String,System.String)">
            <summary>
            获取一个数据库 Command。如果尚未打开connection，则自动打开。
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.db.getCommand(System.Data.IDbConnection,System.String)">
            <summary>
            获取一个数据库 Command。如果尚未打开connection，则自动打开。
            </summary>
            <param name="cn"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.db.getCommand(System.Type,System.String)">
            <summary>
            获取一个数据库 Command。如果尚未打开connection，则自动打开。
            </summary>
            <param name="dataType"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.db.getConnectionString">
            <summary>
            获取默认数据库的ConnectionString
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.db.getConnectionString(System.String)">
            <summary>
            获取数据库的ConnectionString
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.db.getDatabaseType(System.String)">
            <summary>
            获取数据库类型
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.db.getDatabaseType">
            <summary>
            获取默认数据库类型
            </summary>
            <returns></returns>
        </member>
        <member name="P:wojilu.db.nocache">
            <summary>
            返回一个不经过缓存的查询工具，用于直接从数据库检索数据
            </summary>
        </member>
        <member name="T:wojilu.Dictionary">
            <summary>
            根据插入先后次序排序的 Hashtable
            </summary>
        </member>
        <member name="M:wojilu.Dictionary.Add(System.Object,System.Object)">
            <summary>
            将键值插入字典
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:wojilu.Dictionary.Set(System.Object,System.Object)">
            <summary>
            设置字典的键值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:wojilu.Dictionary.Clear">
            <summary>
            清楚所有数据
            </summary>
        </member>
        <member name="M:wojilu.Dictionary.Remove(System.Object)">
            <summary>
            删除某项
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:wojilu.Dictionary.Get(System.Int32)">
            <summary>
            根据 index 获取某项数据
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:wojilu.Dictionary.Keys">
            <summary>
            获取所有的 key（按照插入次序排序）
            </summary>
        </member>
        <member name="T:wojilu.Drawing.Img">
            <summary>
            图片常用操作
            </summary>
        </member>
        <member name="M:wojilu.Drawing.Img.DeleteImgAndThumb(System.String)">
            <summary>
            删除图片以及缩略图。如果图片不存在，则忽略
            </summary>
            <param name="srcPath">相对网址</param>
        </member>
        <member name="M:wojilu.Drawing.Img.DeleteImgAndThumb(System.String,System.Collections.Generic.Dictionary{System.String,wojilu.Drawing.ThumbInfo})">
            <summary>
            删除图片以及指定类型的缩略图。如果图片不存在，则忽略
            </summary>
            <param name="srcPath">相对网址</param>
            <param name="arrThumbType">多个缩略图类型</param>
        </member>
        <member name="M:wojilu.Drawing.Img.DeleteFile(System.String)">
            <summary>
            彻底删除磁盘文件
            </summary>
            <param name="srcPath">相对路径</param>
        </member>
        <member name="M:wojilu.Drawing.Img.GetPhotoName(System.String,System.String)">
            <summary>
            获取图片的随机文件名(会添加日期文件夹和随机文件名)，比如 2009/9/28/1530703343314547.jpg
            </summary>
            <remarks>如果日期文件夹不存在，则在磁盘上自动创建文件夹</remarks>
            <param name="pathName">图片存储的绝对路径</param>
            <param name="strContentType">图片类型</param>
            <returns>返回图片名称，包括所在文件夹，比如 2009/9/28/1530703343314547.jpg</returns>
        </member>
        <member name="M:wojilu.Drawing.Img.GetPhotoAbsName(System.String)">
            <summary>
            获取上传文件(图片或其他类型)的随机文件名。
            <para>返回完整绝对路径，比如 d:\www\static\upload\image\2009\9\28\1530703343314547.zip</para>
            </summary>
            <param name="ext">文件类型，比如 jpg 或者 png</param>
            <returns>返回完整绝对路径，比如 d:\www\static\upload\image\2009\9\28\1530703343314547.zip</returns>
        </member>
        <member name="M:wojilu.Drawing.Img.GetPhotoName(System.String)">
            <summary>
            获取上传文件(图片或其他类型)的随机文件名。
            <para>返回 2009/9/28/1530703343314547.jpg 类似格式。</para> 
            <para>如果文件夹不存在，则自动创建。</para> 
            </summary>
            <remarks>如果日期文件夹不存在，则在磁盘上自动创建文件夹，存放在 sys.Path.DiskPhoto 中</remarks>
            <param name="ext">文件类型，比如 jpg 或者 png</param>
            <returns>返回文件名称，包括所在文件夹，比如 2009/9/28/1530703343314547.zip</returns>
        </member>
        <member name="M:wojilu.Drawing.Img.GetFileName(System.String,System.String)">
            <summary>
            获取文件的随机文件名(会添加日期文件夹和随机文件名)，比如 2009/9/28/1530703343314547.zip
            </summary>
            <remarks>如果日期文件夹不存在，则在磁盘上自动创建文件夹</remarks>
            <param name="absPath">存储的绝对路径，比如 PathHelper.Map( sys.Path.DiskPhoto )</param>
            <param name="fileExt">文件类型，比如 jpg 或者 png</param>
            <returns>返回文件名称，包括所在文件夹，比如 2009/9/28/1530703343314547.zip</returns>
        </member>
        <member name="M:wojilu.Drawing.Img.GetOriginalPath(System.String)">
            <summary>
            根据缩略图名称，获取原始图片名称
            </summary>
            <param name="thumbPath"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Drawing.Img.GetThumbPath(System.Object)">
            <summary>
            根据原始图片名称，获取缩略图名称(最小的缩略图)
            </summary>
            <param name="srcPath"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Drawing.Img.GetThumbPath(System.Object,wojilu.Drawing.ThumbnailType)">
            <summary>
            根据原始图片名称和缩略图类型，获取缩略图名称
            </summary>
            <param name="srcPath"></param>
            <param name="ttype"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Drawing.Img.GetThumbPath(System.Object,System.String)">
            <summary>
            根据原始图片名称和缩略图后缀(_s或_m等)，获取缩略图名称
            </summary>
            <param name="srcPath"></param>
            <param name="suffix">请勿添加下划线，系统会自动添加</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Drawing.Img.SaveThumbnail(System.String,System.String,System.Int32)">
            <summary>
            保存缩略图到磁盘(可指定宽度，默认自动缩放)
            </summary>
            <param name="srcPath"></param>
            <param name="destPath"></param>
            <param name="width"></param>
        </member>
        <member name="M:wojilu.Drawing.Img.SaveThumbnail(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            保存缩略图到磁盘(可指定宽高，默认自动缩放)
            </summary>
            <param name="srcPath"></param>
            <param name="destPath"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:wojilu.Drawing.Img.SaveThumbnail(System.String,System.String,System.Int32,System.Int32,wojilu.Drawing.SaveThumbnailMode)">
            <summary>
            保存缩略图到磁盘(可指定宽高，可指定缩放模式)
            </summary>
            <param name="srcPath"></param>
            <param name="destPath"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="mode"></param>
        </member>
        <member name="M:wojilu.Drawing.Img.GetPhotoSize(System.String)">
            <summary>
            根据图片绝对路径，获取图片的大小
            </summary>
            <param name="absPhotoPath"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Drawing.Img.getTargetSize(System.Int32,System.Int32,wojilu.Drawing.SaveThumbnailMode,System.Drawing.Image)">
            <summary>
            获取缩略图尺寸
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="mode"></param>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Drawing.Img.GetImageExt(System.String)">
            <summary>
            获取图片的后缀名(不包括点号)
            </summary>
            <param name="strContentType"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Drawing.Img.GetImageType(System.String)">
            <summary>
            获取图片的类型
            </summary>
            <param name="strContentType"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Drawing.Img.CopyToUploadPath(System.String)">
            <summary>
            将图片拷贝到上传目录中，并生成中、小缩略图
            </summary>
            <param name="oPath">原始相对路径</param>
            <returns>返回图片名称，包括所在文件夹，比如 2009/9/28/1530703343314547.jpg</returns>
        </member>
        <member name="T:wojilu.Drawing.SaveThumbnailMode">
            <summary>
            缩略图缩小方式(自动、根据宽度、根据高度、根据宽高、裁切)
            </summary>
        </member>
        <member name="T:wojilu.Drawing.ThumbnailType">
            <summary>
            缩略图大小类型(小、中等、大)
            </summary>
        </member>
        <member name="T:wojilu.Drawing.ThumbSize">
            <summary>
            缩略图尺寸
            </summary>
        </member>
        <member name="T:wojilu.Drawing.ValidationCode">
            <summary>
            验证码工具
            </summary>
        </member>
        <member name="M:wojilu.Drawing.ValidationCode.CreateImage(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            创建验证码，返回一个 Image 对象
            </summary>
            <param name="code"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="fontFamily"></param>
            <returns></returns>
        </member>
        <member name="T:wojilu.Drawing.Watermark">
            <summary>
            水印工具
            </summary>
        </member>
        <member name="M:wojilu.Drawing.Watermark.MakeByPic(System.String,System.String,System.String,wojilu.Drawing.WatermarkPosition)">
            <summary>
            将原始图片添加图片水印之后存储
            </summary>
            <param name="srcPath"></param>
            <param name="savePath"></param>
            <param name="watermarkPath"></param>
            <param name="wp"></param>
        </member>
        <member name="M:wojilu.Drawing.Watermark.MakeByText(System.String,System.String,System.String,wojilu.Drawing.WatermarkPosition,System.Int32)">
            <summary>
            将原始图片添加文字水印之后存储
            </summary>
            <param name="srcPath"></param>
            <param name="savePath"></param>
            <param name="words"></param>
            <param name="wp"></param>
            <param name="fontSize"></param>
        </member>
        <member name="T:wojilu.Drawing.FontAndSize">
            <summary>
            字体尺寸
            </summary>
        </member>
        <member name="T:wojilu.Drawing.WatermarkPosition">
            <summary>
            水印位置(上面左部、上面中部、上面右部、下面左部、下面中部、下面右部)
            </summary>
        </member>
        <member name="T:wojilu.Editor">
            <summary>
            在 web 中使用的富文本编辑器
            </summary>
        </member>
        <member name="M:wojilu.Editor.AddUploadUrl(wojilu.Web.Context.MvcContext)">
            <summary>
            设置图片上传网址
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:wojilu.Editor.ToString">
            <summary>
            编辑器生成的js和html内容
            </summary>
            <returns></returns>
        </member>
        <member name="P:wojilu.Editor.UploadUrl">
            <summary>
            图片上传网址
            </summary>
        </member>
        <member name="P:wojilu.Editor.MyPicsUrl">
            <summary>
            当前用户的所有图片的网址
            </summary>
        </member>
        <member name="P:wojilu.Editor.ControlName">
            <summary>
            编辑器名称
            </summary>
        </member>
        <member name="P:wojilu.Editor.EditorPath">
            <summary>
            编辑器文件(js、css、图片等)所在路径
            </summary>
        </member>
        <member name="P:wojilu.Editor.Height">
            <summary>
            高度
            </summary>
        </member>
        <member name="P:wojilu.Editor.Toolbar">
            <summary>
            工具栏类型
            </summary>
        </member>
        <member name="P:wojilu.Editor.Width">
            <summary>
            宽度，默认是父容器的100%
            </summary>
        </member>
        <member name="P:wojilu.Editor.Content">
            <summary>
            需要编辑的内容(html格式)
            </summary>
        </member>
        <member name="P:wojilu.Editor.EditVarName">
            <summary>
            编辑器名称。在其他页面和编辑器页面进行交互的时候，需要这个名称。
            </summary>
        </member>
        <member name="T:wojilu.Editor.ToolbarType">
            <summary>
            工具栏类型
            </summary>
        </member>
        <member name="F:wojilu.Editor.ToolbarType.Basic">
            <summary>
            基本按钮
            </summary>
        </member>
        <member name="F:wojilu.Editor.ToolbarType.Full">
            <summary>
            全部按钮
            </summary>
        </member>
        <member name="T:wojilu.DI.MapItem">
            <summary>
            依赖注入中的配置项
            </summary>
        </member>
        <member name="P:wojilu.DI.MapItem.Singleton">
            <summary>
            容器创建对象的时候，是否以单例模式返回
            </summary>
        </member>
        <member name="P:wojilu.DI.MapItem.Map">
            <summary>
            对象依赖注入关系的 map
            </summary>
        </member>
        <member name="P:wojilu.DI.MapItem.Type">
            <summary>
            对象的 typeFullName
            </summary>
        </member>
        <member name="T:wojilu.ObjectContext">
            <summary>
            管理对象 Object 的容器。
            1. 保存了所有纳入容器的类型 Type。
            2. 将 Object 进行 Aop 拦截和 Ioc 注入处理。
            </summary>
        </member>
        <member name="M:wojilu.ObjectContext.GetType(System.String)">
            <summary>
            根据名称获取类型 t
            </summary>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ObjectContext.GetByName(System.String)">
            <summary>
            根据依赖注入的配置文件中的 name 获取对象。根据配置属性Singleton决定是否单例。
            </summary>
            <param name="objectName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ObjectContext.GetByType(System.String)">
            <summary>
            从缓存中取对象(经过Aop和Ioc处理)，结果是单例
            </summary>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ObjectContext.GetByType(System.Type)">
            <summary>
            从缓存中取对象(经过Aop和Ioc处理)，结果是单例
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ObjectContext.Create``1">
            <summary>
            创建一个经过Aop和Ioc处理的对象，结果不是单例。
            如果需要拦截，则创建代理子类；然后检测是否需要注入。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:wojilu.ObjectContext.Create(System.String)">
            <summary>
            创建一个经过Aop和Ioc处理的对象，结果不是单例。
            如果需要拦截，则创建代理子类；然后检测是否需要注入。
            </summary>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ObjectContext.Create(System.Type)">
            <summary>
            创建一个经过Aop和Ioc处理的对象，结果不是单例。
            如果需要拦截，则创建代理子类；然后检测是否需要注入。
            </summary>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ObjectContext.CreateObject(System.Type)">
            <summary>
            创建一个经过Aop和Ioc处理的对象，结果不是单例。
            如果需要拦截，则创建代理子类；然后检测是否需要注入。
            </summary>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ObjectContext.CreateObject(System.Type,System.Object)">
            <summary>
            创建一个经过Aop和Ioc处理的对象，结果不是单例。
            如果需要拦截，则创建代理子类；然后检测是否需要注入。
            </summary>
            <param name="targetType"></param>
            <param name="invokerName">如果是根据接口自动装配，</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ObjectContext.Create``1(System.Type)">
            <summary>
            根据接口创建代理类，并经过注入处理。
            如果无法创建接口代理，则返回未经代理，但注入过的对象。
            </summary>
            <typeparam name="T">接口类型</typeparam>
            <param name="targetType">需要代理的类型</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ObjectContext.Create(System.Type,System.Type)">
            <summary>
            根据接口创建代理类，并经过注入处理。
            如果无法创建接口代理，则返回未经代理，但注入过的对象。
            </summary>
            <param name="targetType">需要代理的类型</param>
            <param name="interfaceType">接口类型</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ObjectContext.Create``1(System.Object)">
            <summary>
            根据接口创建实例。如果没有在MapItem中指定，则自动装配。
            </summary>
            <typeparam name="InterfaceType">接口类型</typeparam>
            <param name="invoker">调用者，供map注入使用。要求在map中唯一，推荐当前对象或type</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ObjectContext.CreateByInterface(System.Type,System.Object)">
            <summary>
            根据接口创建实例。如果没有在MapItem中指定，则自动装配。
            </summary>
            <param name="t"></param>
            <param name="invokerName">调用者，供map注入使用。要求在map中唯一，推荐当前对象或type</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ObjectContext.createInstanceAndInject(wojilu.DI.MapItem,System.Object)">
            <summary>
            IOC注入：检查对象的属性，根据配置注入，如果没有配置，则自动装配
            </summary>
            <param name="mapItem"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ObjectContext.InterceptProperty(System.Object)">
            <summary>
            用Aop拦截所有属性对象。
            如果属性有接口，按照接口拦截；否则按照子类拦截
            </summary>
            <param name="objTarget"></param>
        </member>
        <member name="M:wojilu.ObjectContext.LoadAssembly(System.String)">
            <summary>
            加载程序集并返回此程序集，如果容器中已存在，则直接从容器中获取
            </summary>
            <param name="asmName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ObjectContext.FindTypes(System.String)">
            <summary>
            加载某程序集里的所有类型，如果容器中已存在，则直接从容器中获取
            </summary>
            <param name="asmName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ObjectContext.Inject(System.Object)">
            <summary>
            根据容器配置(IOC)，将依赖关系注入到已创建的对象中
            </summary>
            <param name="obj"></param>
        </member>
        <member name="P:wojilu.ObjectContext.Instance">
            <summary>
            容器的实例(单例)
            </summary>
        </member>
        <member name="P:wojilu.ObjectContext.AssemblyList">
            <summary>
            所有纳入容器管理的程序集
            </summary>
        </member>
        <member name="P:wojilu.ObjectContext.AssemblyTypes">
            <summary>
            所有程序集的 Dictionary
            </summary>
        </member>
        <member name="P:wojilu.ObjectContext.ResolvedMap">
            <summary>
            已经解析过的类型
            </summary>
        </member>
        <member name="P:wojilu.ObjectContext.TypeList">
            <summary>
            所有纳入容器管理的类型
            </summary>
        </member>
        <member name="P:wojilu.ObjectContext.LowerTypeList">
            <summary>
            所有纳入容器管理的类型(小写)
            </summary>
        </member>
        <member name="P:wojilu.ObjectContext.ObjectsByName">
            <summary>
            根据名称罗列的对象表
            </summary>
        </member>
        <member name="P:wojilu.ObjectContext.ObjectsByType">
            <summary>
            根据类型罗列的对象表，用于存储单例对象
            </summary>
        </member>
        <member name="P:wojilu.ObjectContext.DtoList">
            <summary>
            获取所有的dto(工厂)，用于创建dto对象
            </summary>
        </member>
        <member name="T:wojilu.file">
            <summary>
            封装了文件常用操作方法
            </summary>
        </member>
        <member name="T:wojilu.IO.File">
            <summary>
            封装了文件常用操作方法
            </summary>
        </member>
        <member name="M:wojilu.IO.File.Read(System.String)">
            <summary>
            读取文件的内容(采用UTF8编码)
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <returns>文件的内容</returns>
        </member>
        <member name="M:wojilu.IO.File.Read(System.String,System.Text.Encoding)">
            <summary>
            以某种编码方式，读取文件的内容
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <param name="encoding">编码方式</param>
            <returns>文件的内容</returns>
        </member>
        <member name="M:wojilu.IO.File.ReadAllLines(System.String)">
            <summary>
            读取文件各行内容(采用UTF8编码)，以数组形式返回
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <returns>文件各行内容</returns>
        </member>
        <member name="M:wojilu.IO.File.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>
            以某种编码方式，读取文件各行内容(采用UTF8编码)，以数组形式返回
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <param name="encoding">编码方式</param>
            <returns>文件各行内容</returns>
        </member>
        <member name="M:wojilu.IO.File.Write(System.String,System.String)">
            <summary>
            将字符串写入某个文件中(采用UTF8编码)
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <param name="fileContent">需要写入文件的字符串</param>
        </member>
        <member name="M:wojilu.IO.File.Write(System.String,System.String,System.Text.Encoding)">
            <summary>
            将字符串写入某个文件中(需要指定文件编码方式)
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <param name="fileContent">需要写入文件的字符串</param>
            <param name="encoding">编码方式</param>
        </member>
        <member name="M:wojilu.IO.File.Delete(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
        </member>
        <member name="M:wojilu.IO.File.Exists(System.String)">
            <summary>
            判断文件是否存在
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.IO.File.Move(System.String,System.String)">
            <summary>
            移动文件
            </summary>
            <param name="sourceFileName">原来的路径</param>
            <param name="destFileName">需要挪到的新路径</param>
        </member>
        <member name="M:wojilu.IO.File.Copy(System.String,System.String)">
            <summary>
            拷贝文件(如果目标存在，不覆盖)
            </summary>
            <param name="sourceFileName">原来的路径</param>
            <param name="destFileName">需要挪到的新路径</param>
        </member>
        <member name="M:wojilu.IO.File.Copy(System.String,System.String,System.Boolean)">
            <summary>
            拷贝文件
            </summary>
            <param name="sourceFileName">原来的路径</param>
            <param name="destFileName">需要挪到的新路径</param>
            <param name="overwrite">如果目标存在，是否覆盖</param>
        </member>
        <member name="M:wojilu.IO.File.CopyDirectory(System.String,System.String,System.Boolean)">
            <summary>
            拷贝文件夹
            <see cref="!:http://msdn.microsoft.com/en-us/library/bb762914.aspx"/>
            </summary>
            <param name="sourceDirName">源目录</param>
            <param name="destDirName">目标目标，如果不存在，则创建</param>
            <param name="copySubDirs">是否拷贝子目录</param>
        </member>
        <member name="M:wojilu.IO.File.Append(System.String,System.String)">
            <summary>
            将内容追加到文件中(采用UTF8编码)
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <param name="fileContent">需要追加的内容</param>
        </member>
        <member name="M:wojilu.IO.File.Append(System.String,System.String,System.Text.Encoding)">
            <summary>
            将内容追加到文件中
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <param name="fileContent">需要追加的内容</param>
            <param name="encoding">编码方式</param>
        </member>
        <member name="T:wojilu.alang">
            <summary>
            获取某个 app 的语言包
            </summary>
        </member>
        <member name="M:wojilu.alang.get(System.Type,System.String)">
            <summary>
            根据 app 的类型 t 获取某 key 的语言值
            </summary>
            <param name="t">app 的类型</param>
            <param name="key">语言 key</param>
            <returns></returns>
        </member>
        <member name="T:wojilu.lang">
            <summary>
            语言包工具，用于加载多国语言。
            </summary>
            <remarks>
            默认语言包文件存放在 /framework/lang/ 中，比如 /framework/lang/zh-cn/ 。只要在 /framework/lang/  中新增一个语言包文件夹，则系统将其作为语言包列表自动加载。可添加的语言包名称包括：en-us,en-gb,zh-cn,zh-tw,ja,ko,fr,de,it
            </remarks>
        </member>
        <member name="M:wojilu.lang.getLangString">
            <summary>
            获取当前语言字符(比如 zh-cn，或 en-us)
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.lang.get(System.String)">
            <summary>
            获取某 key 的语言值(从 core.config 中获取)
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.lang.getCoreLang">
            <summary>
            获取在 core.config 中定义的核心语言包
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.lang.getByApp(System.Type)">
            <summary>
            根据类型 t 获取语言列表
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.lang.GetSupportedLang">
            <summary>
            获取所有支持的语言包
            </summary>
            <returns></returns>
        </member>
        <member name="T:wojilu.LanguageSetting">
            <summary>
            某个语言包配置文件的内容，包括一个名称和一个语言包的 Dictionary
            </summary>
        </member>
        <member name="M:wojilu.LanguageSetting.get(System.String)">
            <summary>
            根据 key 获取语言值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.LanguageSetting.getLangMap">
            <summary>
            获取语言的键值对 Dictionary
            </summary>
            <returns></returns>
        </member>
        <member name="T:wojilu.ILog">
            <summary>
            日志接口
            </summary>
        </member>
        <member name="T:wojilu.IPageList">
            <summary>
            分页后的结果集
            </summary>
        </member>
        <member name="P:wojilu.IPageList.Results">
            <summary>
            当前页的数据列表
            </summary>
        </member>
        <member name="P:wojilu.IPageList.RecordCount">
            <summary>
            所有记录数
            </summary>
        </member>
        <member name="P:wojilu.IPageList.PageCount">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:wojilu.IPageList.Size">
            <summary>
            每页数
            </summary>
        </member>
        <member name="P:wojilu.IPageList.Current">
            <summary>
            当前页码
            </summary>
        </member>
        <member name="P:wojilu.IPageList.PageBar">
            <summary>
            已经封装好的html分页栏
            </summary>
        </member>
        <member name="T:wojilu.Common.LoginTime">
            <summary>
            用户登录状态保持时间
            </summary>
        </member>
        <member name="T:wojilu.LogManager">
            <summary>
            日志管理对象，通常用于获取日志工具
            </summary>
            <example>
            一般在类的第一行定义
            <code>
            private static readonly ILog logger = LogManager.GetLogger( typeof( ObjectBase ) );
            </code>
            然后可以在其他方法中使用
            <code>
            logger.Info( "your message" );
            </code>
            </example>
        </member>
        <member name="M:wojilu.LogManager.GetLogger(System.Type)">
            <summary>
            获取一个日志工具
            </summary>
            <param name="type">对象类型</param>
            <returns>返回日志工具</returns>
        </member>
        <member name="M:wojilu.LogManager.GetLogger(System.String)">
            <summary>
            获取一个日志工具
            </summary>
            <param name="typeName">对象类型</param>
            <returns>返回日志工具</returns>
        </member>
        <member name="M:wojilu.LogManager.Flush">
            <summary>
            立即将日志内容写入磁盘(在 web 中，日志是在页面请求结束的时候才一起写入到磁盘的)
            </summary>
        </member>
        <member name="T:wojilu.Log.FileLogger">
            <summary>
            文件日志工具，所有日志会被写入磁盘
            </summary>
        </member>
        <member name="T:wojilu.Log.ILogMsg">
            <summary>
            日志信息接口
            </summary>
        </member>
        <member name="T:wojilu.Log.LoggerForDB">
            <summary>
            存储到数据库的日志(尚未实现，请勿使用)
            </summary>
        </member>
        <member name="T:wojilu.Log.LoggerUtil">
            <summary>
            日志处理工具
            </summary>
        </member>
        <member name="F:wojilu.Log.LoggerUtil.SqlPrefix">
            <summary>
            sql 日志的前缀
            </summary>
        </member>
        <member name="M:wojilu.Log.LoggerUtil.LogSqlCount">
            <summary>
            在 web 系统中，记录 sql 执行的次数
            </summary>
        </member>
        <member name="M:wojilu.Log.LoggerUtil.WriteFile(wojilu.Log.ILogMsg)">
            <summary>
            将日志写入磁盘
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:wojilu.Log.LoggerUtil.Flush">
            <summary>
            将所有日志即可写入磁盘
            </summary>
        </member>
        <member name="T:wojilu.Log.LogMessage">
            <summary>
            日志信息
            </summary>
        </member>
        <member name="T:wojilu.Log.LogMsg">
            <summary>
            日志信息(尚未实现，请勿使用)
            </summary>
        </member>
        <member name="T:wojilu.Log.NullLogger">
            <summary>
            使用 null 模式的日志工具
            </summary>
        </member>
        <member name="T:wojilu.Net.ISuccessCallback">
            <summary>
            邮件发送成功之后执行的方法
            </summary>
        </member>
        <member name="M:wojilu.Net.ISuccessCallback.SuccessRun">
            <summary>
            邮件发送成功之后执行的方法
            </summary>
        </member>
        <member name="T:wojilu.Net.MailClient">
            <summary>
            邮件发送服务(如果因为网络不通等原因发送失败，则会自动记录日志)
            </summary>
            <example>
            使用说明
            <code>
            MailService.Init( "smtp.gmail.com", "aaa@gmail.com", "123456" )
                .SetSender( "岳不群" ); // 此行(即发送人)可省略
                .Send( "aaa@126.com", "岳老二的邮件标题", "此处内容，此处<strong style='color:red;font-size:36px;'>html部分</strong>"
            </code>
            </example>
        </member>
        <member name="M:wojilu.Net.MailClient.#ctor(System.String,System.String,System.String)">
            <summary>
            创建一个发送对象
            </summary>
            <param name="smtpUrl">smtp 地址</param>
            <param name="user">登录名</param>
            <param name="pwd">密码</param>
        </member>
        <member name="M:wojilu.Net.MailClient.Init">
            <summary>
            根据网站配置(site.config)中的smtp网址、用户名、密码等，进行初始化
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Net.MailClient.Init(System.String,System.String,System.String)">
            <summary>
            根据smtp网址、用户名、密码等，进行初始化
            </summary>
            <param name="smtpUrl">smtp 地址</param>
            <param name="user">登录名</param>
            <param name="pwd">密码</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Net.MailClient.SetSmtp(System.String,System.String,System.String)">
            <summary>
            初始化 smtp 服务器、用户、密码
            </summary>
            <param name="smtpUrl">smtp 地址</param>
            <param name="user">登录名</param>
            <param name="pwd">密码</param>
        </member>
        <member name="M:wojilu.Net.MailClient.EnableSsl(System.Boolean)">
            <summary>
            是否启用 ssl 链接(默认是启用的)
            </summary>
            <param name="isSsl"></param>
        </member>
        <member name="M:wojilu.Net.MailClient.IsBodyHtml(System.Boolean)">
            <summary>
            默认启用 html
            </summary>
            <param name="isHtml"></param>
        </member>
        <member name="M:wojilu.Net.MailClient.PriorityHight">
            <summary>
            设置高优先级
            </summary>
        </member>
        <member name="M:wojilu.Net.MailClient.PriorityLow">
            <summary>
            设置低优先级
            </summary>
        </member>
        <member name="M:wojilu.Net.MailClient.PriorityNormal">
            <summary>
            设置普通优先级
            </summary>
        </member>
        <member name="M:wojilu.Net.MailClient.SetSender(System.String)">
            <summary>
            设置发送者名称
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:wojilu.Net.MailClient.SuccessCallback(wojilu.Net.ISuccessCallback)">
            <summary>
            设置发送成功之后执行的方法
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:wojilu.Net.MailClient.Send(System.String,System.String,System.String)">
            <summary>
            发送 Email
            </summary>
            <param name="to">接收方的email</param>
            <param name="title">邮件标题</param>
            <param name="htmlBody">邮件内容</param>
            <returns>Result.IsValid是否成功</returns>
        </member>
        <member name="T:wojilu.Net.PageLoader">
            <summary>
            下载某个网址的页面内容(默认编码方式为 WebResponse 返回的 ContentType 属性)
            </summary>
            <remarks>更复杂的操作，请使用 .net 自带的 System.Net.HttpWebRequest 对象</remarks>
            <example>
            用默认编码方式(即 WebResponse 返回的 ContentType 属性)抓取页面内容
            <code>
            String pageContent = PageLoader.DownloadPage( "http://www.google.com" );
            </code>
            指定编码
            <code>
            String pageContent = PageLoader.DownloadPage( "http://www.google.com", "utf-8" );
            </code>
            指定编码和客户端信息
            <code>
            String pageContent = PageLoader.DownloadPage( "http://www.google.com", "wojilu spider", "utf-8" );
            </code>
            </example>
        </member>
        <member name="M:wojilu.Net.PageLoader.Download">
            <summary>
            开始下载页面内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Net.PageLoader.Download(System.String)">
            <summary>
            下载某个网址的页面内容
            </summary>
            <param name="url">网址</param>
            <returns>返回页面内容</returns>
        </member>
        <member name="M:wojilu.Net.PageLoader.Download(System.String,System.String)">
            <summary>
            下载某个网址的页面内容
            </summary>
            <param name="url">网址</param>
            <param name="agentInfo">客户端信息</param>
            <returns>返回页面内容</returns>
        </member>
        <member name="M:wojilu.Net.PageLoader.Download(System.String,System.String,System.String)">
            <summary>
            下载某个网址的页面内容
            </summary>
            <param name="url">网址</param>
            <param name="agentInfo">客户端信息</param>
            <param name="encoding">页面编码，不区分大小写，比如 utf-8, gb2312, Unicode</param>
            <returns>返回页面内容</returns>
        </member>
        <member name="M:wojilu.Net.PageLoader.GetBody(System.String,System.String)">
            <summary>
            抓取某网址的页面内容，然后使用正则表达式过滤，返回匹配的部分
            </summary>
            <param name="url">网址</param>
            <param name="bodyPattern">正则表达式</param>
            <returns>返回匹配的部分</returns>
        </member>
        <member name="M:wojilu.Net.PageLoader.ProcessPic(System.String,System.String)">
            <summary>
            将页面中的图片下载到本地，返回经过替换的页面内容。图片存储路径 /static/upload/wimg/2009/9/18/20552283166069276.jpg
            </summary>
            <param name="pageBody">网页内容</param>
            <param name="siteUrl">如果图片是相对路径，则需要提供url。如果没有，请传入null</param>
            <returns>返回经过替换的页面内容</returns>
        </member>
        <member name="M:wojilu.Net.PageLoader.DownloadPic(System.String)">
            <summary>
            抓取远程图片，保存到服务器
            </summary>
            <param name="picUrl">图片网址，必须http开头</param>
            <returns>返回从根目录/开始的图片路径</returns>
        </member>
        <member name="P:wojilu.Net.PageLoader.AgentInfo">
            <summary>
            客户端信息，默认是Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)
            </summary>
        </member>
        <member name="P:wojilu.Net.PageLoader.PageEncoding">
            <summary>
            页面编码(默认是Encoding.Default)，不区分大小写，比如 utf-8, gb2312, Unicode
            </summary>
        </member>
        <member name="P:wojilu.Net.PageLoader.Url">
            <summary>
            需要下载内容的网址
            </summary>
        </member>
        <member name="T:wojilu.ORM.EmailAttribute">
            <summary>
            email 批注，验证对象的属性是否是合法的 email
            </summary>
        </member>
        <member name="T:wojilu.ORM.PatternAttribute">
            <summary>
            正则表达式批注，验证属性的对象是否符合指定的正则表达式
            </summary>
        </member>
        <member name="T:wojilu.ORM.NotSerializeAttribute">
            <summary>
            在 json 序列化的时候，打上 NotSerialize 批注的属性会被忽略
            </summary>
        </member>
        <member name="T:wojilu.Caching.ApplicationCache">
            <summary>
            应用程序范围的缓存(ORM的二级缓存)
            </summary>
        </member>
        <member name="M:wojilu.Caching.ApplicationCache.Get(System.String)">
            <summary>
            从二级缓存中获取值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Caching.ApplicationCache.Put(System.String,System.Object)">
            <summary>
            将对象放入二级缓存，如果缓存中已有此项，则替换
            </summary>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:wojilu.Caching.ApplicationCache.Put(System.String,System.Object,System.Int32)">
            <summary>
            将对象放入缓存，最后一次访问之后的 minutes 分钟内，如果还没有访问，则会过期（弹性过期）
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <param name="minutes"></param>
        </member>
        <member name="M:wojilu.Caching.ApplicationCache.Remove(System.String)">
            <summary>
            从缓存中移除某项
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:wojilu.Caching.ApplicationCache.Clear">
            <summary>
            从缓存中移除所有项
            </summary>
        </member>
        <member name="T:wojilu.ORM.CacheCountAttribute">
            <summary>
            count 缓存批注
            </summary>
        </member>
        <member name="T:wojilu.ORM.ICacheAttribute">
            <summary>
            缓存批注的接口
            </summary>
        </member>
        <member name="T:wojilu.ORM.MetaList">
            <summary>
            元数据列表
            </summary>
        </member>
        <member name="T:wojilu.ORM.NoCacheDbFinder">
            <summary>
            绕过缓存，直接访问数据库
            </summary>
        </member>
        <member name="T:wojilu.DataPage`1">
            <summary>
            封装了 ORM 分页查询的结果集
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="M:wojilu.DataPage`1.GetEmpty">
            <summary>
            返回空的分页结果集
            </summary>
            <returns></returns>
        </member>
        <member name="P:wojilu.DataPage`1.Current">
            <summary>
            当前页码
            </summary>
        </member>
        <member name="P:wojilu.DataPage`1.Size">
            <summary>
            每页数据量
            </summary>
        </member>
        <member name="P:wojilu.DataPage`1.PageBar">
            <summary>
            风转过的 html 分页栏(也可以自定义)
            </summary>
        </member>
        <member name="P:wojilu.DataPage`1.PageCount">
            <summary>
            总页码
            </summary>
        </member>
        <member name="P:wojilu.DataPage`1.RecordCount">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:wojilu.DataPage`1.Results">
            <summary>
            查询结果：对象的列表
            </summary>
        </member>
        <member name="T:wojilu.ORM.Caching.ContextCache">
            <summary>
            一级缓存(上下文缓存)
            </summary>
        </member>
        <member name="T:wojilu.ORM.DefaultAttribute">
            <summary>
            默认值批注，当属性没有被赋值的时候，系统使用此默认值存入数据库
            </summary>
        </member>
        <member name="T:wojilu.ORM.EntityInfo">
            <summary>
            实体类的元数据信息
            </summary>
        </member>
        <member name="M:wojilu.ORM.EntityInfo.GetByType(System.Type)">
            <summary>
            根据类型Type，初始化EntityInfo；注意：因为不是从缓存中取，所以速度较慢
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ORM.EntityInfo.GetColumnName(System.String)">
            <summary>
            获取某个属性在数据库中对应的数据列名称
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ORM.EntityInfo.GetProperty(System.String)">
            <summary>
            获取某个属性的元数据信息(已封装成EntityPropertyInfo)
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ORM.EntityInfo.GetPropertyByColumn(System.String)">
            <summary>
            根据column名称，获取获取某个属性的元数据信息(已封装成EntityPropertyInfo)
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ORM.EntityInfo.GetPropertyName(System.Type)">
            <summary>
            根据属性的类型，比如BlogCategory，获取符合要求的第一个属性的名称
            </summary>
            <param name="propertyType"></param>
            <returns></returns>
        </member>
        <member name="P:wojilu.ORM.EntityInfo.Database">
            <summary>
            实体类在 dbconfig 配置文件中所对应的数据库名称
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityInfo.DbType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityInfo.Dialect">
            <summary>
            实体类的 dialect
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityInfo.Assembly">
            <summary>
            所属的程序集
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityInfo.ChildEntityList">
            <summary>
            所有实体类属性的 EntityInfo 的列表
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityInfo.ColumnList">
            <summary>
            对应的数据表中的所有列的名称
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityInfo.EntityPropertyList">
            <summary>
            只是实体性质的属性的列表，比如 BlogPost 的某个属性是 BlogCategory 这样的实体类型
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityInfo.PropertyListAll">
            <summary>
            所有属性的列表(属性已经封装成EntityPropertyInfo)
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityInfo.SavedPropertyList">
            <summary>
            所有需要保存的属性
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityInfo.FullName">
            <summary>
            实体类全名，比如 wojilu.apps.BlogApp
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityInfo.Label">
            <summary>
            实体类在表单中的名称，用于表单代码自动生成
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityInfo.Name">
            <summary>
            实体类名称，等同于type.Name，比如BlogApp
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityInfo.Parent">
            <summary>
            当前实体类的父类，如果它是继承于某个基类的话
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityInfo.TableName">
            <summary>
            实体类对应的数据表名称
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityInfo.Type">
            <summary>
            实体类对应的Type
            </summary>
        </member>
        <member name="T:wojilu.ORM.EntityPropertyInfo">
            <summary>
            实体类某个属性的元数据信息
            </summary>
        </member>
        <member name="M:wojilu.ORM.EntityPropertyInfo.GetValue(System.Object)">
            <summary>
            获取obj的当前属性的值
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ORM.EntityPropertyInfo.SetValue(System.Object,System.Object)">
            <summary>
            给obj的当前属性赋值
            </summary>
            <param name="target"></param>
            <param name="value"></param>
        </member>
        <member name="P:wojilu.ORM.EntityPropertyInfo.Name">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityPropertyInfo.ColumnName">
            <summary>
            对应的数据列名
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityPropertyInfo.Type">
            <summary>
            属性的类型，比如是int，还是string等等
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityPropertyInfo.Property">
            <summary>
            属性信息(系统自带的元数据)
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityPropertyInfo.ParentEntityInfo">
            <summary>
            本属性所属的实体类信息，比如Blog有一个属性Title，则Title这个属性的ParentEntityInfo就是Blog
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityPropertyInfo.EntityInfo">
            <summary>
            当本属性是实体属性时，此实体属性的信息。比如Blog的实体属性Category的EntityInfo。如果不是实体属性，则为null
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityPropertyInfo.SaveToDB">
            <summary>
            是否保存到数据库(是否打上了NotSave批注)
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityPropertyInfo.IsList">
            <summary>
            是否是列表类型，列表类型不会保存到数据库
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityPropertyInfo.IsEntity">
            <summary>
            是否是实体类属性
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityPropertyInfo.IsAbstractEntity">
            <summary>
            是否是抽象类型实体
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityPropertyInfo.SaveAttribute">
            <summary>
            当前属性的 ColumnAttribute
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityPropertyInfo.LongTextAttribute">
            <summary>
            当前属性的 LongTextAttribute
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityPropertyInfo.MoneyAttribute">
            <summary>
            当前属性的 MoneyAttribute
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityPropertyInfo.DecimalAttribute">
            <summary>
            当前属性的 DecimalAttribute
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityPropertyInfo.DefaultAttribute">
            <summary>
            当前属性的 DefaultAttribute
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityPropertyInfo.ValidationAttributes">
            <summary>
            当前属性的 ValidationAttribute 的列表
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityPropertyInfo.PropertyAccessor">
            <summary>
            当前属性的赋值/取值器，可以避免反射的低效
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityPropertyInfo.IsLongText">
            <summary>
            是否是长文本
            </summary>
        </member>
        <member name="P:wojilu.ORM.EntityPropertyInfo.Label">
            <summary>
            获取属性的label(用在表单中)
            </summary>
        </member>
        <member name="T:wojilu.ORM.IInterceptor">
            <summary>
            拦截器接口，用户可以通过自定义拦截器，在插入前或插入后等动作中注入自己的处理逻辑
            </summary>
        </member>
        <member name="T:wojilu.ORM.Includer">
            <summary>
            查询属性等附件信息
            </summary>
        </member>
        <member name="T:wojilu.ORM.LabelAttribute">
            <summary>
            label 批注，用于表单代码的自动生成
            </summary>
        </member>
        <member name="T:wojilu.ORM.LongTextAttribute">
            <summary>
            长文本批注，标识此属性对应的数据列允许接受长文本字符串
            </summary>
        </member>
        <member name="T:wojilu.ORM.MappingClass">
            <summary>
            实体类和数据表关联映射的信息
            </summary>
        </member>
        <member name="P:wojilu.ORM.MappingClass.AssemblyList">
            <summary>
            ORM需要加载的所有程序集
            </summary>
        </member>
        <member name="P:wojilu.ORM.MappingClass.ClassList">
            <summary>
            所有需要持久化的实体的 EntityInfo(每个EntityInfo包括类型、映射的表名等信息)
            </summary>
        </member>
        <member name="P:wojilu.ORM.MappingClass.TypeList">
            <summary>
            所有需要持久化的实体的类型(type)
            </summary>
        </member>
        <member name="P:wojilu.ORM.MappingClass.FactoryList">
            <summary>
            所有需要持久化的实体的创建工厂
            </summary>
        </member>
        <member name="P:wojilu.ORM.MappingClass.InterceptorList">
            <summary>
            所有拦截器
            </summary>
        </member>
        <member name="P:wojilu.ORM.MappingClass.TableList">
            <summary>
            所有表名
            </summary>
        </member>
        <member name="T:wojilu.ORM.NotNullAttribute">
            <summary>
            检查对象属性是否已经赋值，如果是字符串类型，empty的字符串也是不合法的
            </summary>
        </member>
        <member name="T:wojilu.ORM.NotSaveAttribute">
            <summary>
            ORM在保存数据的时候，会忽略打上 NotSave 批注的属性
            </summary>
        </member>
        <member name="T:wojilu.ORM.ObjectDB">
            <summary>
            数据访问工具
            </summary>
        </member>
        <member name="T:wojilu.ORM.ObjectInfo">
            <summary>
            对象查询的附件信息
            </summary>
        </member>
        <member name="P:wojilu.ORM.ObjectInfo.Order">
            <summary>
            只接受两种赋值：asc或者desc
            </summary>
        </member>
        <member name="T:wojilu.PageHelper">
            <summary>
            分页查询的结果集的处理，确定当前页、生成分页栏 html 、生成链接、追加页码等 
            </summary>
            <example>
            静态方法：PageHelper 提供了多个静态方法，请看方法的注释。<br/>
            实例方法：只要提供三个参数，就可以获取分页bar<br/>
            1）recordCount (记录总数)  <br/>
            2）pageSize (每页数量)  <br/>
            3）currentPage (当前页码)  <br/>
            然后通过构造函数给 PageHelper 赋值，然后通过它的 PageBar 属性就可以得到分页栏了。
            int recordCount = 302; 
            int pageSize = 15;
            int currentPage = ctx.route.page;
            wojilu.PageHelper op = new wojilu.PageHelper( recordCount, pageSize, currentPage );
            set( "page", op.PageBar );
            </example>
        </member>
        <member name="M:wojilu.PageHelper.GetPageIndex(System.Int32,System.Int32)">
            <summary>
            计算分页的页码
            </summary>
            <param name="count">数据量</param>
            <param name="pageSize">每页数量</param>
            <returns>总计多少页</returns>
        </member>
        <member name="M:wojilu.PageHelper.AppendHtmlNo(System.String,System.Int32)">
            <summary>
            "/html/2010/11/22/195.html" => "/html/2010/11/22/195_2.html"
            </summary>
            <param name="srcUrl"></param>
            <param name="pageNumber"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.PageHelper.AppendNo(System.String,System.Int32)">
            <summary>
            在已有网址url后加上页码 Post/List.aspx=>Post/List/p6.aspx
            </summary>
            <param name="srcUrl">原始网址</param>
            <param name="pageNumber">页码</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.PageHelper.GetSimplePageBar(System.String,System.Int32,System.Int32)">
            <summary>
            获取简易形式的分页栏
            </summary>
            <param name="url"></param>
            <param name="currentPage"></param>
            <param name="pageCount"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.PageHelper.GetSimplePageBar(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            获取简易形式的分页栏
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.PageHelper.GetPageBarByLink(System.String,System.Int32,System.Int32)">
            <summary>
            在已有的翻页链接后，增加额外的分页码。采用query形式："?cp=***"
            </summary>
            <param name="lnk">已有链接</param>
            <param name="pageCount">总页数</param>
            <param name="currentPage">当前页</param>
            <returns></returns>
        </member>
        <member name="P:wojilu.PageHelper.PageBar">
            <summary>
            数据列表的分页栏(包括html)，你也可以根据 PageCount/RecordCount/getCurrent()/getSize() 自定义。
            </summary>
        </member>
        <member name="T:wojilu.ORM.Query">
            <summary>
            查询对象
            </summary>
        </member>
        <member name="M:wojilu.ORM.Query.select(System.String)">
            <summary>
            (本方法不建议使用)只查询指定的属性，本来用于提高性能，但和缓存会起冲突。
            </summary>
            <param name="propertyString"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ORM.Query.set(System.String,System.Object)">
            <summary>
            给查询条件中的参数赋值
            </summary>
            <param name="name">参数名称</param>
            <param name="val">参数值</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ORM.Query.count">
            <summary>
            统计符合查询条件的结果数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.ORM.Query.first">
            <summary>
            返回符合查询条件的第一条结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.ORM.Query.get(System.String)">
            <summary>
            获取所有结果的某个属性的字符串集合，比如 get( "Id" ) 返回 "2, 7, 16, 25"
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ORM.Query.list">
            <summary>
            返回查询的所有结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.ORM.Query.list(System.Int32)">
            <summary>
            返回符合查询条件的前 n 条结果
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ORM.Query.listChildren(System.String)">
            <summary>
            将所有结果对象的某个实体属性封装成集合返回
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ORM.Query.listChildren(System.String,System.Int32)">
            <summary>
            将所有结果对象的某个实体属性封装成集合返回
            </summary>
            <param name="propertyName"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:wojilu.ORM.ColumnAttribute">
            <summary>
            数据列批注，用于标识属性在数据库中对应的列名称和长度
            </summary>
        </member>
        <member name="T:wojilu.ORM.TableAttribute">
            <summary>
            表名称批注，用于标识对象在数据库中对应的表名称
            </summary>
        </member>
        <member name="T:wojilu.ORM.TinyIntAttribute">
            <summary>
            小型整数批注，标识此属性对应的数据列为小型整数
            </summary>
        </member>
        <member name="T:wojilu.ORM.UniqueAttribute">
            <summary>
            唯一性验证批注，验证对象的属性值是否在所有对象中是唯一的
            </summary>
        </member>
        <member name="T:wojilu.ORM.xQuery`1">
            <summary>
            泛型查询对象
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:wojilu.ORM.xQuery`1.set(System.String,System.Object)">
            <summary>
            给查询条件中的参数赋值
            </summary>
            <param name="name">参数名称</param>
            <param name="val">参数值</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ORM.xQuery`1.list">
            <summary>
            返回查询的所有结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.ORM.xQuery`1.list(System.Int32)">
            <summary>
            返回符合查询条件的前 n 条结果
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ORM.xQuery`1.first">
            <summary>
            返回符合查询条件的第一条结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.ORM.xQuery`1.count">
            <summary>
            统计符合查询条件的结果数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.ORM.xQuery`1.select(System.String)">
            <summary>
            (本方法不建议使用)只查询指定的属性，本来用于提高性能，但和缓存会起冲突。
            </summary>
            <param name="propertyString"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ORM.xQuery`1.listChildren``1(System.String)">
            <summary>
            将所有结果对象的某个实体属性封装成集合返回
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.ORM.xQuery`1.get(System.String)">
            <summary>
            获取所有结果的某个属性的字符串集合，比如 get( "Id" ) 返回 "2, 7, 16, 25"
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:wojilu.DataPageInfo" -->
        <member name="M:wojilu.DataPageInfo.GetEmpty">
            <summary>
            返回一个空的分页结果集
            </summary>
            <returns></returns>
        </member>
        <member name="P:wojilu.DataPageInfo.Current">
            <summary>
            当前页码
            </summary>
        </member>
        <member name="P:wojilu.DataPageInfo.Size">
            <summary>
            每页数量
            </summary>
        </member>
        <member name="P:wojilu.DataPageInfo.PageBar">
            <summary>
            已经封装好的html分页栏
            </summary>
        </member>
        <member name="P:wojilu.DataPageInfo.PageCount">
            <summary>
            总共页数
            </summary>
        </member>
        <member name="P:wojilu.DataPageInfo.RecordCount">
            <summary>
            所有记录数
            </summary>
        </member>
        <member name="P:wojilu.DataPageInfo.Results">
            <summary>
            当前页的数据列表
            </summary>
        </member>
        <member name="T:wojilu.PathHelper">
            <summary>
            封装了 web 场合下常用路径和 url 的操作
            </summary>
        </member>
        <member name="M:wojilu.PathHelper.Map(System.String)">
            <summary>
            将相对路径转换为绝对路径
            </summary>
            <param name="path">必须是相对路径</param>
            <returns>返回绝对路径</returns>
        </member>
        <member name="M:wojilu.PathHelper.CombineAbs(System.String[])">
            <summary>
            将几个路径拼接为绝对路径(第一个路径必须是绝对路径)
            </summary>
            <param name="arrPath"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.PathHelper.GetPathList(System.String,System.String)">
            <summary>
            从指定的path中去除掉rootPath部分，
            </summary>
            <param name="rootPath">需要剔除的根路径</param>
            <param name="pathFull">被处理的path</param>
            <returns>返回多个路径列表(从子命名空间依次到跟命名空间)</returns>
        </member>
        <member name="M:wojilu.PathHelper.IsFullUrl(System.String)">
            <summary>
            检查url是否完整(是否以http开头或者以域名开头)
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.PathHelper.hasCommonExt(System.String)">
            <summary>
            判断网址是否包含常见后缀名，比如 .htm/.html/.aspx/.jpg/.doc/.avi 等
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.PathHelper.UrlHasExt(System.String)">
            <summary>
            判断网址是否包含后缀名，比如 xyzz/ab.htm 包含，my/xyz/dfae3 则不包含
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.PathHelper.IsOutUrl(System.String)">
            <summary>
            是否是外部链接
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.PathHelper.TrimUrlExt(System.String)">
            <summary>
            剔除掉 url 的后缀名
            </summary>
            <param name="rawUrl">原始url</param>
            <returns>返回被剔除掉后缀名的 url</returns>
        </member>
        <member name="M:wojilu.PathHelper.CompareUrlWithoutExt(System.String,System.String)">
            <summary>
            在不考虑后缀名的情况下，比较两个网址是否相同
            </summary>
            <param name="url1"></param>
            <param name="url2"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.PathHelper.GetBinDirectory">
            <summary>
            bin 的绝对路径
            </summary>
            <returns></returns>
        </member>
        <member name="T:wojilu.Reflection.CodeRunner">
            <summary>
            代码执行器，可以直接运行代码，输出结果
            </summary>
        </member>
        <member name="T:wojilu.Reflection.IAccessorUtil">
            <summary>
            属性处理器工具
            </summary>
        </member>
        <member name="T:wojilu.Reflection.IConcreteFactory">
            <summary>
            CodeDom 中的对象工厂
            </summary>
        </member>
        <member name="T:wojilu.Reflection.IPropertyAccessor">
            <summary>
            属性操作工具
            </summary>
        </member>
        <member name="T:wojilu.Reflection.ReflectionUtil">
            <summary>
            封装了反射的常用操作方法
            </summary>
        </member>
        <member name="M:wojilu.Reflection.ReflectionUtil.GetInstance(System.Type)">
            <summary>
            通过反射创建对象(Activator.CreateInstance)
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Reflection.ReflectionUtil.GetInstance(System.Type,System.Object[])">
            <summary>
            通过反射创建对象(Activator.CreateInstance)，并提供构造函数
            </summary>
            <param name="t"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Reflection.ReflectionUtil.GetInstance(System.String,System.String)">
            <summary>
            创建对象(通过加载指定程序集中的类型)
            </summary>
            <param name="asmName">不需要后缀名</param>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Reflection.ReflectionUtil.GetAnonymousInstance(System.Type,System.Object[])">
            <summary>
            初始化匿名类型
            </summary>
            <param name="t">匿名类型的type</param>
            <param name="values">参数的值</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Reflection.ReflectionUtil.getPropertyTypeName(System.Reflection.PropertyInfo)">
            <summary>
            获取属性的类型的fullName(对泛型名称做了特殊处理)
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Reflection.ReflectionUtil.GetMethods(System.Type)">
            <summary>
            获取 public 实例方法，不包括继承的方法
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Reflection.ReflectionUtil.GetMethodsAll(System.Type)">
            <summary>
            获取 public 实例方法，包括继承的方法。子对象的方法在前，父对象的方法在后。
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Reflection.ReflectionUtil.GetMethodsWithInheritance(System.Type)">
            <summary>
            获取 public 实例方法，包括继承的方法
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Reflection.ReflectionUtil.IsInterface(System.Type,System.Type)">
            <summary>
            判断 t 是否实现了某种接口
            </summary>
            <param name="t">需要判断的类型</param>
            <param name="interfaceType">是否实现的接口</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Reflection.ReflectionUtil.IsMethodInInterface(System.Reflection.MethodInfo,System.Type,System.Type)">
            <summary>
            判断某个方法是否是接口的实现
            </summary>
            <param name="method"></param>
            <param name="objType"></param>
            <param name="interfaceType"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Reflection.ReflectionUtil.IsMethodProperty(System.Reflection.MethodInfo)">
            <summary>
            判断此 method 是否是属性 property
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="T:wojilu.RegPattern">
            <summary>
            封装了几个常用的正则表达式
            </summary>
        </member>
        <member name="F:wojilu.RegPattern.Url">
            <summary>
            网址的正则表达式
            </summary>
        </member>
        <member name="F:wojilu.RegPattern.EmailLength">
            <summary>
            允许的 email 长度
            </summary>
        </member>
        <member name="F:wojilu.RegPattern.Email">
            <summary>
            email 正则表达式
            </summary>
        </member>
        <member name="F:wojilu.RegPattern.Currency">
            <summary>
            货币值(小数)的正则表达式
            </summary>
        </member>
        <member name="F:wojilu.RegPattern.NegativeCurrency">
            <summary>
            (负数)货币值(小数)的正则表达式
            </summary>
        </member>
        <member name="F:wojilu.RegPattern.Img">
            <summary>
            html 页面中图片的正则表达式，获取&lt;img src="" /&gt; 的src部分
            </summary>
        </member>
        <member name="M:wojilu.RegPattern.IsMatch(System.String,System.String)">
            <summary>
            检查 input 字符串是否和指定的正则表达式匹配
            </summary>
            <param name="input">需要检查的字符串</param>
            <param name="pattern">正则表达式</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.RegPattern.ReplaceHtml(System.String,System.String,System.Boolean)">
            <summary>
            替换html中的标签
            </summary>
            <param name="input"></param>
            <param name="tag">需要过滤的标签</param>
            <param name="stripConent">是否过滤标签的内容</param>
            <returns></returns>
        </member>
        <member name="T:wojilu.Result">
            <summary>
            对结果信息的封装(有效或错误)，在ORM和MVC中经常被使用
            </summary>
        </member>
        <member name="M:wojilu.Result.#ctor(System.String)">
            <summary>
            根据错误信息构建 result
            </summary>
            <param name="errorMsg"></param>
        </member>
        <member name="M:wojilu.Result.Add(System.String)">
            <summary>
            添加错误信息
            </summary>
            <param name="errorMsg"></param>
        </member>
        <member name="M:wojilu.Result.Join(wojilu.Result)">
            <summary>
            合并结果信息
            </summary>
            <param name="result"></param>
        </member>
        <member name="P:wojilu.Result.AutoShow">
            <summary>
            是否自动显示(默认都是自动显示的，比如表单验证发生错误会自动显示在表单上方)
            </summary>
        </member>
        <member name="P:wojilu.Result.Errors">
            <summary>
            获取所有错误信息的列表
            </summary>
        </member>
        <member name="P:wojilu.Result.ErrorsHtml">
            <summary>
            html 格式的错误信息(封装在一个class=wojiluValidationResultList的无序列表ul中)
            </summary>
        </member>
        <member name="P:wojilu.Result.ErrorsText">
            <summary>
            纯文本格式的错误信息，包括换行符。
            </summary>
        </member>
        <member name="P:wojilu.Result.ErrorsJson">
            <summary>
            Json 格式的错误信息。格式 {"IsValid":false, "Msg":"请填写作者名称,请填写评论内容,验证码错误"}
            </summary>
        </member>
        <member name="P:wojilu.Result.Info">
            <summary>
            附带的对象
            </summary>
        </member>
        <member name="P:wojilu.Result.HasErrors">
            <summary>
            结果是否包含错误
            </summary>
        </member>
        <member name="P:wojilu.Result.IsValid">
            <summary>
            结果是否全部正确有效
            </summary>
        </member>
        <member name="T:wojilu.rft">
            <summary>
            封装了反射的常用操作方法
            </summary>
        </member>
        <member name="T:wojilu.Serialization.JSON">
            <summary>
            封装了 json 反序列化中的常见操作：将 json 字符串反序列化为对象、对象列表、字典等。
            序列化工具见 JsonString
            </summary>
        </member>
        <member name="M:wojilu.Serialization.JSON.DicToString(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            将字典序列化为 json 字符串
            </summary>
            <param name="dic"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Serialization.JSON.ToObject(System.String,System.Type)">
            <summary>
            将 json 字符串反序列化为对象
            </summary>
            <param name="oneJsonString">json 字符串</param>
            <param name="t">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Serialization.JSON.ToObject``1(System.String)">
            <summary>
            将 json 字符串反序列化为对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonString">json 字符串</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Serialization.JSON.ToList``1(System.String)">
            <summary>
            将 json 字符串反序列化为对象列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonString">json 字符串</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:wojilu.Serialization.JSON.ToDictionaryList(System.String)">
            <summary>
            将 json 字符串反序列化为字典对象的列表
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Serialization.JSON.ToDictionary(System.String)">
            <summary>
            将 json 字符串反序列化为字典对象
            </summary>
            <param name="oneJsonString"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Serialization.JSON.Encode(System.String)">
            <summary>
            将引号、冒号、逗号进行编码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Serialization.JSON.Decode(System.String)">
            <summary>
            将引号、冒号、逗号进行解码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:wojilu.Serialization.JsonParser">
            <summary>
            json 反序列化工具
            </summary>
        </member>
        <member name="M:wojilu.Serialization.JsonParser.Parse(System.String)">
            <summary>
            解析字符串，返回对象。
            根据 json 的不同，可能返回整数(int)、布尔类型(bool)、字符串(string)、一般对象(Dictionary&lt;string, object&gt;)、数组(List&lt;object&gt;)等不同类型
            </summary>
            <param name="src"></param>
            <returns>根据 json 的不同，可能返回整数(int)、布尔类型(bool)、字符串(string)、一般对象(Dictionary&lt;string, object&gt;)、数组(List&lt;object&gt;)等不同类型</returns>
        </member>
        <member name="T:wojilu.SOA.Controls.ParamControl">
            <summary>
            参数在 html 表单中对应的控件
            </summary>
        </member>
        <member name="M:wojilu.SOA.Controls.ParamControl.ChangeType(System.Object)">
            <summary>
            将参数值转换为正确的参数类型
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.SOA.Controls.ParamControl.GetControl(System.String,System.Int32)">
            <summary>
            获取参数对应的控件
            </summary>
            <param name="param"></param>
            <param name="paramIndex"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.SOA.Controls.ParamControl.GetControl(System.String,System.Int32,System.String)">
            <summary>
            获取参数对应的控件
            </summary>
            <param name="param"></param>
            <param name="paramIndex"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:wojilu.SOA.Controls.ParamControl.Label">
            <summary>
            web界面中显示用的字符
            </summary>
        </member>
        <member name="P:wojilu.SOA.Controls.ParamControl.Name">
            <summary>
            参数名称，从0开始：param0, param1, param2, .... paramN
            </summary>
        </member>
        <member name="P:wojilu.SOA.Controls.ParamControl.Value">
            <summary>
            参数的值，用于传递
            </summary>
        </member>
        <member name="P:wojilu.SOA.Controls.ParamControl.Html">
            <summary>
            控件的 Html
            </summary>
        </member>
        <member name="P:wojilu.SOA.Controls.ParamControl.Type">
            <summary>
            参数的类型
            </summary>
        </member>
        <member name="T:wojilu.SOA.ServiceStatus">
            <summary>
            服务的状态
            </summary>
        </member>
        <member name="F:wojilu.SOA.ServiceStatus.ListForbidden">
            <summary>
            禁止在服务列表中查看
            </summary>
        </member>
        <member name="T:wojilu.SOA.Service">
            <summary>
            系统中各类服务
            </summary>
        </member>
        <member name="M:wojilu.SOA.Service.GetParamDefault">
            <summary>
            获取参数的默认值
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.SOA.Service.GetParams">
            <summary>
            获得所有参数所对应的控件
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.SOA.Service.GetOwnerTypes">
            <summary>
            获得所有允许的 Owner 数组
            </summary>
            <returns></returns>
        </member>
        <member name="P:wojilu.SOA.Service.Type">
            <summary>
            服务的全名，比如 wojilu.Apps.Forum.Service.ForumTopicService
            </summary>
        </member>
        <member name="P:wojilu.SOA.Service.Method">
            <summary>
            服务公开的方法名称，比如 GetRecentTopic
            </summary>
        </member>
        <member name="P:wojilu.SOA.Service.Params">
            <summary>
            参数类型，包括在web页面中显示的名称和控件类型(比如：显示数量=IntTextbox;性别=StringDroplist(男/女/保密);名称=StringTextBox;)
            </summary>
        </member>
        <member name="P:wojilu.SOA.Service.ParamsDefault">
            <summary>
            参数的默认值(可选)
            </summary>
        </member>
        <member name="P:wojilu.SOA.Service.Tags">
            <summary>
            分类：可以通过 GetBy(String tag) 获得某类别的所有服务
            </summary>
        </member>
        <member name="P:wojilu.SOA.Service.Note">
            <summary>
            预留的自定义的筛选条件(通常指出对应的模板名称)
            </summary>
        </member>
        <member name="P:wojilu.SOA.Service.Status">
            <summary>
            预留的服务状态：启用、停用、禁止等
            </summary>
        </member>
        <member name="P:wojilu.SOA.Service.Owner">
            <summary>
            只有允许的 owner 才可以使用本服务。留空表示不限制。多个owner可以用英文分号隔开
            </summary>
        </member>
        <member name="P:wojilu.SOA.Service.Description">
            <summary>
            服务简介。用于可视化界面中
            </summary>
        </member>
        <member name="P:wojilu.SOA.Service.Link">
            <summary>
            此服务对应的链接
            </summary>
        </member>
        <member name="T:wojilu.SOA.ServiceContext">
            <summary>
            获取服务的工具类
            </summary>
        </member>
        <member name="M:wojilu.SOA.ServiceContext.Get(System.Int64)">
            <summary>
            根据 id 获取服务
            </summary>
            <param name="serviceId"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.SOA.ServiceContext.GetAll">
            <summary>
            获取所有服务
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.SOA.ServiceContext.GetByTag(System.String,System.String)">
            <summary>
            获得某分类下的所有服务(tag当做分类法使用)
            </summary>
            <param name="tag"></param>
            <param name="ownerType"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.SOA.ServiceContext.GetData(System.Int64,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            根据服务 id 和参数，调用服务，返回服务运行的结果
            </summary>
            <param name="serviceId"></param>
            <param name="serviceParamValues">服务的参数</param>
            <param name="defaultValues">默认参数</param>
            <returns></returns>
        </member>
        <member name="T:wojilu.Stopwatch">
            <summary>
            秒表，用于测试程序耗时
            </summary>
        </member>
        <member name="M:wojilu.Stopwatch.Start">
            <summary>
            开始启动
            </summary>
        </member>
        <member name="M:wojilu.Stopwatch.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="P:wojilu.Stopwatch.ElapsedMilliseconds">
            <summary>
            总共耗时(毫秒)
            </summary>
        </member>
        <member name="P:wojilu.Stopwatch.ElapsedSeconds">
            <summary>
            总共耗时(秒)
            </summary>
        </member>
        <member name="T:wojilu.strUtil">
            <summary>
            字符串工具类，封装了常见字符串操作
            </summary>
        </member>
        <member name="M:wojilu.strUtil.IsNullOrEmpty(System.String)">
            <summary>
            检查字符串是否是 null 或者空白字符。不同于.net自带的string.IsNullOrEmpty，多个空格在这里也返回true。
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.HasText(System.String)">
            <summary>
            检查是否包含有效字符(空格等空白字符不算)
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.Equals(System.String,System.String)">
            <summary>
            比较两个字符串是否相等
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            比较两个字符串是否相等(不区分大小写)
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.Append(System.String,System.String)">
            <summary>
            将 endString 附加到 srcString末尾，如果 srcString 末尾已包含 endString，则不再附加。
            </summary>
            <param name="srcString"></param>
            <param name="endString"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.ConverToNotNull(System.Object)">
            <summary>
            将对象转为字符串，如果对象为 null，则转为空字符串(string.Empty)
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.CutString(System.Object,System.Int32)">
            <summary>
            从字符串中截取指定长度的一段，如果源字符串被截取了，则结果末尾出现省略号...
            </summary>
            <param name="str">源字符串</param>
            <param name="length">需要截取的长度</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.CutString(System.String,System.Int32)">
            <summary>
            从字符串中截取指定长度的一段，如果源字符串被截取了，则结果末尾出现省略号...
            </summary>
            <param name="str">源字符串</param>
            <param name="length">需要截取的长度</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.EncodeQuote(System.String)">
            <summary>
            对双引号进行编码
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.EncodeTextarea(System.String)">
            <summary>
            让 html 在 textarea 中正常显示。替换尖括号和字符&amp;lt;与&amp;gt;
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.GetEndNumber(System.String)">
            <summary>
            截取字符串末尾的整数
            </summary>
            <param name="rawString"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.getHtmlTitle(System.String)">
            <summary>
            获取 html 文档的标题内容
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.GetIntString(System.Int32,System.Int32)">
            <summary>
            将整数按照指定的长度转换为字符串，比如33转换为6位就是"000033"
            </summary>
            <param name="intValue"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.GetTitleCase(System.String)">
            <summary>
            得到字符串的 TitleCase 格式
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.GetCamelCase(System.String)">
            <summary>
            得到字符串的 CamelCase 格式
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.GetIds(System.Collections.IList)">
            <summary>
            根据对象(IEntity)列表，获取所有对象的ids字符串
            </summary>
            <param name="objList">对象必须是IEntity接口</param>
            <returns>比如 2,5,8 等</returns>
        </member>
        <member name="M:wojilu.strUtil.GetIds(System.Collections.Generic.List{System.Int32})">
            <summary>
            获取所有整数 int 的字符串
            </summary>
            <param name="idList"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.GetIds(System.Int32[])">
            <summary>
            获取所有整数 int 的字符串
            </summary>
            <param name="arrIds"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.GetTypeName(System.String)">
            <summary>
            从类型的全名中获取类型名称(不包括命名空间)
            </summary>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.GetTypeName(System.Type)">
            <summary>
            获取类型名称(主要针对泛型做特殊处理)。如果要获取内部元素信息，请使用t.GetGenericArguments
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.GetTypeFullName(System.Type)">
            <summary>
            获取类型全名(主要针对泛型做特殊处理)，比如List&lt;String&gt;返回System.Collections.Generic.List。如果要获取内部元素信息，请使用t.GetGenericArguments
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.GetGenericTypeWithArgs(System.Type)">
            <summary>
            返回泛型的类型全名，包括元素名，比如System.Collections.Generic.List&lt;System.String&gt;
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.IsLetter(System.String)">
            <summary>
            是否是英文字符和下划线
            </summary>
            <param name="rawString"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.IsUrlItem(System.String)">
            <summary>
            是否是英文、数字和下划线，但不能以下划线开头
            </summary>
            <param name="rawString"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.IsChineseLetter(System.String)">
            <summary>
            是否全部都是中文字符
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.IsAbcNumberAndChineseLetter(System.String)">
            <summary>
            只能以英文或中文开头，允许英文、数字、下划线和中文；
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.IsColorValue(System.String)">
            <summary>
            是否是有效的颜色值(3位或6位，全部由英文字符或数字组成)
            </summary>
            <param name="aColor"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.Join(System.String,System.String)">
            <summary>
            用斜杠/拼接两个字符串
            </summary>
            <param name="strA"></param>
            <param name="strB"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.Join(System.String,System.String,System.String)">
            <summary>
            根据制定的分隔符拼接两个字符串
            </summary>
            <param name="strA"></param>
            <param name="strB"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.ParseHtml(System.Object)">
            <summary>
            剔除 html 中的 tag
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.ParseHtml(System.Object,System.Int32)">
            <summary>
            剔除 html 中的 tag，并返回指定长度的字符串
            </summary>
            <param name="html"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.CutHtmlAndColse(System.String,System.Int32)">
            <summary>
            从 html 中截取指定长度的一段，并关闭未结束的 html 标签
            </summary>
            <param name="html"></param>
            <param name="count">需要截取的长度(小于20个字符按20个字符计算)</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.CloseHtml(System.String)">
            <summary>
            关闭未结束的 html 标签
            (TODO 本方法临时使用，待重写)
            </summary>
            <param name="unClosedHtml"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.Split(System.String,System.String)">
            <summary>
            将字符串分割成数组
            </summary>
            <param name="srcString"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.SqlClean(System.String,System.Int32)">
            <summary>
            过滤掉 sql 语句中的单引号，并返回指定长度的结果
            </summary>
            <param name="rawSql"></param>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.SubString(System.String,System.Int32)">
            <summary>
            从字符串中截取指定长度的一段，结果末尾没有省略号
            </summary>
            <param name="str"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.Text2Html(System.String)">
            <summary>
            将纯文本中的换行符转换成html中换行符
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.TrimEnd(System.String,System.String)">
            <summary>
            从 srcString 的末尾剔除掉 trimString
            </summary>
            <param name="srcString"></param>
            <param name="trimString"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.TrimStart(System.String,System.String)">
            <summary>
            从 srcString 的开头剔除掉 trimString
            </summary>
            <param name="srcString"></param>
            <param name="trimString"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.ResetScript(System.String)">
            <summary>
            将 html 中的脚本从各个部位，全部挪到页脚，以提高网页加载速度
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.SplitByNum(System.String,System.Int32)">
            <summary>
            将字符串分割成平均的n等份，每份长度为count
            </summary>
            <param name="str"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.CountString(System.String,System.String)">
            <summary>
            统计字符出现的次数
            </summary>
            <param name="input">输入的字符</param>
            <param name="pattern">需要统计的字符</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.strUtil.TrimHtml(System.String)">
            <summary>
            将 html 中空白字符和空白标记(&amp;nbsp;)剔除掉
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="T:wojilu.time">
            <summary>
            时间的工具类
            </summary>
        </member>
        <member name="M:wojilu.time.IsNextDay(System.DateTime)">
            <summary>
            检查 t 是否是明天
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:wojilu.INode">
            <summary>
            树状节点接口
            </summary>
        </member>
        <member name="P:wojilu.INode.Id">
            <summary>
            节点的 Id
            </summary>
        </member>
        <member name="P:wojilu.INode.Name">
            <summary>
            节点的名称
            </summary>
        </member>
        <member name="P:wojilu.INode.ParentId">
            <summary>
            上级节点的 Id
            </summary>
        </member>
        <member name="T:wojilu.INodeBinder">
            <summary>
            节点绑定器
            </summary>
        </member>
        <member name="T:wojilu.Node`1">
            <summary>
            树状节点(将 T 做了封装，便于操作)
            </summary>
            <typeparam name="T">节点必须实现了 INode 接口</typeparam>
        </member>
        <member name="M:wojilu.Node`1.getNode">
            <summary>
            获取原始节点数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Node`1.getParent">
            <summary>
            获取上级节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Node`1.getDepth">
            <summary>
            获取节点的深度
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Node`1.getChildren">
            <summary>
            获取所有子节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Node`1.getPrev">
            <summary>
            获取前一个节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Node`1.getNext">
            <summary>
            获取后一个节点
            </summary>
            <returns></returns>
        </member>
        <member name="T:wojilu.Tree`1">
            <summary>
            树状结构
            </summary>
            <typeparam name="T">节点必须实现了 INode 接口</typeparam>
        </member>
        <member name="M:wojilu.Tree`1.FindById(System.Int64)">
            <summary>
            根据 Id 检索节点
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Tree`1.FindParent(System.Int64)">
            <summary>
            根据 Id 获取它的上级节点
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Tree`1.FindPath(System.Int64)">
            <summary>
            根据 Id，获取它的节点路径(从根级开始到当前节点)
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Tree`1.FindRoots">
            <summary>
            获取所有根节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Tree`1.FindChildren(System.Int64)">
            <summary>
            根据 Id，获取所有子节点
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Tree`1.FindAllOrdered">
            <summary>
            获取所有节点(经过排序)
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Tree`1.GetById(System.Int64)">
            <summary>
            根据 Id 获取节点
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Tree`1.GetDepth(System.Int64)">
            <summary>
            根据 Id 获取节点的深度
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Tree`1.GetParent(System.Int64)">
            <summary>
            根据 Id 获取上级节点
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Tree`1.GetPath(System.Int64)">
            <summary>
            根据 Id，获取节点的路径(从根级开始到当前节点)
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Tree`1.GetChildren(System.Int64)">
            <summary>
            根据 Id，获取所有下级节点
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Tree`1.GetRoots">
            <summary>
            获取所有根节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Tree`1.GetAllOrdered">
            <summary>
            获取所有排序过的节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Tree`1.DropList(System.String,System.Int64)">
            <summary>
            树状下拉列表控件
            </summary>
            <param name="dropName">下拉列表name</param>
            <param name="selectValue">当前选定的值</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Tree`1.DropList(System.String,System.Int64,System.Int64,System.String)">
            <summary>
            获取下拉列表select
            </summary>
            <param name="dropName">下拉列表的name和id</param>
            <param name="selectValue">当前选中项的值</param>
            <param name="nodeId">当select用于设置父节点之时，此参数表示将节点自己排除在下拉列表之外，防止将自己作为自己的父节点</param>
            <param name="rootSelectName">根节点(并不存在，但你可以给它取个名称)</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Tree`1.RenderList(System.String)">
            <summary>
            获取树状结构的 html
            </summary>
            <param name="treeId"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Tree`1.RenderList(System.String,System.Boolean,wojilu.INodeBinder,System.Int64)">
            <summary>
            获取树状结构的 html
            </summary>
            <param name="treeId"></param>
            <param name="showChildren"></param>
            <param name="binder"></param>
            <param name="currentNodeId"></param>
            <returns></returns>
        </member>
        <member name="T:wojilu.UrlInfo">
            <summary>
            封装了 url 的一些基本信息。
            </summary>
            <example>
            如下的网址
            <code>
            Uri uri = new Uri( "http://zhangsan:123@www.abc.com/myapp/Photo/1984?title=eee#top" );
            UrlInfo u = new UrlInfo( uri, "/myapp/", "myPathInfo" );
            </code>
            返回的结果是
            <code>
            Scheme=>http
            UserName=>zhangsan
            Password=>123
            Host=>www.abc.com
            Port=>80
            Path=>/myapp/Photo/1984
            PathAndQuery=>/myapp/Photo/1984?title=eee
            PathInfo=>myPathInfo
            PathAndQueryWithouApp=>/Photo/1984?title=eee
            Query=>?title=eee
            Fragment=>#top
            SiteUrl=>http://zhangsan:123@www.abc.com
            SiteAndAppPath=>http://zhangsan:123@www.abc.com/myapp/
            </code>
            </example>
        </member>
        <member name="M:wojilu.UrlInfo.ToString">
            <summary>
            完整的网址路径，包括http前缀以及query string等所有信息；相当于直接拷贝浏览器地址栏的网址。
            </summary>
            <returns></returns>
        </member>
        <member name="P:wojilu.UrlInfo.AppPath">
            <summary>
            http://zhangsan:123@www.abc.com/myapp/Photo/1984?title=eee#top 返回 /myapp/
            </summary>
        </member>
        <member name="P:wojilu.UrlInfo.Scheme">
            <summary>
            http://zhangsan:123@www.abc.com/myapp/Photo/1984?title=eee#top 返回 http
            </summary>
        </member>
        <member name="P:wojilu.UrlInfo.UserName">
            <summary>
            http://zhangsan:123@www.abc.com/myapp/Photo/1984?title=eee#top 返回 zhangsan
            </summary>
        </member>
        <member name="P:wojilu.UrlInfo.Password">
            <summary>
            http://zhangsan:123@www.abc.com/myapp/Photo/1984?title=eee#top 返回 123
            </summary>
        </member>
        <member name="P:wojilu.UrlInfo.Host">
            <summary>
            http://zhangsan:123@www.abc.com/myapp/Photo/1984?title=eee#top 返回 www.abc.com
            </summary>
        </member>
        <member name="P:wojilu.UrlInfo.Port">
            <summary>
            http://zhangsan:123@www.abc.com/myapp/Photo/1984?title=eee#top 返回 80
            </summary>
        </member>
        <member name="P:wojilu.UrlInfo.Path">
            <summary>
            http://zhangsan:123@www.abc.com/myapp/Photo/1984?title=eee#top 返回 /myapp/Photo/1984
            </summary>
        </member>
        <member name="P:wojilu.UrlInfo.Query">
            <summary>
            http://zhangsan:123@www.abc.com/myapp/Photo/1984?title=eee#top 返回 ?title=eee
            </summary>
        </member>
        <member name="P:wojilu.UrlInfo.Fragment">
            <summary>
            http://zhangsan:123@www.abc.com/myapp/Photo/1984?title=eee#top 返回 #top
            </summary>
        </member>
        <member name="P:wojilu.UrlInfo.PathAndQuery">
            <summary>
            网站根目录之后的路径(如果当前应用放在虚拟目录中，则包括虚拟目录)，例如
            http://zhangsan:123@www.abc.com/myapp/Photo/1984?title=eee#top 返回 /myapp/Photo/1984?title=eee
            </summary>
        </member>
        <member name="P:wojilu.UrlInfo.PathAndQueryWithouApp">
            <summary>
            不包括网站域名和虚拟目录的完整路径，前面包括斜杠"/"。例如
            http://zhangsan:123@www.abc.com/myapp/Photo/1984?title=eee#top 返回 /Photo/1984?title=eee
            </summary>
        </member>
        <member name="P:wojilu.UrlInfo.SiteUrl">
            <summary>
            http://zhangsan:123@www.abc.com/myapp/Photo/1984?title=eee#top 返回 http://zhangsan:123@www.abc.com
            </summary>
        </member>
        <member name="P:wojilu.UrlInfo.SiteAndAppPath">
            <summary>
            http://zhangsan:123@www.abc.com/myapp/Photo/1984?title=eee#top 返回 http://zhangsan:123@www.abc.com/myapp/
            </summary>
        </member>
        <member name="P:wojilu.UrlInfo.UriBuilder">
            <summary>
            获取 UriBuilder 对象
            </summary>
        </member>
        <member name="P:wojilu.UrlInfo.EncodeUrl">
            <summary>
            返回编码过(Server.UrlEncode)的完整 url 
            </summary>
            <returns></returns>
        </member>
        <member name="T:wojilu.Web.otherBindFunction">
            <summary>
            额外自定义的绑定方法。在默认的绑定执行完之后，本方法会被附加上去继续执行
            </summary>
            <param name="tpl"></param>
            <param name="lbl"></param>
            <param name="obj"></param>
        </member>
        <member name="T:wojilu.Web.bindFunction">
            <summary>
            额外自定义的绑定方法。在默认的绑定执行完之后，本方法会被附加上去继续执行
            </summary>
            <param name="tpl"></param>
            <param name="id"></param>
        </member>
        <member name="T:wojilu.Web.ITemplate">
            <summary>
            模板引擎
            </summary>
        </member>
        <member name="M:wojilu.Web.ITemplate.InitContent(System.String)">
            <summary>
            根据模板字符串，初始化模板
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.ITemplate.InitContent(System.String,System.String)">
            <summary>
            根据模板字符串，初始化模板
            </summary>
            <param name="absPath">模板所在绝对路径</param>
            <param name="content">模板的内容</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.ITemplate.Set(System.String,System.String)">
            <summary>
            给模板变量赋值
            </summary>
            <param name="lbl"></param>
            <param name="lblValue"></param>
        </member>
        <member name="M:wojilu.Web.ITemplate.Set(System.String,System.Object)">
            <summary>
            给模板变量赋值
            </summary>
            <param name="lbl"></param>
            <param name="val"></param>
        </member>
        <member name="M:wojilu.Web.ITemplate.Bind(System.Object)">
            <summary>
            将对象绑定到模板中
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:wojilu.Web.ITemplate.Bind(System.String,System.Object)">
            <summary>
            将对象绑定到模板中，并指定对象在模板中的变量名
            </summary>
            <param name="lbl"></param>
            <param name="obj"></param>
        </member>
        <member name="M:wojilu.Web.ITemplate.BindList(System.String,System.String,System.Collections.IList)">
            <summary>
            将对象列表绑定到模板中
            </summary>
            <param name="listName"></param>
            <param name="lbl"></param>
            <param name="objList"></param>
        </member>
        <member name="M:wojilu.Web.ITemplate.GetBlock(System.String)">
            <summary>
            获取模板中的区块，用于进一步的绑定
            </summary>
            <param name="blockName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.ITemplate.Replace(System.String,System.String)">
            <summary>
            直接进行模板内容替换
            </summary>
            <param name="lbl"></param>
            <param name="lblValue"></param>
        </member>
        <member name="M:wojilu.Web.ITemplate.HasBlock(System.String)">
            <summary>
            区块是否存在
            </summary>
            <param name="blockName"></param>
            <returns></returns>
        </member>
        <member name="P:wojilu.Web.ITemplate.bindFunc">
            <summary>
            自定义的绑定方法
            </summary>
        </member>
        <member name="P:wojilu.Web.ITemplate.bindOtherFunc">
            <summary>
            自定义的绑定方法
            </summary>
        </member>
        <member name="P:wojilu.Web.ITemplate.IsEmpty">
            <summary>
            模板是否有内容
            </summary>
        </member>
        <member name="T:wojilu.Web.PlatformTemplate">
            <summary>
            综合系统中 feed 消息的模板处理
            </summary>
        </member>
        <member name="M:wojilu.Web.PlatformTemplate.GetVarData(System.String,System.String)">
            <summary>
            获取模板中变量的值，以 json 格式返回
            </summary>
            <param name="template"></param>
            <param name="jsonData">输入的 json 数据，其中有模板不需要用到的多余数据</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.PlatformTemplate.GetVars(System.String)">
            <summary>
            获取模板中出现的所有变量
            </summary>
            <param name="template"></param>
            <returns></returns>
        </member>
        <member name="T:wojilu.Web.RssChannel">
            <summary>
            rss 数据抓取工具
            </summary>
        </member>
        <member name="T:wojilu.Web.RssImage">
            <summary>
            rss 中的图片信息
            </summary>
        </member>
        <member name="T:wojilu.Web.RssItem">
            <summary>
            rss 数据项
            </summary>
        </member>
        <member name="T:wojilu.Web.RssItemList">
            <summary>
            rss 数据列表
            </summary>
        </member>
        <member name="T:wojilu.Web.ContentBlock">
            <summary>
            模板区块的基类
            </summary>
        </member>
        <member name="M:wojilu.Web.ContentBlock.Next">
            <summary>
            绑定一行完毕，进入下一行绑定
            </summary>
        </member>
        <member name="M:wojilu.Web.ContentBlock.Set(System.String,System.String)">
            <summary>
            给模板中的变量赋值
            </summary>
            <param name="lbl"></param>
            <param name="lblValue"></param>
        </member>
        <member name="M:wojilu.Web.ContentBlock.Set(System.String,System.Object)">
            <summary>
            给模板中的变量赋值
            </summary>
            <param name="lbl">模板中的变量</param>
            <param name="val">被赋予的值，如果是DateTime和Decimal，会被转化成字符串。如果不想转成字符串，请用Bind方法</param>
        </member>
        <member name="M:wojilu.Web.ContentBlock.Bind(System.Object)">
            <summary>
            将对象绑定到模板。模板中变量前缀使用camelCase格式：#{blogPost.Title}
            </summary>
            <param name="obj">被绑定的对象</param>
        </member>
        <member name="M:wojilu.Web.ContentBlock.Bind(System.String,System.Object)">
            <summary>
            将对象绑定到模板。可以自定义模板中变量前缀：#{x.Title}
            </summary>
            <param name="lbl">比如变量#{x.Title}中的x</param>
            <param name="obj">被绑定的对象</param>
        </member>
        <member name="M:wojilu.Web.ContentBlock.HasBlock(System.String)">
            <summary>
            判断区块是否存在
            </summary>
            <param name="blockName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.ContentBlock.GetBlock(System.String)">
            <summary>
            返回一个做数据容器的block（可以作为数据容器，并包括tokens信息）
            </summary>
            <param name="blockName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.ContentBlock.ToString">
            <summary>
            获取模板绑定之后的最终结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.ContentBlock.BindList(System.String,System.String,System.Collections.IList)">
            <summary>
            绑定对象列表
            </summary>
            <param name="listName"></param>
            <param name="lbl"></param>
            <param name="objList"></param>
        </member>
        <member name="T:wojilu.Web.Template">
            <summary>
            模板引擎
            </summary>
        </member>
        <member name="M:wojilu.Web.Template.#ctor(System.String)">
            <summary>
            根据指定路径的模板文件初始化
            </summary>
            <param name="absPath">模板文件所在的绝对路径</param>
        </member>
        <member name="M:wojilu.Web.Template.InitContent(System.String)">
            <summary>
            根据模板内容初始化
            </summary>
            <param name="content">需要使用的模板内容(模板字符串)</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Template.ToString">
            <summary>
            获取模板绑定之后的最终结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Template.getTemplateString">
            <summary>
            返回模板的原始内容，尚未给变量赋值
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Template.Reset">
            <summary>
            清空所有缓存
            </summary>
        </member>
        <member name="P:wojilu.Web.Template.IsEmpty">
            <summary>
            判断模板内容是否为空
            </summary>
        </member>
        <member name="T:wojilu.Web.WebStopwatch">
            <summary>
            web 计时秒表
            </summary>
        </member>
        <member name="T:wojilu.SysPath">
            <summary>
            系统路径(路径末尾有斜杠"/")
            </summary>
            <remarks>所有的路径末尾都有斜杠"/"，以区别于没有斜杠作后缀的文件名</remarks>
        </member>
        <member name="F:wojilu.SysPath.Instance">
            <summary>
            系统路径信息(全局缓存)
            </summary>
        </member>
        <member name="M:wojilu.SysPath.GetPhotoThumb(System.String,System.String)">
            <summary>
            获取图片的缩略图
            </summary>
            <param name="relativeUrl"></param>
            <param name="suffix"></param>
            <returns></returns>
        </member>
        <member name="T:wojilu.Common.AppBase.AccessStatus">
            <summary>
            是否可访问的枚举(公开、好友、私人)
            </summary>
        </member>
        <member name="T:wojilu.Common.AppBase.CommentCondition">
            <summary>
            关于是否可评论的枚举状态(允许、关闭、登录用户、好友)
            </summary>
        </member>
        <member name="T:wojilu.Common.AppBase.MemberStatus">
            <summary>
            注册用户的状态(待审核、删除、置顶、推荐、普通)
            </summary>
        </member>
        <member name="T:wojilu.Common.AppBase.SaveStatus">
            <summary>
            存储状态(普通、草稿、删除、系统删除)
            </summary>
        </member>
        <member name="F:wojilu.Common.AppBase.SaveStatus.Private">
            <summary>
            私有数据，不公开显示
            </summary>
        </member>
        <member name="T:wojilu.Common.AppBase.SystemPickStatus">
            <summary>
            系统推荐状态(当前只推荐一种状态)
            </summary>
        </member>
        <member name="T:wojilu.Common.AppBase.IAccessStatus">
            <summary>
            设置了访问控制的对象接口
            </summary>
        </member>
        <member name="T:wojilu.Common.AppBase.ISort">
            <summary>
            可排序对象接口
            </summary>
        </member>
        <member name="T:wojilu.Common.AppBase.SortUtil`1">
            <summary>
            排序工具封装
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:wojilu.Common.AppBase.SortUtil`1.#ctor(`0,System.Collections.Generic.List{`0})">
            <summary>
            
            </summary>
            <param name="data">需要移动的对象</param>
            <param name="list">对象列表</param>
        </member>
        <member name="M:wojilu.Common.AppBase.SortUtil`1.GetOrderedList">
            <summary>
            获取经过排序的列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Common.AppBase.SortUtil`1.MoveUp">
            <summary>
            向前移动
            </summary>
        </member>
        <member name="M:wojilu.Common.AppBase.SortUtil`1.MoveDown">
            <summary>
            向后移动
            </summary>
        </member>
        <member name="T:wojilu.Common.Onlines.OnlineUser">
            <summary>
            在线用户信息封装
            </summary>
        </member>
        <member name="T:wojilu.Common.Resource.AppResource">
            <summary>
            各类常用基础数据列表(省份、性别、时间、身高、婚姻、血型、星座等)
            </summary>
        </member>
        <member name="F:wojilu.Common.Resource.AppResource.Body">
            <summary>
            体型
            </summary>
        </member>
        <member name="F:wojilu.Common.Resource.AppResource.ContactCondition">
            <summary>
            其他用户联系我的条件
            </summary>
        </member>
        <member name="F:wojilu.Common.Resource.AppResource.EmailNotify">
            <summary>
            email通知状态(启用/禁用)
            </summary>
        </member>
        <member name="F:wojilu.Common.Resource.AppResource.Gender">
            <summary>
            性别(保密/男/女)
            </summary>
        </member>
        <member name="F:wojilu.Common.Resource.AppResource.Hair">
            <summary>
            头发颜色
            </summary>
        </member>
        <member name="F:wojilu.Common.Resource.AppResource.Height">
            <summary>
            身高选项
            </summary>
        </member>
        <member name="F:wojilu.Common.Resource.AppResource.Province">
            <summary>
            省份
            </summary>
        </member>
        <member name="F:wojilu.Common.Resource.AppResource.Purpose">
            <summary>
            注册目的
            </summary>
        </member>
        <member name="F:wojilu.Common.Resource.AppResource.Relationship">
            <summary>
            婚姻状况
            </summary>
        </member>
        <member name="F:wojilu.Common.Resource.AppResource.Sexuality">
            <summary>
            性取向
            </summary>
        </member>
        <member name="F:wojilu.Common.Resource.AppResource.Sleeping">
            <summary>
            睡眠习惯
            </summary>
        </member>
        <member name="F:wojilu.Common.Resource.AppResource.Smoking">
            <summary>
            吸烟爱好
            </summary>
        </member>
        <member name="F:wojilu.Common.Resource.AppResource.Weight">
            <summary>
            体重
            </summary>
        </member>
        <member name="F:wojilu.Common.Resource.AppResource.Blood">
            <summary>
            血型
            </summary>
        </member>
        <member name="F:wojilu.Common.Resource.AppResource.Zodiac">
            <summary>
            星座
            </summary>
        </member>
        <member name="F:wojilu.Common.Resource.AppResource.Time">
            <summary>
            时间列表
            </summary>
        </member>
        <member name="F:wojilu.Common.Resource.AppResource.Degree">
            <summary>
            学历
            </summary>
        </member>
        <member name="M:wojilu.Common.Resource.AppResource.GetPropertyList(System.String)">
            <summary>
            获取语言包里存储的键值对列表(用于自定义扩展)
            </summary>
            <param name="langItemName">语言key</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Common.Resource.AppResource.GetProvince(System.Int32)">
            <summary>
            根据值获取省份名称
            </summary>
            <param name="provinceId"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Common.Resource.AppResource.GetItemName(System.String,System.Int32)">
            <summary>
            根据项值，获取项的名称
            </summary>
            <param name="langKey">语言包中的key</param>
            <param name="itemId">项值</param>
            <returns>项的名称</returns>
        </member>
        <member name="M:wojilu.Common.Resource.AppResource.IsSelectTip(System.String)">
            <summary>
            是否是“请选择”这个值
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Common.Resource.AppResource.GetInts(System.Int32,System.Int32)">
            <summary>
            获取数值列表，用于下拉选项。自动在第一项前面增加“请选择”项，其值为0
            </summary>
            <param name="intFrom">起始值</param>
            <param name="intTo">终止值</param>
            <returns>数值列表</returns>
        </member>
        <member name="T:wojilu.Common.Resource.PropertyCollection">
            <summary>
            属性数据列表，常用于下拉列表中
            </summary>
        </member>
        <member name="T:wojilu.Common.Resource.PropertyItem">
            <summary>
            属性数据项，常用于下拉列表中
            </summary>
        </member>
        <member name="T:wojilu.Common.Security.RoleProxy">
            <summary>
            角色代理对象，对象临时转换使用
            </summary>
        </member>
        <member name="T:wojilu.Common.Security.IRole">
            <summary>
            角色接口
            </summary>
        </member>
        <member name="T:wojilu.Common.Security.RoleGroup">
            <summary>
            网站用户的角色分组枚举(管理组和普通组)
            </summary>
        </member>
        <member name="T:wojilu.Common.Security.IAction">
            <summary>
            action 接口
            </summary>
        </member>
        <member name="T:wojilu.Common.Security.ISecurity">
            <summary>
            可存储权限数据的对象接口
            </summary>
        </member>
        <member name="T:wojilu.Common.Security.ISecurityAction">
            <summary>
            权限系统中的 action 接口
            </summary>
        </member>
        <member name="T:wojilu.Common.Security.RoleMerger">
            <summary>
            角色合并工具
            </summary>
        </member>
        <member name="T:wojilu.Common.Security.SecurityString">
            <summary>
            权限序列化后工具，格式：wojilu.Security.Domain.SiteRole:2:1,2,8,16,17/
            </summary>
        </member>
        <member name="T:wojilu.config">
            <summary>
            网站的配置信息
            </summary>
        </member>
        <member name="P:wojilu.config.Site">
            <summary>
            网站的配置信息
            </summary>
        </member>
        <member name="T:wojilu.Config.ISetting">
            <summary>
            配置项
            </summary>
        </member>
        <member name="T:wojilu.Config.ISettingValue">
            <summary>
            配置值的接口
            </summary>
        </member>
        <member name="T:wojilu.Config.SettingFormTool">
            <summary>
            配置表单工具
            </summary>
        </member>
        <member name="T:wojilu.Config.SettingType">
            <summary>
            配置项的数据类型
            </summary>
        </member>
        <member name="T:wojilu.Config.RegisterType">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="F:wojilu.Config.RegisterType.Open">
            <summary>
            开放注册
            </summary>
        </member>
        <member name="F:wojilu.Config.RegisterType.Close">
            <summary>
            关闭注册
            </summary>
        </member>
        <member name="F:wojilu.Config.RegisterType.CloseUnlessInvite">
            <summary>
            关闭注册，但受邀请的除外
            </summary>
        </member>
        <member name="T:wojilu.Config.TopNavDisplay">
            <summary>
            (网站页面顶部的)用户导航栏的显示状态
            </summary>
        </member>
        <member name="F:wojilu.Config.TopNavDisplay.Show">
            <summary>
            显示
            </summary>
        </member>
        <member name="F:wojilu.Config.TopNavDisplay.Hide">
            <summary>
            隐藏
            </summary>
        </member>
        <member name="F:wojilu.Config.TopNavDisplay.NoRegHide">
            <summary>
            在关闭注册之后隐藏
            </summary>
        </member>
        <member name="T:wojilu.Config.UserDisplayNameType">
            <summary>
            显示名称：Name 用户名，RealName 真实姓名，默认为RealName
            </summary>
        </member>
        <member name="T:wojilu.Config.SiteSetting">
            <summary>
            网站配置
            </summary>
        </member>
        <member name="M:wojilu.Config.SiteSetting.GetStatsJs">
            <summary>
            获取统计的js内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Config.SiteSetting.GetLogoHtml">
            <summary>
            如果设置了logo图片，返回img；否则返回siteName
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Config.SiteSetting.GetSmtpUserDomain">
            <summary>
            获取邮件发送服务器的域名，比如根据 abc@gmail.com，得到 gmail.com
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Config.SiteSetting.Update(System.String,System.Object)">
            <summary>
             将更新保存到磁盘
            </summary>
            <param name="item"></param>
            <param name="val"></param>
        </member>
        <member name="P:wojilu.Config.SiteSetting.SiteName">
            <summary>
            网站名称
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.SiteUrl">
            <summary>
            网站的网址
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.SiteLogo">
            <summary>
            logo的图片网址
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.Webmaster">
            <summary>
            站长名字
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.Email">
            <summary>
            网站的email
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.Keywords">
            <summary>
            网页默认关键词
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.Description">
            <summary>
            网页默认的描述
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.BeiAn">
            <summary>
            备案号
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.UserPageKeywords">
            <summary>
            用户聚合首页的默认关键词
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.UserPageDescription">
            <summary>
            用户聚合首页的默认的描述
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.PageDefaultTitle">
            <summary>
            网页默认的标题
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.NeedLogin">
            <summary>
            网站是否需要登录才能访问，默认不需要登录
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.UserNeedApprove">
            <summary>
            用户注册之后必须经过人工审核
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.AlertActivation">
            <summary>
            对尚未激活的用户，是否必须激活才能登录
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.UserSendConfirmEmailInterval">
            <summary>
            用户自己重发激活邮件的间隔
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.AlertUserPic">
            <summary>
            对尚未上传头像的用户，是否提醒他上传头像
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.RegisterType">
            <summary>
            注册的三种类型 (1)开放注册 (2)关闭注册 (3)只有受邀请用户才可以注册
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.TopNavDisplay">
            <summary>
            顶部用户栏状态(1)显示 (2)隐藏 (3)在关闭注册之后隐藏
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.UserInitApp">
            <summary>
            用户注册之后默认安装的app。
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.ValidationType">
            <summary>
            验证码类型
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.ValidationLength">
            <summary>
            英文或数字的验证没长度
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.ValidationChineseLength">
            <summary>
            中文验证码长度
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.IsClose">
            <summary>
            网站是否关闭
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.CloseReason">
            <summary>
            如果关闭，关闭的原因
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.StatsEnabled">
            <summary>
            是否开启统计，需要结合StatsJs
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.StatsJs">
            <summary>
            统计js
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.Copyright">
            <summary>
            版权信息
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.LogoWidth">
            <summary>
            logo宽度
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.LogoHeight">
            <summary>
            logo高度
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.SkinId">
            <summary>
            网站当前皮肤的ID
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.Md5Is16">
            <summary>
            用户密码是否采用16位的md5加密方式(默认为否，用于兼容旧的系统)
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.CommentLength">
            <summary>
            评论内容的长度
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.UserDescriptionMin">
            <summary>
            用户简介的最少字数
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.UserDescriptionMax">
            <summary>
            用户简介的最大字数
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.UserSignatureMin">
            <summary>
            用户论坛签名的最少字数
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.UserSignatureMax">
            <summary>
            用户论坛签名的最大字数
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.PublishTimeAfterReg">
            <summary>
            注册之后禁止发言发言的时间限制(单位小时)
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.TagLength">
            <summary>
            tag的长度
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.SiteLogoFull">
            <summary>
            网站logo图片的完整网址
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.UserNameLengthMax">
            <summary>
            注册用户名允许的长度
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.UserNameLengthMin">
            <summary>
            注册用户名至少要达到的长度
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.LoginNeedImgValidation">
            <summary>
            登录是否启用验证码
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.RegisterNeedImgValidateion">
            <summary>
            注册是否启用验证码
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.SystemMsgTitle">
            <summary>
            给新注册用户发送的欢迎信息的标题
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.SystemMsgContent">
            <summary>
            给新注册用户发送的欢迎信息的内容(支持html)
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.ReservedUserName">
            <summary>
            保留用户名(不可以注册的用户名)
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.ReservedUserUrl">
            <summary>
            保留的用户个性网址
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.ReservedKey">
            <summary>
            保留的关键词(不可以在用户名和个性网址中使用)
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.ValidateUserByMembership">
            <summary>
            使用MS的Membership数据库验证登录，需要配合AuthenticationModule的自动注册功能一起使用,默认为否
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.UserDisplayName">
            <summary>
            显示名称：Name 用户名，RealName 真实姓名，默认为RealName
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.DenyEditUserRealName">
            <summary>
            是否禁止修改真实性名与空间名称，默认不禁止
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.DenyEditUserTitle">
            <summary>
            是否禁止修改空间名称，默认不禁止
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.BadWords">
            <summary>
            禁用的关键词
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.BadWordsReplacement">
            <summary>
            禁用词汇的替换词
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.BannedIp">
            <summary>
            所有被禁的ip地址
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.BannedIpInfo">
            <summary>
            给被屏蔽访客的警告信息
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.PhotoThumb">
            <summary>
            上传图片的配置信息，具体内容，请参考 ThumbConfig 的注释
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.AvatarThumb">
            <summary>
            头像缩略的配置信息，具体内容，请参考 ThumbConfig 的注释
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.UploadAvatarMaxKB">
            <summary>
            用户头像最大上传大小，单位KB
            <para>如果不设置，默认是2000KB</para>
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.UploadPicMaxMB">
            <summary>
            图片最大上传的大小，单位MB
            <para>如果不设置，默认是5M</para>
            </summary>
        </member>
        <member name="P:wojilu.Config.SiteSetting.UploadFileMaxMB">
            <summary>
            图片最大上传的大小，单位MB
            <para>如果不设置，默认是20M</para>
            </summary>
        </member>
        <member name="T:wojilu.Common.ConstString">
            <summary>
            常用的固定字符串
            </summary>
        </member>
        <member name="F:wojilu.Common.ConstString.SiteTypeFullName">
            <summary>
            网站类型全名
            </summary>
        </member>
        <member name="F:wojilu.Common.ConstString.UserTypeFullName">
            <summary>
            用户类型全名
            </summary>
        </member>
        <member name="T:wojilu.Common.IHits">
            <summary>
            需要统计点击数的对象接口
            </summary>
        </member>
        <member name="T:wojilu.Common.IShareData">
            <summary>
            需要被分享的数据接口
            </summary>
        </member>
        <member name="T:wojilu.Common.IShareInfo">
            <summary>
            分享工具的接口
            </summary>
        </member>
        <member name="T:wojilu.Web.Context.ContextInitBase">
            <summary>
            上下文初始化器，顺序是：InitViewer -> InitOwner -> InitController -> InitPermission -> InitApp
            </summary>
        </member>
        <member name="M:wojilu.Web.Context.ContextInitBase.InitApp(wojilu.Web.Context.MvcContext)">
            <summary>
            初始化当前的 app
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:wojilu.Web.Context.ContextInitBase.InitViewer(wojilu.Web.Context.MvcContext)">
            <summary>
            初始化当前访问者
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:wojilu.Web.Context.ContextInitBase.InitOwner(wojilu.Web.Context.MvcContext)">
            <summary>
            初始化当前被访问者
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:wojilu.Web.Context.ContextInitBase.InitController(wojilu.Web.Context.MvcContext)">
            <summary>
            初始化当前 controller
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:wojilu.Web.Context.ContextInitBase.InitPermission(wojilu.Web.Context.MvcContext)">
            <summary>
            初始化权限检查
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="T:wojilu.Web.Context.ContextInitDefault">
            <summary>
            默认的初始化器，只初始化了当前 controller
            </summary>
        </member>
        <member name="T:wojilu.Web.Context.IAppContext">
            <summary>
            应用程序上下文接口
            </summary>
        </member>
        <member name="P:wojilu.Web.Context.IAppContext.Name">
            <summary>
            当前 app 的名称
            </summary>
        </member>
        <member name="P:wojilu.Web.Context.IAppContext.obj">
            <summary>
            当前 app 对象
            </summary>
        </member>
        <member name="T:wojilu.Web.Context.IOwnerContext">
            <summary>
            当前被访问者的接口
            </summary>
        </member>
        <member name="T:wojilu.Web.Context.IViewerContext">
            <summary>
            当前访问者的接口
            </summary>
        </member>
        <member name="M:wojilu.Web.Context.IViewerContext.SendMsg(System.String,System.String,System.String)">
            <summary>
            发送站内私信
            </summary>
            <param name="ownerName"></param>
            <param name="title"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.IViewerContext.AddFriend(System.Int64,System.String)">
            <summary>
            加为好友
            </summary>
            <param name="ownerId"></param>
            <param name="msg"></param>
        </member>
        <member name="M:wojilu.Web.Context.IViewerContext.HasPrivacyPermission(wojilu.Members.Interface.IMember,System.String)">
            <summary>
            检索隐私配置，当前 viewer 对 owner 的某个item是否具有访问权限
            </summary>
            <param name="owner">被访问者</param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.IViewerContext.IsAdministrator">
            <summary>
            是否网站管理员
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.IViewerContext.IsOwnerAdministrator(wojilu.Members.Interface.IMember)">
            <summary>
            是否是当前访问的owner的管理员
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.IViewerContext.IsFollowing(System.Int64)">
            <summary>
            是否关注了某人
            </summary>
            <param name="ownerId"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.IViewerContext.IsFriend(System.Int64)">
            <summary>
            和某人是否是朋友
            </summary>
            <param name="ownerId"></param>
            <returns></returns>
        </member>
        <member name="P:wojilu.Web.Context.IViewerContext.obj">
            <summary>
            当前访问者
            </summary>
        </member>
        <member name="P:wojilu.Web.Context.IViewerContext.IsLogin">
            <summary>
            是否已经登录
            </summary>
        </member>
        <member name="T:wojilu.Web.Context.MvcContext">
            <summary>
            mvc 上下文数据：即整个执行流程中常用的数据封装
            </summary>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.GetItem(System.String)">
            <summary>
            根据 key 获取存储在 ctx 中某项的值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.GetItemString(System.String)">
            <summary>
            根据 key 获取存储在 ctx 中某项的值，以字符串形式返回
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.SetItem(System.String,System.Object)">
            <summary>
            将某个对象存储在 ctx 中，方便不同的 controller 或 action 之间调用
            </summary>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.HasItem(System.String)">
            <summary>
            判断 ctx 的存储器中是否具有某个 key 。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.setUrl(System.String)">
            <summary>
            设置当前网址，用于自定义网址
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.GetFiles">
            <summary>
            当前客户端上传的所有文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.GetFileSingle">
            <summary>
            当前客户端上传的第一个文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.ex(System.String,System.String)">
            <summary>
            清理所有资源，准备抛出异常
            </summary>
            <param name="httpStatus">给客户端的 httpStatus 状态信息</param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.RenderJson(System.String)">
            <summary>
            呈现 json 到客户端
            </summary>
            <param name="jsonContent"></param>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.RenderXml(System.String)">
            <summary>
            呈现 xml 到客户端
            </summary>
            <param name="xmlContent"></param>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.Get(System.String)">
            <summary>
            获取 url 中的某项值，结果已被过滤(不允许html)
            </summary>
            <param name="queryItem"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.Get``1">
            <summary>
            获取当前路由中的 id 对应的数据(必须先通过 DataAttribute 指定数据类型)
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.GetHas(System.String)">
            <summary>
            检查 url 中是否具有某项 key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.GetIdList(System.String)">
            <summary>
            从 url 的查询信息 (query string) 中获取 id 列表，结果经过了验证，是类型安全的。如果不合法，则返回null
            </summary>
            <param name="idname"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.GetLong(System.String)">
            <summary>
            从 url 中获取某项的值，并转换成整数
            </summary>
            <param name="queryItemName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.GetDecimal(System.String)">
            <summary>
            从 url 中获取某项的值，并转换成 Decimal
            </summary>
            <param name="queryItemName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.GetDouble(System.String)">
            <summary>
            从 url 中获取某项的值，并转换成 Double
            </summary>
            <param name="queryItemName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.Post(System.String)">
            <summary>
            获取客户端 post 的值，结果已被过滤(不允许html)
            </summary>
            <param name="postItem"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.PostHas(System.String)">
            <summary>
            检查客户端 post 的数据中是否有某项 key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.PostDecimal(System.String)">
            <summary>
            从客户端 post 的数据中获取某项的值，并转换成 decimal
            </summary>
            <param name="postItem"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.PostDouble(System.String)">
            <summary>
            从客户端 post 的数据中获取某项的值，并转换成 Double
            </summary>
            <param name="postItem"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.PostIdList(System.String)">
            <summary>
            从客户端 post 的数据中获取 id 列表，结果经过了验证，是类型安全的
            </summary>
            <param name="idname"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.PostLong(System.String)">
            <summary>
            从客户端 post 的数据中获取某项的值，并转换成整数
            </summary>
            <param name="postItem"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.PostIsCheck(System.String)">
            <summary>
            检查客户端是否已经勾选了多选框，如果勾选返回1，否则返回0
            </summary>
            <param name="postItem"></param>
            <returns>如果勾选返回1，否则返回0</returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.PostTime(System.String)">
            <summary>
            从客户端 post 的数据中获取某项的值，并转换成时间类型。如果无提交值或格式错误，则返回当前时间DateTime.Now
            </summary>
            <param name="postItem"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.PostHtml(System.String)">
            <summary>
            获取客户端 post 的 html，结果已被过滤(管理员除外)，只有在白名单中的 tag 才被允许。
            <para>自定义白名单方法：修改 mvc.config 中的 tagWhiteList 项。</para>
            </summary>
            <param name="postItem"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.PostHtml(System.String,System.String)">
            <summary>
            获取客户端 post 的 html，结果已被过滤，只允许 allowedTags 中指定的 tag
            </summary>
            <param name="postItem"></param>
            <param name="allowedTags"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.PostHtml(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            获取客户端 post 的 html，结果已被过滤，只允许 allowedTags 中指定的 tag
            </summary>
            <param name="postItem"></param>
            <param name="allowedTags">允许的tag，包括属性列表</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.PostHtmlAppendTags(System.String,System.String)">
            <summary>
            在默认白名单的基础上，允许 allowedTags 中指定的tag
            </summary>
            <param name="postItem"></param>
            <param name="allowedTags"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.PostHtmlAll(System.String)">
            <summary>
            允许接收客户端任意字符，请谨慎使用
            </summary>
            <param name="postItem"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.Params(System.String)">
            <summary>
            获取客户端提交的数据(包括get和post)，结果已被过滤(不允许html)
            </summary>
            <param name="itemName"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.ParamInt(System.String)">
            <summary>
            从客户端提交的数据中获取某项的值，并转换成整数
            </summary>
            <param name="postItem"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.ParamLong(System.String)">
            <summary>
            从客户端提交的数据中获取某项的值，并转换成long
            </summary>
            <param name="postItem"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.ParamDecimal(System.String)">
            <summary>
            从客户端提交的数据中获取某项的值，并转换成 Decimal
            </summary>
            <param name="postItem"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.ParamDouble(System.String)">
            <summary>
            从客户端提交的数据中获取某项的值，并转换成 Double
            </summary>
            <param name="postItem"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.Validate(wojilu.IEntity)">
            <summary>
            验证对象的各项属性是否合法
            </summary>
            <param name="target">需要被验证的对象</param>
            <returns>返回验证结果</returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.PostObject``1">
            <summary>
            获取客户端post的数据，并自动赋值到对象各属性，最后进行验证
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.PostObject``1(System.String)">
            <summary>
            获取客户端post的数据，并自动赋值到对象各属性，最后进行验证
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lblName">表单中对象名称。如果为空，使用属性名</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.PostObject(System.Object)">
            <summary>
            获取客户端post的数据，并自动赋值到对象各属性，最后进行验证
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.PostObject(System.Object,System.String)">
            <summary>
            获取客户端post的数据，并自动赋值到对象各属性，最后进行验证
            </summary>
            <param name="obj"></param>
            <param name="lblName">表单中对象名称。如果为空，使用属性名</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.PostValue``1">
            <summary>
            获取客户端post的数据，并自动赋值到对象各属性，最后进行验证
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.PostValue``1(System.String)">
            <summary>
            获取客户端post的数据，并自动赋值到对象各属性，最后进行验证
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lblName">表单中对象名称。如果为空，则使用对象类型的camel格式</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.PostValue(System.Object)">
            <summary>
            获取客户端post的数据，并自动赋值到对象各属性，最后进行验证
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Context.MvcContext.PostValue(System.Object,System.String)">
            <summary>
            获取客户端post的数据，并自动赋值到对象各属性，最后进行验证
            </summary>
            <param name="obj"></param>
            <param name="lblName">表单中对象名称。如果为空，则使用对象类型的camel格式</param>
            <returns></returns>
        </member>
        <member name="P:wojilu.Web.Context.MvcContext.utils">
            <summary>
            高级工具方法MvcContextUtils
            </summary>
        </member>
        <member name="P:wojilu.Web.Context.MvcContext.web">
            <summary>
            web 原始数据和方法封装
            </summary>
        </member>
        <member name="P:wojilu.Web.Context.MvcContext.errors">
            <summary>
            获取当前ctx中的错误信息
            </summary>
        </member>
        <member name="P:wojilu.Web.Context.MvcContext.route">
            <summary>
            当前路由信息
            </summary>
        </member>
        <member name="P:wojilu.Web.Context.MvcContext.controller">
            <summary>
            当前控制器
            </summary>
        </member>
        <member name="P:wojilu.Web.Context.MvcContext.owner">
            <summary>
            当前 owner(被访问的对象信息)
            </summary>
        </member>
        <member name="P:wojilu.Web.Context.MvcContext.viewer">
            <summary>
            访问者的信息
            </summary>
        </member>
        <member name="P:wojilu.Web.Context.MvcContext.app">
            <summary>
            当前 app
            </summary>
        </member>
        <member name="P:wojilu.Web.Context.MvcContext.Page">
            <summary>
            页面元信息(包括Title/Keywords/Description/RssLink)
            </summary>
            <returns></returns>
        </member>
        <member name="P:wojilu.Web.Context.MvcContext.url">
            <summary>
            获取经过封装的 url 信息
            </summary>
        </member>
        <member name="P:wojilu.Web.Context.MvcContext.HasUploadFiles">
            <summary>
            客户端是否上传了文件
            </summary>
        </member>
        <member name="P:wojilu.Web.Context.MvcContext.HasErrors">
            <summary>
            当前 ctx 中是否有错误信息
            </summary>
        </member>
        <member name="P:wojilu.Web.Context.MvcContext.HttpMethod">
            <summary>
            客户端提交的 HttpMethod，返回GET/POST/DELETE/PUT 等
            </summary>
        </member>
        <member name="P:wojilu.Web.Context.MvcContext.IsGetMethod">
            <summary>
            当前客户端提交方法是否是 GET 方法
            </summary>
        </member>
        <member name="P:wojilu.Web.Context.MvcContext.Ip">
            <summary>
            获取客户端 ip 地址
            </summary>
        </member>
        <member name="P:wojilu.Web.Context.MvcContext.link">
            <summary>
            获取链接对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:wojilu.Web.Jobs.IWebJobItem">
            <summary>
            计划任务项的接口
            </summary>
        </member>
        <member name="M:wojilu.Web.Jobs.IWebJobItem.Execute">
            <summary>
            任务需要执行的方法
            </summary>
        </member>
        <member name="M:wojilu.Web.Jobs.IWebJobItem.End">
            <summary>
            任务结束时需要执行的方法
            </summary>
        </member>
        <member name="T:wojilu.Web.Jobs.WebJob">
            <summary>
            计划任务对象
            </summary>
        </member>
        <member name="P:wojilu.Web.Jobs.WebJob.Type">
            <summary>
            类的完整名称，比如wojilu.Common.Jobs.RefreshServerJob
            </summary>
        </member>
        <member name="P:wojilu.Web.Jobs.WebJob.Interval">
            <summary>
            间隔时间。单位:ms
            </summary>
        </member>
        <member name="P:wojilu.Web.Jobs.WebJob.IsRunning">
            <summary>
            是否运行
            </summary>
        </member>
        <member name="T:wojilu.Web.Jobs.WebJobStarter">
            <summary>
            计划任务启动器
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.Attr.AppAttribute">
            <summary>
            指明当前控制器所属的 app
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.Attr.DbTransactionAttribute">
            <summary>
            在当前 action 上启用数据库事务，支持多数据库事务
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.Attr.IHttpMethod">
            <summary>
            http 方法
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.Attr.HttpGetAttribute">
            <summary>
            当前 action 只能接受 GET 方法
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.Attr.HttpPostAttribute">
            <summary>
            当前 action 只能接受 POST 方法
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.Attr.HttpPutAttribute">
            <summary>
            当前 action 只能接受 PUT 方法
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.Attr.HttpDeleteAttribute">
            <summary>
            当前 action 只能接受 DELETE 方法
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.Attr.LoginAttribute">
            <summary>
            必须登录才能访问当前 action 
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.Attr.NonVisitAttribute">
            <summary>
            当前 action 禁止直接访问，只用于代码间调用
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.CacheUrl">
            <summary>
            Name属性存储url的路径(不包括域名和虚拟目录，以斜杠开头；后缀名根据实际有没有确定)
            </summary>
        </member>
        <member name="P:wojilu.Web.Mvc.CacheUrl.CacheSeconds">
            <summary>
            0或者小于0表示不缓存
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.ControllerBase">
            <summary>
            控制器基类，wojilu mvc 中最常使用的对象
            </summary>
        </member>
        <member name="F:wojilu.Web.Mvc.ControllerBase.errors">
            <summary>
            当前 controller 中发生的错误信息
            </summary>
        </member>
        <member name="F:wojilu.Web.Mvc.ControllerBase.ctx">
            <summary>
            当前mvc的上下文(context)，包括一些通用的数据和方法
            </summary>
        </member>
        <member name="F:wojilu.Web.Mvc.ControllerBase.LayoutControllerType">
            <summary>
            设置或获取布局控制器
            </summary>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.CheckPermission">
            <summary>
            检查权限
            </summary>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.Layout">
            <summary>
            布局方法
            </summary>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.HideLayout(System.Type)">
            <summary>
            隐藏某个布局
            </summary>
            <param name="layoutType">需要被隐藏的 LayoutController 类型</param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.HidePermission(System.Type)">
            <summary>
            隐藏某个权限检查步骤
            </summary>
            <param name="layoutType">需要被隐藏的权限检查 controller 类型</param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.bindOtherLink(wojilu.Web.IBlock,System.String,System.Object)">
            <summary>
            绑定链接
            </summary>
            <param name="tpl"></param>
            <param name="lbl"></param>
            <param name="obj"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.getBlock(System.String)">
            <summary>
            根据名称获取模板中某个block
            </summary>
            <param name="blockName">block名称</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.view(System.String)">
            <summary>
            手动指定当前 action 的视图文件(指定视图文件之后，默认的模板将被忽略)
            </summary>
            <param name="actionViewName">视图文件的名称，比如 List，或者带上路径 /Blog/Show(路径从视图view根目录算起)</param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.view(wojilu.aAction)">
            <summary>
            手动指定当前 action 的视图文件(指定视图文件之后，默认的模板将被忽略)
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.view(wojilu.aActionWithId)">
            <summary>
            手动指定当前 action 的视图文件(指定视图文件之后，默认的模板将被忽略)
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.viewContent(System.String)">
            <summary>
            自定义当前视图模的内容(自定义内容之后，默认的模板将被忽略)
            </summary>
            <param name="templateContent">模板的内容</param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.set(System.String,System.Object)">
            <summary>
            给模板中的变量赋值
            </summary>
            <param name="lbl">变量名称</param>
            <param name="val"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.set(System.String,System.String)">
            <summary>
            给模板中的变量赋值
            </summary>
            <param name="lbl">变量名称</param>
            <param name="val"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.bind(System.Object)">
            <summary>
            将对象绑定到模板
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.bind(System.String,System.Object)">
            <summary>
            将对象绑定到模板，并指定对象在模板中的变量名
            </summary>
            <param name="lbl">对象在模板中的变量名</param>
            <param name="val"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.bindList(System.String,System.String,System.Collections.IList)">
            <summary>
            将对象列表绑定到模板
            </summary>
            <param name="listName">需要被绑定的列表名</param>
            <param name="lbl">对象在模板中的变量名</param>
            <param name="objList">对象的列表</param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.bindList(System.String,System.String,System.Collections.IList,wojilu.Web.otherBindFunction)">
            <summary>
            将对象列表绑定到模板
            </summary>
            <param name="listName">需要被绑定的列表名</param>
            <param name="lbl">对象在模板中的变量名</param>
            <param name="objList">对象的列表</param>
            <param name="otherBinder">附加的绑定器otherBindFunction( IBlock tpl, String lbl, Object obj )</param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.bindList(System.String,System.String,System.Collections.IList,wojilu.Web.bindFunction)">
            <summary>
            将对象列表绑定到模板
            </summary>
            <param name="listName">需要被绑定的列表名</param>
            <param name="lbl">对象在模板中的变量名</param>
            <param name="objList">对象的列表</param>
            <param name="otherBinder">附加的绑定器bindFunction( IBlock tpl, int id )</param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.target(System.String)">
            <summary>
            设置模板中表单提交的target
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.target(wojilu.aAction)">
            <summary>
            设置模板中表单提交的target
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.target(wojilu.aActionWithId,System.Int64)">
            <summary>
            设置模板中表单提交的target
            </summary>
            <param name="action"></param>
            <param name="id"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.editor(System.String,System.String,System.String)">
            <summary>
            编辑器，工具栏只包括基本按钮
            </summary>
            <param name="propertyName">属性名称(也是编辑器名称)</param>
            <param name="propertyValue">需要被编辑的内容</param>
            <param name="height">编辑器高度(必须手动指定px单位)</param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.editorFull(System.String,System.String,System.String)">
            <summary>
            编辑器，包括全部的工具栏
            </summary>
            <param name="propertyName">属性名称(也是编辑器名称)</param>
            <param name="propertyValue">需要被编辑的内容</param>
            <param name="height">编辑器高度(必须手动指定px单位)</param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.editor(System.String,System.String,System.String,System.String)">
            <summary>
            编辑器，工具栏只包括基本按钮
            </summary>
            <param name="varName">模板中的变量名称</param>
            <param name="propertyName">需要编辑的属性名称</param>
            <param name="propertyValue">需要编辑的内容</param>
            <param name="height">编辑器高度(必须手动指定px单位)</param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.editor(System.String,System.String,System.String,System.String,wojilu.Editor.ToolbarType)">
            <summary>
            编辑器
            </summary>
            <param name="varName">模板中的变量名称</param>
            <param name="propertyName">需要编辑的属性名称</param>
            <param name="propertyValue">需要编辑的内容</param>
            <param name="height">编辑器高度(必须手动指定px单位)</param>
            <param name="toolbar">工具栏类型：基本按钮或全部按钮</param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.dropList(System.String,System.String[],System.Object)">
            <summary>
            下拉控件(用数组填充)
            </summary>
            <param name="varName">控件名称</param>
            <param name="options">填充下拉框的字符数组</param>
            <param name="val">选定的值</param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.dropList(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            下拉控件(用 Dictionary 填充)
            </summary>
            <param name="varName">控件名称</param>
            <param name="dic">填充下拉框的Dictionary</param>
            <param name="val">选定的值</param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.dropList(System.String,System.Collections.IList,System.String,System.Object)">
            <summary>
            下拉控件(用对象列表填充)
            </summary>
            <param name="varName">控件名称</param>
            <param name="list">填充下拉框的对象列表</param>
            <param name="nameValuePair">名值对，比如"Name=Id"表示用对象的属性Name填充选项的文本，用对象的属性Id填充选项的值</param>
            <param name="val">选定的值</param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.radioList(System.String,System.String[],System.Object)">
            <summary>
            多个单选的列表(用字符数组填充)
            </summary>
            <param name="varName">控件名称</param>
            <param name="options">填充列表的字符数组</param>
            <param name="val">选定的值</param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.radioList(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            多个单选的列表(用 Dictionary 填充)
            </summary>
            <param name="varName">控件名称</param>
            <param name="dic">填充列表的 Dictionary</param>
            <param name="val">选定的值</param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.radioList(System.String,System.Collections.IList,System.String,System.Object)">
            <summary>
            多个单选的列表(用对象列表填充)
            </summary>
            <param name="varName">控件名称</param>
            <param name="list">填充单选列表的对象列表</param>
            <param name="nameValuePair">名值对，比如"Name=Id"表示用对象的属性Name填充选项的文本，用对象的属性Id填充选项的值</param>
            <param name="val">选定的值</param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.checkboxList(System.String,System.String[],System.Object)">
            <summary>
            多选框(用数组填充)
            </summary>
            <param name="varName">控件名称</param>
            <param name="options">填充列表的字符数组</param>
            <param name="val">选定的值，多个选值之间用英文逗号分开，比如 "2, 6, 13"</param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.checkboxList(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            多选框(用 Dictionary 填充)
            </summary>
            <param name="varName">控件名称</param>
            <param name="dic">填充列表的 Dictionary</param>
            <param name="val">选定的值，多个选值之间用英文逗号分开，比如 "2, 6, 13"</param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.checkboxList(System.String,System.Collections.IList,System.String,System.Object)">
            <summary>
            多选框(用对象列表填充)
            </summary>
            <param name="varName">控件名称</param>
            <param name="list">填充多选列表的对象列表</param>
            <param name="nameValuePair">名值对，比如"Name=Id"表示用对象的属性Name填充选项的文本，用对象的属性Id填充选项的值</param>
            <param name="val">选定的值，多个选值之间用英文逗号分开，比如 "2, 6, 13"</param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.to(wojilu.aAction)">
            <summary>
            链接到某个 action
            </summary>
            <param name="action"></param>
            <returns>返回一个链接</returns>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.to(wojilu.aActionWithId,System.Int64)">
            <summary>
            链接到某个 action
            </summary>
            <param name="action"></param>
            <param name="id"></param>
            <returns>返回一个链接</returns>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.t2(wojilu.aAction)">
            <summary>
            链接到某个 action，链接中不包含 appId 信息
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.t2(wojilu.aActionWithId,System.Int64)">
            <summary>
            链接到某个 action，链接中不包含 appId 信息
            </summary>
            <param name="action"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.content(System.String)">
            <summary>
            设置当前 action 返回的内容（一旦设置，先前绑定的模板内容将被覆盖）
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.actionContent(System.String)">
            <summary>
            设置当前 action 返回的内容（一旦设置，先前绑定的模板内容将被覆盖）
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.echo(System.String)">
            <summary>
            根据模板显示提示信息。ajax情况不使用模板，只显示内容。
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.echoText(System.String)">
            <summary>
            直接显示内容(不根据模板)，然后结束
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.echoStatus(System.String,System.String)">
            <summary>
            显示信息，并发出 http 状态码 (HttpStatus.BadRequest_400 等等)
            </summary>
            <param name="msg"></param>
            <param name="httpStatusCode"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.echoJson(System.Object)">
            <summary>
            将对象序列化，然后输出到客户端(ContentType="application/json")，不再输出布局页面
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.echoJson(System.String)">
            <summary>
            将json字符串直接输出到客户端(ContentType="application/json")，不再输出布局页面
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.echoXml(System.String)">
            <summary>
            将xml直接输出到客户端(ContentType="text/xml")
            </summary>
            <param name="xml"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.echoAjaxOk">
            <summary>
            将字符串 ok 显示到客户端，等效于echoText( "ok" )
            </summary>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.echoResult(wojilu.Result)">
            <summary>
            将操作结果返回到客户端
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.echoResult(wojilu.Result,System.String)">
            <summary>
            将操作结果返回到客户端
            </summary>
            <param name="result"></param>
            <param name="okMsg">成功的提示信息(可为空)</param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.echoError">
            <summary>
            显示错误信息并跳转到默认页。如果是ajax，输出错误信息的json格式。
            </summary>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.echoError(System.String)">
            <summary>
            显示错误信息。如果是ajax，输出错误信息的json格式。
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.echoError(wojilu.Result)">
            <summary>
            显示错误信息。如果是ajax，输出错误信息的json格式。
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.echoJsonMsg(System.String,System.Boolean,System.String)">
            <summary>
            显示 json 信息给客户端，提示是否 valid ，返回 {"IsValid":true, "Msg":"", "Info":"这里是字符串"}
            </summary>
            <param name="msg"></param>
            <param name="isValid"></param>
            <param name="otherInfo"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.echoJsonMsg(System.String,System.Boolean,System.Object)">
            <summary>
            显示 json 信息给客户端，提示是否 valid ，返回 {"IsValid":true, "Msg":"", "Info":{这里是具体的json对象信息}}
            </summary>
            <param name="msg"></param>
            <param name="isValid"></param>
            <param name="otherObject"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.echoJsonOk">
            <summary>
            将 json 信息 {"Msg":"ok", "IsValid":true, "Info":""} 显示给客户端
            </summary>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.echoJsonOk(System.String)">
            <summary>
            将 json 信息 {"Msg": msg, "IsValid":true, "Info":""} 显示给客户端
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.echoRedirect(System.String)">
            <summary>
            先显示提示信息(echo)，然后跳转页面(redirect)。支持ajax。
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.echoRedirect(System.String,wojilu.aAction)">
            <summary>
            显示信息，然后跳转到指定的action
            </summary>
            <param name="msg">显示的信息</param>
            <param name="action">跳转的目标action</param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.echoRedirect(System.String,System.String)">
            <summary>
            显示信息，然后跳转到指定的url
            </summary>
            <param name="msg">显示的信息</param>
            <param name="url">跳转的目标网址</param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.echoRedirectPart(System.String,System.String)">
            <summary>
            仅在当前局部中刷新
            </summary>
            <param name="msg"></param>
            <param name="url"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.echoRedirectPart(System.String,System.String,System.Int32)">
            <summary>
            在指定范围的局部中刷新，从当前局部算起，倒着计数的layout中刷新：0、1、2、3、4
            </summary>
            <param name="msg"></param>
            <param name="url"></param>
            <param name="partNumber"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.echoHtmlTo(System.String,System.String)">
            <summary>
            (本方法不常用)将一段 html 字符串添加到父窗口的某个 elementID，一般客户端配合 ajaxUpdateForm 使用
            </summary>
            <param name="elementID"></param>
            <param name="htmlValue"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.echoToParent(System.String)">
            <summary>
            (用于弹窗中)显示提示信息，然后关闭弹窗，并刷新父页面
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.echoToParent(System.String,System.String)">
            <summary>
            (用于弹窗中)显示提示信息，然后关闭弹窗，并让父页面跳转到指定url
            </summary>
            <param name="msg"></param>
            <param name="url"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.redirect">
            <summary>
            自动跳转页面到来时的 url
            </summary>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.redirect(wojilu.aAction)">
            <summary>
            跳转页面到指定 action
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.redirect(wojilu.aActionWithId,System.Int64)">
            <summary>
            跳转页面到指定 action
            </summary>
            <param name="action"></param>
            <param name="id"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.redirect(System.String,System.Int64)">
            <summary>
            跳转页面到指定 action
            </summary>
            <param name="action"></param>
            <param name="id"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.redirectUrl(System.String)">
            <summary>
            跳转页面到指定 url
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.redirectDirect(System.String)">
            <summary>
            直接跳转，不经过layout参数处理
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.redirectLogin">
            <summary>
            向客户端返回没有权限的信息(401 Unauthorized)，同时跳转到登录页面
            </summary>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.load(System.String,wojilu.aAction)">
            <summary>
            将某 action 的内容加载到指定位置
            </summary>
            <param name="sectionName">需要加载内容的位置</param>
            <param name="action">被加载的 action</param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.load(System.String,wojilu.aActionWithId,System.Int64)">
            <summary>
            将某 action 的内容加载到指定位置
            </summary>
            <param name="sectionName">需要加载内容的位置</param>
            <param name="action">被加载的 action</param>
            <param name="id"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.loadHtml(System.String,System.String)">
            <summary>
            获取某 action 的内容
            </summary>
            <param name="controller"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.loadHtml(System.String,System.String,System.Int64)">
            <summary>
            获取某 action 的内容
            </summary>
            <param name="controller"></param>
            <param name="action"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.loadHtml(wojilu.aAction)">
            <summary>
            获取某 action 的内容
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.loadHtml(wojilu.aActionWithId,System.Int64)">
            <summary>
            获取某 action 的内容
            </summary>
            <param name="action"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.run(wojilu.aAction)">
            <summary>
            运行其他 action，并将运行结果作为当前 action 的内容
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.run(wojilu.aActionWithId,System.Int64)">
            <summary>
            运行其他 action，并将运行结果作为当前 action 的内容
            </summary>
            <param name="action"></param>
            <param name="id"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.lang(System.String)">
            <summary>
            从核心语言包(core.config)中获取多国语言的值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerBase.alang(System.String)">
            <summary>
            从各 app 的语言包中获取多国语言的值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:wojilu.Web.Mvc.ControllerBase.Page">
            <summary>
            页面元信息(包括Title/Keywords/Description/RssLink)
            </summary>
        </member>
        <member name="P:wojilu.Web.Mvc.ControllerBase.utils">
            <summary>
            一些帮助方法，主要是框架调用
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.ControllerFactory">
            <summary>
            控制器工厂，通过 IOC 容器创建控制器，实现依赖注入
            </summary>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerFactory.InitController(wojilu.Web.Context.MvcContext)">
            <summary>
            根据当前上下文中的路由，创建相应的controller
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerFactory.FindController(System.String,wojilu.Web.Context.MvcContext)">
            <summary>
            从ObjectContext中创建非单例controller，并初始化(注入ctx和controller所属的appType)
            </summary>
            <param name="typeName"></param>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerFactory.FindController(System.Type,wojilu.Web.Context.MvcContext)">
            <summary>
            从ObjectContext中创建非单例controller，并初始化(注入ctx和controller所属的appType)
            </summary>
            <param name="controllerType"></param>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.ControllerFactory.InjectController(wojilu.Web.Mvc.ControllerBase,wojilu.Web.Context.MvcContext)">
            <summary>
            根据容器配置，将依赖关系注入到已有对象中
            </summary>
            <param name="controller"></param>
            <param name="ctx"></param>
        </member>
        <member name="T:wojilu.Web.Mvc.CoreHandler">
            <summary>
            wojilu mvc 的核心处理器：处理客户端请求，将结果返回
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.Html">
            <summary>
            提供常用的 html 控件，比如单选列表、多选列表、下拉列表等
            </summary>
        </member>
        <member name="M:wojilu.Web.Mvc.Html.CheckBoxList(System.String[],System.String,System.Object)">
            <summary>
            多选框(用数组填充)
            </summary>
            <param name="items">填充列表的字符数组</param>
            <param name="chkName">控件名称</param>
            <param name="sValue">选定的值，多个选值之间用英文逗号分开，比如 "2, 6, 13"</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.Html.CheckBoxList(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Object)">
            <summary>
            多选框(用 Dictionary 填充)
            </summary>
            <param name="dic">填充列表的 Dictionary</param>
            <param name="chkName">控件名称</param>
            <param name="sValue">选定的值，多个选值之间用英文逗号分开，比如 "2, 6, 13"</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.Html.CheckBoxList(System.Collections.IList,System.String,System.String,System.String,System.Object)">
            <summary>
            多选框(用对象列表填充)
            </summary>
            <param name="list">填充多选列表的对象列表</param>
            <param name="chkName">控件名称</param>
            <param name="textField">对象的属性名称(用于选框中文本部分)</param>
            <param name="valueField">对象的属性名称(用于选框中值)</param>
            <param name="sValue">选定的值，多个选值之间用英文逗号分开，比如 "2, 6, 13"</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.Html.DropList(System.String[],System.String,System.Object)">
            <summary>
            下拉控件(用数组填充)
            </summary>
            <param name="items">填充下拉框的字符数组</param>
            <param name="dropName">控件名称</param>
            <param name="val">选定的值</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.Html.DropList(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Object)">
            <summary>
            下拉控件(用 Dictionary 填充)
            </summary>
            <param name="dic">填充下拉框的Dictionary</param>
            <param name="dropName">控件名称</param>
            <param name="val">选定的值</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.Html.DropList(System.Collections.IList,System.String,System.String,System.String,System.Object)">
            <summary>
            下拉控件(用对象列表填充)
            </summary>
            <param name="list">填充下拉框的对象列表</param>
            <param name="dropName">控件名称</param>
            <param name="textField">对象的属性名称(用于选框中文本部分)</param>
            <param name="valueField">对象的属性名称(用于选框中值)</param>
            <param name="val">选定的值</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.Html.RadioList(System.String[],System.String,System.Object)">
            <summary>
            多个单选的列表(用字符数组填充)
            </summary>
            <param name="items">填充列表的字符数组</param>
            <param name="radioName">控件名称</param>
            <param name="val">选定的值</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.Html.RadioList(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Object)">
            <summary>
            多个单选的列表(用 Dictionary 填充)
            </summary>
            <param name="dic">填充列表的 Dictionary</param>
            <param name="radioName">控件名称</param>
            <param name="val">选定的值</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.Html.RadioList(System.Collections.IList,System.String,System.String,System.String,System.Object)">
            <summary>
            多个单选的列表(用对象列表填充)
            </summary>
            <param name="list">填充单选列表的对象列表</param>
            <param name="radioName">控件名称</param>
            <param name="textField">对象的属性名称(用于选框中文本部分)</param>
            <param name="valueField">对象的属性名称(用于选框中值)</param>
            <param name="val">选定的值</param>
            <returns></returns>
        </member>
        <member name="P:wojilu.Web.Mvc.Html.Captcha">
            <summary>
            验证码控件(包括一个input  + 右侧的一个验证码 + 点击刷新机制)
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.CtxLink">
            <summary>
            带上下文(context=ctx)的链接生成工具
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.MemberPath">
            <summary>
            成员路径处理工具
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.MvcConfig">
            <summary>
            mvc 配置
            </summary>
        </member>
        <member name="M:wojilu.Web.Mvc.MvcConfig.CheckDomainMap">
            <summary>
            是否启用域名映射支持(比如二级域名映射)，除了检查本配置文件，还要检查是否是ip/localhost等情况
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.MvcConfig.GetErrorTemplatePath">
            <summary>
            获取网站发生错误时报错的模板路径，默认是 /framework/views/error.html
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.MvcConfig.GetErrorTemplateFile">
            <summary>
            获取网站发生错误时报错的模板文件名，不包括路径，也不包括后缀名。默认是 error
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.MvcConfig.GetMsgTemplatePath">
            <summary>
            获取反馈信息(通常使用echo方法时使用)的模板路径，默认是 /framework/views/msg.html
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.MvcConfig.GetMsgTemplateFile">
            <summary>
            获取反馈信息(通常使用echo方法时使用)的模板文件名，不包括路径，也不包括后缀名。默认是 msg
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.MvcConfig.GetMsgBoxTemplatePath">
            <summary>
            获取弹窗的模板路径，默认是 /framework/views/msgbox.html
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.MvcConfig.GetMsgBoxTemplateFile">
            <summary>
            获取弹窗的模板文件名，不包括路径，也不包括后缀名。默认是 msgbox
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.MvcConfig.GetForwardTemplatePath">
            <summary>
            获取页面跳转的模板路径，默认是 /framework/views/forward.html
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.MvcConfig.GetForwardTemplateFile">
            <summary>
            获取页面跳转的模板文件名，不包括路径，也不包括后缀名。默认是 forward
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.MvcConfig.getNoLogStatusCode">
            <summary>
            当网站发生异常时，不用记入错误日志的 HttpStatus
            </summary>
            <returns></returns>
        </member>
        <member name="P:wojilu.Web.Mvc.MvcConfig.RouteConfigPath">
            <summary>
            路由文件的绝对路径。默认是根目录绝对路径加上 /framework/config/route.config
            </summary>
        </member>
        <member name="P:wojilu.Web.Mvc.MvcConfig.RootNamespace">
            <summary>
            所有控制器的根命名空间。搜索 controller 时，会从这个根命名空间开始
            </summary>
        </member>
        <member name="P:wojilu.Web.Mvc.MvcConfig.UrlExt">
            <summary>
            网址后缀名。默认是.aspx，如果不为空，则带前缀.点号
            </summary>
        </member>
        <member name="P:wojilu.Web.Mvc.MvcConfig.UrlSeparator">
            <summary>
            网址分隔符，默认是斜杠 "/"，可以配置成横杠 "-"
            </summary>
        </member>
        <member name="P:wojilu.Web.Mvc.MvcConfig.IsUrlToLower">
            <summary>
            网址是否小写。默认是false
            </summary>
        </member>
        <member name="P:wojilu.Web.Mvc.MvcConfig.ViewExt">
            <summary>
            视图文件的后缀名。默认是.html，如果不为空，则带前缀.点号
            </summary>
        </member>
        <member name="P:wojilu.Web.Mvc.MvcConfig.ViewDir">
            <summary>
            视图文件的默认目录，一些不需要区分客户端的模板，比如激活邮件模板等等需要用到。默认值是 /framework/views/
            </summary>
        </member>
        <member name="P:wojilu.Web.Mvc.MvcConfig.ViewDirList">
            <summary>
            视图文件所在目录列表。默认值是 /framework/views/ ，也可以在 mvc.config 设置 viewsDirList ，可以添加多个目录
            </summary>
        </member>
        <member name="P:wojilu.Web.Mvc.MvcConfig.ViewsFilter">
            <summary>
            视图(模板)过滤器，用于判断：哪些viewsDir应该使用
            </summary>
        </member>
        <member name="P:wojilu.Web.Mvc.MvcConfig.Version">
            <summary>
            mvc框架的版本号
            </summary>
        </member>
        <member name="P:wojilu.Web.Mvc.MvcConfig.IsParseAppId">
            <summary>
            是否解析appId，默认解析，即将 Mycontroller16/List.aspx 中的16解析成appId
            </summary>
        </member>
        <member name="P:wojilu.Web.Mvc.MvcConfig.IsCacheView">
            <summary>
            是否缓存视图模板，默认不缓存。
            </summary>
        </member>
        <member name="P:wojilu.Web.Mvc.MvcConfig.IsActionCache">
            <summary>
            是否启用action缓存(如果关闭，所有action缓存都会失效)
            </summary>
        </member>
        <member name="P:wojilu.Web.Mvc.MvcConfig.IsPageCache">
            <summary>
            是否启用页面缓存(如果关闭，所有页面缓存都会失效)
            </summary>
        </member>
        <member name="P:wojilu.Web.Mvc.MvcConfig.IsDomainMap">
            <summary>
            是否启用域名映射支持(比如二级域名映射)
            </summary>
        </member>
        <member name="P:wojilu.Web.Mvc.MvcConfig.SubdomainWildcardType">
            <summary>
            二级域名通配符映射的类型
            </summary>
        </member>
        <member name="P:wojilu.Web.Mvc.MvcConfig.JsVersion">
            <summary>
            全站所有 js 的版本号
            </summary>
        </member>
        <member name="P:wojilu.Web.Mvc.MvcConfig.CssVersion">
            <summary>
            全站所有 css 的版本号
            </summary>
        </member>
        <member name="P:wojilu.Web.Mvc.MvcConfig.StaticDomain">
            <summary>
            静态文件所在的二级域名，比如 static 
            </summary>
        </member>
        <member name="P:wojilu.Web.Mvc.MvcConfig.Filter">
            <summary>
            自定义的过滤器类型，比如 wojilu.Web.Controller.RenderHelper
            </summary>
        </member>
        <member name="P:wojilu.Web.Mvc.MvcConfig.TagWhitelist">
            <summary>
            允许客户端提交的 html tag 白名单
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.PageMeta">
            <summary>
            页面的元信息，包括标题、关键词、描述和 rss 链接，主要用于 SEO
            </summary>
        </member>
        <member name="M:wojilu.Web.Mvc.PageMeta.SetTitleOnly(System.String)">
            <summary>
            给 title 赋值，不添加网站名称后缀
            </summary>
            <param name="title"></param>
        </member>
        <member name="M:wojilu.Web.Mvc.PageMeta.SetTitle(System.String,System.String)">
            <summary>
            将多个值放到 title 中
            </summary>
            <param name="item1"></param>
            <param name="item2"></param>
        </member>
        <member name="P:wojilu.Web.Mvc.PageMeta.Title">
            <summary>
            页面的标题。设值的时候，默认会加上网站名称的后缀。
            如果不需要后缀，请使用 SetTitleOnly() 方法
            </summary>
        </member>
        <member name="P:wojilu.Web.Mvc.PageMeta.Keywords">
            <summary>
            页面的关键词。如果值为空，则返回 site 的默认配置
            </summary>
        </member>
        <member name="P:wojilu.Web.Mvc.PageMeta.Description">
            <summary>
            页面的描述。如果值为空，则返回 site 的默认配置
            </summary>
        </member>
        <member name="P:wojilu.Web.Mvc.PageMeta.RssLink">
            <summary>
            页面对应的 rss 链接
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.Routes.Route">
            <summary>
            解析后的路由数据的封装
            </summary>
        </member>
        <member name="M:wojilu.Web.Mvc.Routes.Route.getControllerFullName">
            <summary>
            包括根命名空间，以及 Controller 后缀
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.Routes.Route.getControllerAndActionFullName">
            <summary>
            完整的controller和action名称，分隔符为点号.
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.Routes.Route.getControllerAndActionPath">
            <summary>
            不包括根命名空间，不包括Controller后缀；路径之间使用“/”
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.Routes.Route.setRootNamespace(System.String)">
            <summary>
            ControllerFactory.InitController 的时候设置
            </summary>
            <param name="rootNamespace">当前controller的根命名空间</param>
        </member>
        <member name="M:wojilu.Web.Mvc.Routes.Route.getRootNamespace">
            <summary>
            获取当前route中的当前controller的根命名空间，并非load中的controller的命名空间
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.Routes.Route.getNamespace">
            <summary>
            不包括根命名空间，路径分隔符 / 已经被替换成点号 .
            </summary>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.Routes.Route.setRoutePath(System.String)">
            <summary>
            将实际映射到的目标path存入 httpContext，方便 PageHelper 生成翻页链接
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:wojilu.Web.Mvc.Routes.RouteConfig">
            <summary>
            路由配置抽象基类
            </summary>
        </member>
        <member name="M:wojilu.Web.Mvc.Routes.RouteConfig.getConfigPath">
            <summary>
            返回绝对路径
            </summary>
            <returns></returns>
        </member>
        <member name="T:wojilu.Web.Mvc.Routes.RouteConfigTest">
            <summary>
            用户测试的路由配置
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.Routes.RouteConfigFile">
            <summary>
            路由配置
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.Routes.RouteSetting">
            <summary>
            所有路由数据
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.Routes.RouteTable">
            <summary>
            路由表
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.Routes.RouteTool">
            <summary>
            路由解析工具
            </summary>
        </member>
        <member name="M:wojilu.Web.Mvc.Routes.RouteTool.RecognizePath(System.String)">
            <summary>
            url 必须没有后缀名
            </summary>
            <param name="cleanUrl">必须没有后缀名</param>
            <returns></returns>
        </member>
        <member name="T:wojilu.Web.Mvc.Utils.HtmlCombiner">
            <summary>
            合并 action 和 layout 的内容
            </summary>
        </member>
        <member name="T:wojilu.Web.Mvc.Utils.MvcUtil">
            <summary>
            mvc 常用工具
            </summary>
        </member>
        <member name="M:wojilu.Web.Mvc.Utils.MvcUtil.LoadTemplate(System.String)">
            <summary>
            根据相对路径(相对于view的根目录，不包括扩展名)，加载模板
            </summary>
            <param name="relativePath">相对路径不包括扩展名(如果带了扩展名，也会被移除，然后用默认扩展名代替)</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Mvc.Utils.MvcUtil.renderValidatorJson(System.String,System.Boolean,System.String)">
            <summary>
            向客户端呈现 json 信息，并指出是否 valid
            </summary>
            <param name="htmlMsg"></param>
            <param name="isValid"></param>
            <param name="otherInfo"></param>
            <returns></returns>
        </member>
        <member name="T:wojilu.Web.Handler.CaptchaImageHandler">
            <summary>
            图片验证码处理器
            </summary>
        </member>
        <member name="T:wojilu.Web.Utils.AvatarUploader">
            <summary>
            头像上传工具
            </summary>
        </member>
        <member name="M:wojilu.Web.Utils.AvatarUploader.Save(wojilu.Web.HttpFile,System.Int64)">
            <summary>
            保存用户上传的头像
            </summary>
            <param name="postedFile"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="T:wojilu.Web.Utils.HtmlFilter">
            <summary>
            html 过滤器：根据白名单，过滤掉不安全的字符
            </summary>
        </member>
        <member name="M:wojilu.Web.Utils.HtmlFilter.Filter(System.String)">
            <summary>
            根据白名单，过滤掉不安全的字符
            </summary>
            <param name="srcString"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Utils.HtmlFilter.Filter(System.String,System.String)">
            <summary>
            只有允许的标签才能出现
            </summary>
            <param name="srcString"></param>
            <param name="allowedTags">用英文逗号或斜杠分隔;不区分大小写</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Utils.HtmlFilter.Filter(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            只有允许的标签才能出现
            </summary>
            <param name="srcString"></param>
            <param name="allowedTags">允许的tag，包括属性列表</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Utils.HtmlFilter.FilterAppendTags(System.String,System.String)">
            <summary>
            在默认白名单的基础上，增加允许的tag
            </summary>
            <param name="srcString"></param>
            <param name="allowedTags"></param>
            <returns></returns>
        </member>
        <member name="T:wojilu.Web.Utils.Uploader">
            <summary>
            图片和文件上传工具
            </summary>
        </member>
        <member name="M:wojilu.Web.Utils.Uploader.IsImage(wojilu.Web.HttpFile)">
            <summary>
            判断上传文件是否是图片
            </summary>
            <param name="postedFile"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Utils.Uploader.IsImage(System.String)">
            <summary>
            判断上传文件是否是图片
            </summary>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Utils.Uploader.SaveSiteLogo(wojilu.Web.HttpFile)">
            <summary>
            保存网站 logo
            </summary>
            <param name="postedFile"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Utils.Uploader.SaveFileOrImage(wojilu.Web.HttpFile)">
            <summary>
            保存上传的文件，如果是图片，则处理缩略图
            </summary>
            <param name="postedFile"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Utils.Uploader.SaveFile(wojilu.Web.HttpFile)">
            <summary>
            保存上传的非图片型文件
            </summary>
            <param name="postedFile"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Utils.Uploader.SaveImg(wojilu.Web.HttpFile)">
            <summary>
            保存上传的图片
            </summary>
            <param name="postedFile"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Utils.Uploader.SaveImg(wojilu.Web.HttpFile,System.Collections.Generic.Dictionary{System.String,wojilu.Drawing.ThumbInfo})">
            <summary>
            保存上传的图片
            </summary>
            <param name="postedFile"></param>
            <param name="arrThumbType"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Utils.Uploader.SaveImg(System.String,wojilu.Web.HttpFile,System.String,System.Int32,System.Int32,wojilu.Drawing.SaveThumbnailMode)">
            <summary>
            上传图片(自定义保存路径)，同时生成最小的缩略图
            </summary>
            <param name="uploadPath">保存路径(相对路径)</param>
            <param name="postedFile">HttpFile</param>
            <param name="picName">图片名称</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Utils.Uploader.CheckUploadPic(wojilu.Web.HttpFile,wojilu.Result)">
            <summary>
            检查上传的图片是否合法
            </summary>
            <param name="postedFile"></param>
            <param name="errors"></param>
        </member>
        <member name="M:wojilu.Web.Utils.Uploader.IsAllowedFile(wojilu.Web.HttpFile)">
            <summary>
            是否允许的格式
            </summary>
            <param name="pfile"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Web.Utils.Uploader.IsAllowedPic(wojilu.Web.HttpFile)">
            <summary>
            是否允许的格式
            </summary>
            <param name="pfile"></param>
            <returns></returns>
        </member>
        <member name="T:wojilu.Data.cdbx">
            <summary>
            从内存数据库中查询数据
            </summary>
            <remarks>
            数据持久化在 /framework/data/ 目录下，以json格式存储。加载之后常驻内存。
            特点：直接从内存中检索，速度相当于 Hashtable。插入和更新较慢(相对而言)，因为插入和更新会在内存中重建索引。
            </remarks>
        </member>
        <member name="M:wojilu.Data.cdbx.findAll(System.Type)">
            <summary>
            查询类型 T 的所有数据
            </summary>
        </member>
        <member name="M:wojilu.Data.cdbx.findById(System.Type,System.Int32)">
            <summary>
            根据 id 查询某条数据
            </summary>
        </member>
        <member name="M:wojilu.Data.cdbx.findByName(System.Type,System.String)">
            <summary>
            根据名称查询数据，因为已经根据名称做了索引，所以速度很快。
            </summary>
        </member>
        <member name="M:wojilu.Data.cdbx.findNameById(System.Type,System.Int32)">
            <summary>
            根据 id 获取对象的名称
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.Data.cdbx.findBy(System.Type,System.String,System.Object)">
            <summary>
            根据属性查询数据。框架已经给对象的所有属性做了索引。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName">属性名称</param>
            <param name="val">属性的值</param>
            <returns>返回数据列表</returns>
        </member>
        <member name="M:wojilu.Data.cdbx.findPage(System.Type,System.String,System.Object,System.Int32)">
            <summary>
            查询分页后的数据列表。不用提供当前页信息，因为在web环境中，框架会自动获取当前页面。
            分页是在内存中进行的，也就是先查询内存中所有记录，然后根据当前页和 pageSize 获取特定页面的数据。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName">属性名称</param>
            <param name="val">属性的值</param>
            <param name="pageSize">每页需要显示的数据量</param>
            <returns>分页数据列表，包括当前页、总记录数、分页条等</returns>
        </member>
        <member name="M:wojilu.Data.cdbx.findPage(System.Type,System.Int32)">
            <summary>
            查询分页后的数据列表。不用提供当前页信息，因为在web环境中，框架会自动获取当前页面。
            分页是在内存中进行的，也就是先查询内存中所有记录，然后根据当前页和 pageSize 获取特定页面的数据。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pageSize">每页需要显示的数据量</param>
            <returns>分页数据列表，包括当前页、总记录数、分页条等</returns>
        </member>
        <member name="T:wojilu.View.html">
            <summary>
            在模板中嵌入动态 html 代码
            </summary>
        </member>
        <member name="M:wojilu.View.html.show(System.String)">
            <summary>
            在当前代码处，显示 html
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:wojilu.View.html.showLine(System.String)">
            <summary>
            在当前代码处，显示 html ，并加上换行符(\r\n)
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:wojilu.View.html.encode(System.String)">
            <summary>
            对要在浏览器中显示的字符串进行编码
            </summary>
            <param name="str"></param>
        </member>
        <member name="T:wojilu.View.ctx">
            <summary>
            当前上下文对象，包括当前登录用户、当前被访问用户、当前用户ip等
            </summary>
        </member>
        <member name="M:wojilu.View.ctx.setItem(System.String,System.Object)">
            <summary>
            将数据放到 ctx 中，便于不同视图之间传递数据
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:wojilu.View.ctx.getItem(System.String)">
            <summary>
            获取上下文 ctx 中暂存的数据
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.View.ctx.get(System.String)">
            <summary>
            当前通过 GET 方式提交的查询字符串
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.View.ctx.getInt(System.String)">
            <summary>
            当前通过 GET 方式提交的查询字符串(返回整数类型)
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.View.ctx.getLong(System.String)">
            <summary>
            当前通过 GET 方式提交的查询字符串(返回long类型)
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.View.ctx.post(System.String)">
            <summary>
            当前通过 POST 方式提交的查询字符串
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.View.ctx.postInt(System.String)">
            <summary>
            当前通过 POST 方式提交的查询字符串(返回整数类型)
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.View.ctx.postLong(System.String)">
            <summary>
            当前通过 POST 方式提交的查询字符串(返回long类型)
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:wojilu.View.ctx.owner">
            <summary>
            当前被访问用户
            </summary>
        </member>
        <member name="P:wojilu.View.ctx.viewer">
            <summary>
            当前访问者(可以是登录用户，也可以是游客；通过 IsLogin 判断)
            </summary>
        </member>
        <member name="P:wojilu.View.ctx.app">
            <summary>
            当前app
            </summary>
        </member>
        <member name="P:wojilu.View.ctx.method">
            <summary>
            当前提交的 HttpMethod，比如 GET/POST/PUT/DELETE 等
            </summary>
        </member>
        <member name="P:wojilu.View.ctx.ip">
            <summary>
            当前访客的 IP 地址
            </summary>
        </member>
        <member name="P:wojilu.View.ctx.agent">
            <summary>
            当前访客的浏览器信息
            </summary>
        </member>
        <member name="T:wojilu.View.link">
            <summary>
            生成链接的工具
            </summary>
        </member>
        <member name="M:wojilu.View.link.to(wojilu.aAction)">
            <summary>
            生成到某个action的链接
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.View.link.to(wojilu.aActionWithId,System.Int64)">
            <summary>
            生成到某个action的链接
            </summary>
            <param name="action"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.View.link.user(System.Object)">
            <summary>
            生成到某个用户的链接
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.View.link.app(System.Object)">
            <summary>
            生成到某个app的链接(此app必须实现IApp接口)
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:wojilu.View.link.data(System.Object)">
            <summary>
            生成到某条数据的链接(此数据必须实现IAppData接口)
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:wojilu.View.url">
            <summary>
            当前网址信息
            </summary>
        </member>
        <member name="P:wojilu.View.url.text">
            <summary>
            当前网址的完整信息，比如 http://www.abc.com:5112/main/xtest.aspx?name=zhang
            </summary>
        </member>
        <member name="P:wojilu.View.url.path">
            <summary>
            当前网址中的路径信息，比如 /main/xtest.aspx
            </summary>
        </member>
        <member name="P:wojilu.View.url.query">
            <summary>
            当前网址中问号后面的查询信息(包括问号)，比如 ?name=zhang
            </summary>
        </member>
        <member name="P:wojilu.View.url.from">
            <summary>
            当前页面来源
            </summary>
        </member>
    </members>
</doc>
